import asyncio
import logging
import logging.handlers
from datetime import datetime, timedelta
import os
from pathlib import Path
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv, find_dotenv

from handlers import register_handlers
from handlers.notifications import wait_all_notifications, notify_monthly_profile_reminder
from database.database import Database
from config.settings import ADMIN_IDS
from middleware.database import DatabaseMiddleware

# –í main.py —Ñ—É–Ω–∫—Ü–∏—è setup_logging() - –í–ê–†–ò–ê–ù–¢–´ –ù–ê–°–¢–†–û–ô–ö–ò

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª—ã —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # –ö–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    root_logger.handlers.clear()
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        fmt="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )
    
    # === –í–ê–†–ò–ê–ù–¢ 1: –ü–û–õ–ù–û–°–¢–¨–Æ –ë–ï–ó –ö–û–ù–°–û–õ–ò ===
    # (–ø—Ä–æ—Å—Ç–æ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º console_handler)
    
    # === –í–ê–†–ò–ê–ù–¢ 2: –ö–û–ù–°–û–õ–¨ –¢–û–õ–¨–ö–û –î–õ–Ø –ö–†–ò–¢–ò–ß–ù–û–ì–û ===
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.ERROR)  # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)
    
    # === –í–ê–†–ò–ê–ù–¢ 3: –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–û –ß–ï–†–ï–ó .env ===
    console_enabled = os.getenv('CONSOLE_LOGS', 'false').lower() == 'true'
    if console_enabled:
        console_handler = logging.StreamHandler()
        console_level = os.getenv('CONSOLE_LEVEL', 'INFO').upper()
        console_handler.setLevel(getattr(logging, console_level, logging.INFO))
        console_handler.setFormatter(formatter)
        root_logger.addHandler(console_handler)
    
    # === –§–ê–ô–õ–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã) ===
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
    main_handler = logging.handlers.RotatingFileHandler(
        filename=logs_dir / "bot.log",
        maxBytes=10 * 1024 * 1024,  # 10 MB
        backupCount=5,
        encoding='utf-8'
    )
    main_handler.setLevel(logging.INFO)
    main_handler.setFormatter(formatter)
    root_logger.addHandler(main_handler)
    
    # –û—à–∏–±–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    error_handler = logging.handlers.RotatingFileHandler(
        filename=logs_dir / "errors.log", 
        maxBytes=5 * 1024 * 1024,   # 5 MB
        backupCount=3,
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(formatter)
    root_logger.addHandler(error_handler)
    
    # DEBUG –ª–æ–≥–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
    debug_mode = os.getenv('DEBUG', 'false').lower() == 'true'
    if debug_mode:
        daily_handler = logging.handlers.TimedRotatingFileHandler(
            filename=logs_dir / "daily.log",
            when='midnight',
            backupCount=7,
            encoding='utf-8'
        )
        daily_handler.setLevel(logging.DEBUG)
        daily_handler.setFormatter(formatter)
        root_logger.setLevel(logging.DEBUG)
        root_logger.addHandler(daily_handler)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç aiogram –∏ asyncpg
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    logging.getLogger("asyncpg").setLevel(logging.WARNING)
    
    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ —Ñ–∞–π–ª—ã + –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    logger = logging.getLogger(__name__)
    logger.info("üöÄ TeammateBot STARTED")
    logger.info(f"üìÅ –õ–æ–≥–∏: {logs_dir.absolute()}")
    logger.info(f"üìä Debug: {'ON' if debug_mode else 'OFF'}")
    if console_enabled:
        logger.info(f"üñ•Ô∏è  –ö–æ–Ω—Å–æ–ª—å: {console_level}")
    else:
        logger.info("üñ•Ô∏è  –ö–æ–Ω—Å–æ–ª—å: –û–¢–ö–õ–Æ–ß–ï–ù–ê")

setup_logging()
logger = logging.getLogger(__name__)

async def monthly_reminder_task(bot: Bot, db):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    logger.info("üìÖ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    try:
        users_for_reminder = await db.get_users_for_monthly_reminder()
        logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(users_for_reminder)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

        reminder_count = 0
        for user in users_for_reminder:
            user_id = user['telegram_id']
            game = user['game']

            try:
                await notify_monthly_profile_reminder(bot, user_id, game, db)
                reminder_count += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        logger.info(f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {reminder_count}/{len(users_for_reminder)}")

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def schedule_monthly_reminders(bot: Bot, db):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –∑–∞–¥–∞—á"""
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    while True:
        try:
            now = datetime.now()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (1 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00)
            if now.day == 1 and now.hour < 12:
                next_run = now.replace(hour=12, minute=0, second=0, microsecond=0)
            else:
                if now.month == 12:
                    next_run = now.replace(year=now.year + 1, month=1, day=1, hour=12, minute=0, second=0, microsecond=0)
                else:
                    next_run = now.replace(month=now.month + 1, day=1, hour=12, minute=0, second=0, microsecond=0)

            sleep_seconds = (next_run - now).total_seconds()
            sleep_days = sleep_seconds / 86400
            logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ {sleep_days:.1f} –¥–Ω–µ–π - {next_run.strftime('%Y-%m-%d %H:%M')}")

            await asyncio.sleep(sleep_seconds)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
            try:
                last_reminder_key = "last_monthly_reminder"
                last_reminder = await db._redis.get(last_reminder_key)
                if last_reminder:
                    last_date = datetime.fromisoformat(last_reminder)
                    if datetime.now() - last_date < timedelta(days=25):
                        logger.info("‚è≠Ô∏è  –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue

                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                await db._redis.setex(last_reminder_key, 86400 * 35, datetime.now().isoformat())
            except Exception as redis_error:
                logger.warning(f"‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {redis_error}")

            await monthly_reminder_task(bot, db)

        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("üîÑ –£–¥–∞–ª—è–µ–º pending updates –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook...")
    await bot.delete_webhook(drop_pending_updates=True)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
    startup_success = []
    startup_failed = []
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            startup_success.append(admin_id)
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            startup_failed.append(admin_id)
            logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    if startup_success:
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∞–º: {startup_success}")
    else:
        logger.warning("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω—É")
        
    if startup_failed:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {startup_failed}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv(find_dotenv(), override=True)
        token = os.getenv("BOT_TOKEN")
        if not token:
            logger.critical("üí• BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª")

        logger.info("üîë BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(token=token)
        dp = Dispatcher(storage=MemoryStorage())
        logger.info("ü§ñ Bot –∏ Dispatcher —Å–æ–∑–¥–∞–Ω—ã")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL + Redis...")
        db = Database()
        await db.init()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
        dp.update.middleware(DatabaseMiddleware(db))
        logger.info("üîß DatabaseMiddleware –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_handlers(dp)
        logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –ó–∞–ø—É—Å–∫–∞–µ–º startup –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
        await on_startup(bot)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        reminder_task = asyncio.create_task(schedule_monthly_reminders(bot, db))
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

        logger.info("üöÄ CGDV TeammateBot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º polling...")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling
        await dp.start_polling(bot)

    except (asyncio.CancelledError, KeyboardInterrupt):
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–û–°")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise
    finally:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        try:
            if 'reminder_task' in locals():
                logger.info("‚è∞ –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
                reminder_task.cancel()
        except:
            pass

        try:
            logger.info("üì® –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            await wait_all_notifications()
        except Exception as e:
            logger.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

        try:
            logger.info("üóÉÔ∏è  –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
            if 'db' in locals():
                await db.close()
        except Exception as e:
            logger.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")

        try:
            logger.info("üîê –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞...")
            if 'bot' in locals():
                await bot.session.close()
        except Exception as e:
            logger.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞: {e}")

        logger.info("‚úÖ TeammateBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        logger.info("=" * 60)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.critical(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise