import asyncio
import logging
import os
import signal
import sys
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_instance = None
dp_instance = None
database_instance = None
shutdown_event = asyncio.Event()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
    shutdown_event.set()

async def setup_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    from database.database import Database
    
    database = Database()
    await database.init()
    return database

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    from dotenv import load_dotenv
    load_dotenv(override=True)

    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token or bot_token == 'your_bot_token_here':
        raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

    bot = Bot(token=bot_token)
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    from handlers import register_handlers
    register_handlers(dp)

    return bot, dp

async def notify_admin_startup(bot: Bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –∑–∞–ø—É—Å–∫–µ"""
    admin_id = os.getenv('ADMIN_ID')
    if admin_id and admin_id != '123456789' and admin_id.isdigit():
        try:
            await bot.send_message(int(admin_id), "üöÄ CGDV –∑–∞–ø—É—â–µ–Ω —Å PostgreSQL + Redis!")
            logger.info(f"–ê–¥–º–∏–Ω {admin_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–ø—É—Å–∫–µ")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

async def notify_admin_shutdown(bot: Bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    admin_id = os.getenv('ADMIN_ID')
    if admin_id and admin_id != '123456789' and admin_id.isdigit():
        try:
            await bot.send_message(int(admin_id), "üõë CGDV –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info(f"–ê–¥–º–∏–Ω {admin_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ë–î –¥–ª—è handlers
_global_database = None

def get_database():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è handlers"""
    return _global_database

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global bot_instance, dp_instance, database_instance, _global_database
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL + Redis...")
        database_instance = await setup_database()
        _global_database = database_instance  # –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è handlers
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CGDV...")
        bot_instance, dp_instance = await setup_bot()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await notify_admin_startup(bot_instance)
        
        logger.info("‚úÖ CGDV –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        polling_task = asyncio.create_task(
            dp_instance.start_polling(bot_instance, skip_updates=True)
        )
        
        shutdown_task = asyncio.create_task(shutdown_event.wait())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ –∑–∞–¥–∞—á
        done, pending = await asyncio.wait(
            [polling_task, shutdown_task],
            return_when=asyncio.FIRST_COMPLETED
        )
        
        # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in pending:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç polling
        if polling_task in done:
            try:
                await polling_task
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
                raise
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    
    finally:
        # Graceful shutdown
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        
        if bot_instance:
            try:
                await notify_admin_shutdown(bot_instance)
                await bot_instance.session.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if database_instance:
            try:
                await database_instance.close()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        logger.info("üëã CGDV –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return True

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        sys.exit(0)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)