import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def main():
    if hasattr(main, '_running'):
        logger.warning("main() —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤")
        return
    main._running = True

    try:
        from dotenv import load_dotenv
        load_dotenv(override=True)

        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token or bot_token == 'your_bot_token_here':
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return

        bot = Bot(token=bot_token)
        dp = Dispatcher(storage=MemoryStorage())

        from handlers import register_handlers
        register_handlers(dp)

        logger.info("CGDV –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        admin_id = os.getenv('ADMIN_ID')
        if admin_id and admin_id != '123456789':
            try:
                await bot.send_message(int(admin_id), "CGDV –∑–∞–ø—É—â–µ–Ω!")
            except:
                pass

        try:
            await dp.start_polling(bot, skip_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await bot.session.close()

    finally:
        if hasattr(main, '_running'):
            delattr(main, '_running')

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")