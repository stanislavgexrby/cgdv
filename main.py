import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv, find_dotenv

from handlers import register_handlers
from handlers.notifications import wait_all_notifications
from database.database import Database
from config.settings import ADMIN_IDS
from middleware.database import DatabaseMiddleware

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

async def on_startup(bot: Bot):
    await bot.delete_webhook(drop_pending_updates=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    startup_success = []
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            startup_success.append(admin_id)
        except Exception as e:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e} "
                f"(—á–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∂–∞–ª Start —É –±–æ—Ç–∞)"
            )

    if startup_success:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ –∞–¥–º–∏–Ω–∞–º: {startup_success}")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω—É")

async def main():
    load_dotenv(find_dotenv(), override=True)
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env")

    bot = Bot(token=token)
    dp = Dispatcher(storage=MemoryStorage())

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL + Redis...")
    db = Database()
    await db.init()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    dp.update.middleware(DatabaseMiddleware(db))

    register_handlers(dp)

    await on_startup(bot)
    logger.info("‚úÖ CGDV –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    try:
        await dp.start_polling(bot)
    except (asyncio.CancelledError, KeyboardInterrupt):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–û–°")
    finally:
        await wait_all_notifications()
        await db.close()
        await bot.session.close()
        logger.info("CG TeamUp –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
