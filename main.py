import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv, find_dotenv

from handlers import register_handlers
from database.database import Database
from config.settings import ADMIN_ID
from middleware.database import DatabaseMiddleware

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

async def on_startup(bot: Bot):
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        await bot.send_message(ADMIN_ID, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å—Ç–∞—Ä—Ç–µ")
    except Exception as e:
        logger.warning(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e} "
            f"(—á–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∂–∞–ª Start —É –±–æ—Ç–∞)"
        )

async def main():
    # 1) env
    load_dotenv(find_dotenv())
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env")

    # 2) bot/dispatcher
    bot = Bot(token=token)
    dp = Dispatcher(storage=MemoryStorage())

    # 3) db
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL + Redis...")
    db = Database()
    await db.init()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # 4) middleware
    dp.update.middleware(DatabaseMiddleware(db))

    # 5) handlers
    register_handlers(dp)

    # 6) —Å—Ç–∞—Ä—Ç –∏ –ø–æ–ª–ª–∏–Ω–≥
    await on_startup(bot)
    logger.info("‚úÖ CGDV –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    try:
        await dp.start_polling(bot)  # –æ–±—ã—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Å—Ç CancelledError –≤–Ω—É—Ç—Ä–∏
    except (asyncio.CancelledError, KeyboardInterrupt):
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–û–°")
    finally:
        await db.close()
        await bot.session.close()
        logger.info("üëã CGDV –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        # —á—Ç–æ–±—ã Windows/IDE –Ω–µ –ø–µ—á–∞—Ç–∞–ª –ª–∏—à–Ω–∏–π —Ç—Ä–µ–π—Å –ø—Ä–∏ Ctrl+C
        pass
