import logging
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import keyboards.keyboards as kb
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings
from handlers.basic import check_ban_and_profile, safe_edit_message

logger = logging.getLogger(__name__)
router = Router()

class ProfileForm(StatesGroup):
    name = State()
    nickname = State()
    age = State()
    rating = State()
    region = State()
    positions = State()
    additional_info = State()
    photo = State()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def validate_profile_input(field: str, value, game: str = None) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    if field == 'name':
        if len(value) < 2 or len(value) > settings.MAX_NAME_LENGTH:
            return False, f"‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
        if len(value.split()) < 2:
            return False, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"
    
    elif field == 'nickname':
        if len(value) < 2 or len(value) > settings.MAX_NICKNAME_LENGTH:
            return False, f"‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NICKNAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    
    elif field == 'age':
        try:
            age = int(value)
            if age < settings.MIN_AGE:
                return False, f"‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ {settings.MIN_AGE}"
        except ValueError:
            return False, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
    
    elif field == 'info':
        if len(value) > settings.MAX_INFO_LENGTH:
            return False, f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å–∏–º—É–º {settings.MAX_INFO_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
    
    return True, ""

async def save_profile_universal(user_id: int, data: dict, photo_id: str = None, db = None) -> bool:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    success = await db.update_user_profile(
        telegram_id=user_id,
        game=data['game'],
        name=data['name'],
        nickname=data['nickname'],
        age=data['age'],
        rating=data['rating'],
        region=data.get('region', 'eeu'),
        positions=data['positions'],
        additional_info=data['additional_info'],
        photo_id=photo_id
    )
    
    if success:
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è {user_id} –≤ {data['game']}")
    
    return success

# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@router.callback_query(F.data == "create_profile")
@check_ban_and_profile(require_profile=False)
async def start_create_profile(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    game_name = settings.GAMES.get(game, game)

    await state.update_data(
        user_id=user_id,
        game=game,
        positions_selected=[]
    )
    await state.set_state(ProfileForm.name)
    text = f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è {game_name}\n\n{texts.QUESTIONS['name']}"
    
    await safe_edit_message(callback, text, kb.cancel_profile_creation())
    await callback.answer()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================

@router.message(ProfileForm.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π")
        return

    name = message.text.strip()
    is_valid, error_msg = validate_profile_input('name', name)
    
    if not is_valid:
        await message.answer(error_msg)
        return

    await state.update_data(name=name)
    await state.set_state(ProfileForm.nickname)
    await message.answer(texts.QUESTIONS["nickname"], reply_markup=kb.cancel_profile_creation())

@router.message(ProfileForm.name, ~F.text)
async def wrong_name_format(message: Message):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π")

@router.message(ProfileForm.nickname)
async def process_nickname(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º")
        return

    nickname = message.text.strip()
    is_valid, error_msg = validate_profile_input('nickname', nickname)
    
    if not is_valid:
        await message.answer(error_msg)
        return

    await state.update_data(nickname=nickname)
    await state.set_state(ProfileForm.age)
    await message.answer(texts.QUESTIONS["age"], reply_markup=kb.cancel_profile_creation())

@router.message(ProfileForm.nickname, ~F.text)
async def wrong_nickname_format(message: Message):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º")

@router.message(ProfileForm.age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if not message.text:
        await message.answer(f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ {settings.MIN_AGE}")
        return

    is_valid, error_msg = validate_profile_input('age', message.text.strip())
    
    if not is_valid:
        await message.answer(error_msg)
        return

    age = int(message.text.strip())
    await state.update_data(age=age)
    await state.set_state(ProfileForm.rating)

    data = await state.get_data()
    game = data['game']

    await message.answer("üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=kb.ratings(game, with_cancel=True))

@router.message(ProfileForm.age, ~F.text)
async def wrong_age_format(message: Message):
    await message.answer(f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ {settings.MIN_AGE}")

@router.message(ProfileForm.additional_info)
async def process_additional_info(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    info = message.text.strip()
    is_valid, error_msg = validate_profile_input('info', info)
    
    if not is_valid:
        await message.answer(error_msg)
        return

    await state.update_data(additional_info=info)
    await state.set_state(ProfileForm.photo)
    await message.answer(texts.QUESTIONS["photo"], reply_markup=kb.skip_photo())

@router.message(ProfileForm.additional_info, ~F.text)
async def wrong_info_format(message: Message):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")

@router.message(ProfileForm.photo, F.photo)
async def process_photo(message: Message, state: FSMContext, db):
    photo_id = message.photo[-1].file_id
    await save_profile_flow(message, state, photo_id, db)

@router.message(ProfileForm.photo)
async def wrong_photo_format(message: Message):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=kb.skip_photo())

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ====================

@router.callback_query(F.data.startswith("rating_"), ProfileForm.rating)
async def process_rating(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    rating = callback.data.split("_")[1]
    await state.update_data(rating=rating)
    await state.set_state(ProfileForm.region)

    await safe_edit_message(callback, "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", kb.regions(with_cancel=True))
    await callback.answer()

@router.callback_query(F.data.startswith("region_"), ProfileForm.region)
async def process_region(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    region = callback.data.split("_")[1]
    await state.update_data(region=region)
    await state.set_state(ProfileForm.positions)

    data = await state.get_data()
    game = data['game']

    await safe_edit_message(callback, "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", kb.positions(game, []))
    await callback.answer()

@router.callback_query(F.data.startswith("pos_add_"), ProfileForm.positions)
async def add_position(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    position = callback.data.split("_")[2]
    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']

    if position not in selected:
        selected.append(position)
        await state.update_data(positions_selected=selected)

    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data.startswith("pos_remove_"), ProfileForm.positions)
async def remove_position(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    position = callback.data.split("_")[2]
    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']

    if position in selected:
        selected.remove(position)
        await state.update_data(positions_selected=selected)

    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data == "pos_done", ProfileForm.positions)
async def positions_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
    data = await state.get_data()
    selected = data.get('positions_selected', [])

    if not selected:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)
        return

    await state.update_data(positions=selected)
    await state.set_state(ProfileForm.additional_info)

    await safe_edit_message(callback, "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:", kb.skip_info())
    await callback.answer()

@router.callback_query(F.data == "pos_any", ProfileForm.positions)
async def process_any_position(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ª—é–±–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    await state.update_data(positions=["any"])
    await state.set_state(ProfileForm.additional_info)

    await safe_edit_message(callback, "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:", kb.skip_info())
    await callback.answer()

@router.callback_query(F.data == "pos_need", ProfileForm.positions)
async def positions_need(callback: CallbackQuery):
    await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)

@router.callback_query(F.data == "skip_info", ProfileForm.additional_info)
async def skip_info(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await state.update_data(additional_info="")
    await state.set_state(ProfileForm.photo)

    await safe_edit_message(callback, texts.QUESTIONS["photo"], kb.skip_photo())
    await callback.answer()

@router.callback_query(F.data == "skip_photo", ProfileForm.photo)
async def skip_photo(callback: CallbackQuery, state: FSMContext, db):
    await save_profile_flow_callback(callback, state, None, db)

@router.callback_query(F.data == "cancel")
async def cancel_profile(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.clear()
    await safe_edit_message(callback, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", kb.back())
    await callback.answer()

# ==================== –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø ====================

async def save_profile_flow(message: Message, state: FSMContext, photo_id: str | None, db):
    """–§–∏–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    data = await state.get_data()
    user_id = data.get('user_id')  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ state
    
    if not user_id:
        # –§–æ–ª–ª–±–µ–∫ –Ω–∞ message, –µ—Å–ª–∏ –≤ state –Ω–µ—Ç ID
        user_id = message.from_user.id
        logger.warning(f"‚ö†Ô∏è user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ message: {user_id}")

    payload = {
        'game': data.get('game'),
        'name': data.get('name', '').strip(),
        'nickname': data.get('nickname', '').strip(),
        'age': data.get('age'),
        'rating': data.get('rating'),
        'region': data.get('region', 'eeu'),
        'positions': data.get('positions', []) or data.get('positions_selected', []),
        'additional_info': data.get('additional_info', '').strip(),
    }

    success = await save_profile_universal(
        user_id=user_id,  # ‚Üê –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
        data=payload,
        photo_id=photo_id,
        db=db
    )
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

async def save_profile_flow_callback(callback: CallbackQuery, state: FSMContext, photo_id: str, db):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ callback"""
    data = await state.get_data()
    user_id = data.get('user_id', callback.from_user.id)  # –ë–µ—Ä–µ–º –∏–∑ state, —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ callback
    
    success = await save_profile_universal(
        user_id=user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ state
        data=data, 
        photo_id=photo_id,
        db=db  # –ü–µ—Ä–µ–¥–∞–µ–º db
    )
    await state.clear()

    if success:
        game_name = settings.GAMES.get(data['game'], data['game'])
        text = f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –¥–ª—è {game_name} —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤."
        await safe_edit_message(callback, text, kb.back())
    else:
        await safe_edit_message(callback, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", kb.back())

    await callback.answer()