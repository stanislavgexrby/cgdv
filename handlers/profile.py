import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)

class ProfileForm(StatesGroup):
    name = State()
    nickname = State()
    age = State()
    rating = State()
    positions = State()
    additional_info = State()
    photo = State()

class EditProfileForm(StatesGroup):
    edit_name = State()
    edit_nickname = State()
    edit_age = State()
    edit_rating = State()
    edit_positions = State()
    edit_info = State()
    edit_photo = State()

@router.callback_query(F.data == "create_profile")
async def start_create_profile(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    game_name = settings.GAMES.get(game, game)

    await state.update_data(
        user_id=user_id,
        game=game,
        positions_selected=[]
    )

    await state.set_state(ProfileForm.name)
    text = f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è {game_name}\n\n{texts.QUESTIONS['name']}"
    await callback.message.edit_text(text, reply_markup=kb.cancel_profile_creation())
    await callback.answer()

@router.message(ProfileForm.name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()

    if len(name) < 2 or len(name) > settings.MAX_NAME_LENGTH:
        await message.answer(
            f"‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return

    if len(name.split()) < 2:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"
        )
        return

    await state.update_data(name=name)
    await state.set_state(ProfileForm.nickname)
    await message.answer(
        texts.QUESTIONS["nickname"],
        reply_markup=kb.cancel_profile_creation()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–º–µ–Ω–∏
@router.message(ProfileForm.name, ~F.text)
async def wrong_name_format(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π"
    )

@router.message(ProfileForm.nickname)
async def process_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()

    if len(nickname) < 2 or len(nickname) > settings.MAX_NICKNAME_LENGTH:
        await message.answer(
            f"‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NICKNAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return

    await state.update_data(nickname=nickname)
    await state.set_state(ProfileForm.age)
    await message.answer(
        texts.QUESTIONS["age"],
        reply_markup=kb.cancel_profile_creation()
    )

@router.message(ProfileForm.nickname, ~F.text)
async def wrong_nickname_format(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º"
    )

@router.message(ProfileForm.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
        )
        return

    if age < settings.MIN_AGE or age > settings.MAX_AGE:
        await message.answer(
            f"‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {settings.MIN_AGE} –¥–æ {settings.MAX_AGE}"
        )
        return

    await state.update_data(age=age)
    await state.set_state(ProfileForm.rating)

    data = await state.get_data()
    game = data['game']

    rating_text = "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:"
    await message.answer(rating_text, reply_markup=kb.ratings(game))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(ProfileForm.age, ~F.text)
async def wrong_age_format(message: Message, state: FSMContext):
    await message.answer(
        f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç {settings.MIN_AGE} –¥–æ {settings.MAX_AGE}"
    )

@router.callback_query(F.data.startswith("rating_"), ProfileForm.rating)
async def process_rating(callback: CallbackQuery, state: FSMContext):
    rating = callback.data.split("_")[1]

    await state.update_data(rating=rating)
    await state.set_state(ProfileForm.positions)

    data = await state.get_data()
    game = data['game']

    position_text = "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
    await callback.message.edit_text(position_text, reply_markup=kb.positions(game, []))
    await callback.answer()

@router.callback_query(F.data.startswith("pos_add_"), ProfileForm.positions)
async def add_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[2]

    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']

    if position not in selected:
        selected.append(position)
        await state.update_data(positions_selected=selected)

    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data.startswith("pos_remove_"), ProfileForm.positions)
async def remove_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[2]

    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']

    if position in selected:
        selected.remove(position)
        await state.update_data(positions_selected=selected)

    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data == "pos_done", ProfileForm.positions)
async def positions_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get('positions_selected', [])

    if not selected:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)
        return

    await state.update_data(positions=selected)
    await state.set_state(ProfileForm.additional_info)

    await callback.message.edit_text(
        texts.QUESTIONS["info"],
        reply_markup=kb.cancel_profile_creation()
    )
    await callback.answer()

@router.callback_query(F.data == "pos_need", ProfileForm.positions)
async def positions_need(callback: CallbackQuery):
    await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)

@router.message(ProfileForm.additional_info)
async def process_additional_info(message: Message, state: FSMContext):
    info = message.text.strip()

    if info == "-":
        info = ""

    if len(info) > settings.MAX_INFO_LENGTH:
        await message.answer(
            f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å–∏–º—É–º {settings.MAX_INFO_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return

    await state.update_data(additional_info=info)
    await state.set_state(ProfileForm.photo)

    await message.answer(texts.QUESTIONS["photo"], reply_markup=kb.skip_photo())

@router.message(ProfileForm.additional_info, ~F.text)
async def wrong_info_format(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")

@router.message(ProfileForm.photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await save_profile(message, state, photo_id)

@router.callback_query(F.data == "skip_photo", ProfileForm.photo)
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    await save_profile_callback(callback, state, None)

@router.message(ProfileForm.photo)
async def wrong_photo_format(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=kb.skip_photo())

async def save_profile(message: Message, state: FSMContext, photo_id: str):
    data = await state.get_data()

    success = db.update_user_profile(
        telegram_id=data['user_id'],
        game=data['game'],
        name=data['name'],
        nickname=data['nickname'],
        age=data['age'],
        rating=data['rating'],
        positions=data['positions'],
        additional_info=data['additional_info'],
        photo_id=photo_id
    )

    await state.clear()

    if success:
        game_name = settings.GAMES.get(data['game'], data['game'])
        text = f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –¥–ª—è {game_name} —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤."
        await message.answer(text, reply_markup=kb.back())
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è {data['user_id']} –≤ {data['game']}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=kb.back())

async def save_profile_callback(callback: CallbackQuery, state: FSMContext, photo_id: str):
    data = await state.get_data()

    success = db.update_user_profile(
        telegram_id=data['user_id'],
        game=data['game'],
        name=data['name'],
        nickname=data['nickname'],
        age=data['age'],
        rating=data['rating'],
        positions=data['positions'],
        additional_info=data['additional_info'],
        photo_id=photo_id
    )

    await state.clear()

    if success:
        game_name = settings.GAMES.get(data['game'], data['game'])
        text = f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –¥–ª—è {game_name} —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤."
        await callback.message.edit_text(text, reply_markup=kb.back())
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è {data['user_id']} –≤ {data['game']}")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=kb.back())

    await callback.answer()

@router.callback_query(F.data == "edit_profile")
async def edit_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    profile = db.get_user_profile(user_id, game)

    if not profile:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    game_name = settings.GAMES.get(game, game)

    current_info = f"üìù –¢–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n"
    current_info += f"üë§ –ò–º—è: {profile['name']}\n"
    current_info += f"üéÆ –ù–∏–∫–Ω–µ–π–º: {profile['nickname']}\n"
    current_info += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç\n"
    
    rating_name = settings.RATINGS[game].get(profile['rating'], profile['rating'])
    current_info += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating_name}\n"
    
    if profile['positions']:
        positions_text = []
        for pos in profile['positions']:
            if pos in settings.POSITIONS.get(game, {}):
                positions_text.append(settings.POSITIONS[game][pos])
            else:
                positions_text.append(pos)
        current_info += f"‚öîÔ∏è –ü–æ–∑–∏—Ü–∏–∏: {', '.join(positions_text)}\n"
    
    current_info += f"üìù –û —Å–µ–±–µ: {profile.get('additional_info') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    current_info += f"üì∏ –§–æ—Ç–æ: {'–∑–∞–≥—Ä—É–∂–µ–Ω–æ' if profile.get('photo_id') else '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n"
    current_info += "\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

    buttons = [
        [kb.InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")],
        [kb.InlineKeyboardButton(text="üéÆ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data="edit_nickname")],
        [kb.InlineKeyboardButton(text="üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
        [kb.InlineKeyboardButton(text="üèÜ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="edit_rating")],
        [kb.InlineKeyboardButton(text="‚öîÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏", callback_data="edit_positions")],
        [kb.InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_info")],
        [kb.InlineKeyboardButton(text="üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photo")],
        [kb.InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="create_profile")],
        [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    keyboard = kb.InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(current_info, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "edit_name")
async def edit_name(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_name)
    
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
    )
    await callback.answer()

@router.message(EditProfileForm.edit_name)
async def process_edit_name(message: Message, state: FSMContext):
    name = message.text.strip()

    if len(name) < 2 or len(name) > settings.MAX_NAME_LENGTH:
        await message.answer(f"‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if len(name.split()) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
        return

    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=name,
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back())

@router.message(EditProfileForm.edit_name, ~F.text)
async def wrong_edit_name_format(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π")

@router.callback_query(F.data == "edit_nickname")
async def edit_nickname(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_nickname)
    
    await callback.message.edit_text(
        "üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:",
        reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
    )
    await callback.answer()

@router.message(EditProfileForm.edit_nickname)
async def process_edit_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()

    if len(nickname) < 2 or len(nickname) > settings.MAX_NICKNAME_LENGTH:
        await message.answer(f"‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NICKNAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
        return

    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=nickname,
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.back())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back())

@router.message(EditProfileForm.edit_nickname, ~F.text)
async def wrong_edit_nickname_format(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º")

@router.callback_query(F.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_age)
    
    await callback.message.edit_text(
        f"üéÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç ({settings.MIN_AGE}-{settings.MAX_AGE}):",
        reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
    )
    await callback.answer()

@router.message(EditProfileForm.edit_age)
async def process_edit_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    if age < settings.MIN_AGE or age > settings.MAX_AGE:
        await message.answer(f"‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {settings.MIN_AGE} –¥–æ {settings.MAX_AGE}")
        return

    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=age,
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.back())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back())

@router.message(EditProfileForm.edit_age, ~F.text)
async def wrong_edit_age_format(message: Message, state: FSMContext):
    await message.answer(f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç {settings.MIN_AGE} –¥–æ {settings.MAX_AGE}")

@router.callback_query(F.data == "edit_rating")
async def edit_rating(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_rating)
    
    await callback.message.edit_text(
        "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:",
        reply_markup=kb.ratings(user['current_game'])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("rating_"), EditProfileForm.edit_rating)
async def process_edit_rating(callback: CallbackQuery, state: FSMContext):
    rating = callback.data.split("_")[1]
    
    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=rating,
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await callback.message.edit_text("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.back())
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back())
    
    await callback.answer()

@router.callback_query(F.data == "edit_positions")
async def edit_positions(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    profile = db.get_user_profile(user_id, user['current_game'])
    current_positions = profile['positions'] if profile else []
    
    await state.update_data(
        user_id=user_id, 
        game=user['current_game'],
        positions_selected=current_positions.copy()
    )
    await state.set_state(EditProfileForm.edit_positions)
    
    await callback.message.edit_text(
        "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=kb.positions(user['current_game'], current_positions)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pos_add_"), EditProfileForm.edit_positions)
async def edit_add_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[2]

    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']

    if position not in selected:
        selected.append(position)
        await state.update_data(positions_selected=selected)

    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data.startswith("pos_remove_"), EditProfileForm.edit_positions)
async def edit_remove_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[2]

    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']

    if position in selected:
        selected.remove(position)
        await state.update_data(positions_selected=selected)

    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data == "pos_done", EditProfileForm.edit_positions)
async def edit_positions_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get('positions_selected', [])

    if not selected:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)
        return

    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=selected,
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await callback.message.edit_text("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=kb.back())
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back())
    
    await callback.answer()

@router.callback_query(F.data == "pos_need", EditProfileForm.edit_positions)
async def edit_positions_need(callback: CallbackQuery):
    await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)

@router.callback_query(F.data == "edit_info")
async def edit_info(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_info)
    
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
        reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
    )
    await callback.answer()

@router.message(EditProfileForm.edit_info)
async def process_edit_info(message: Message, state: FSMContext):
    info = message.text.strip()

    if info == "-":
        info = ""

    if len(info) > settings.MAX_INFO_LENGTH:
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å–∏–º—É–º {settings.MAX_INFO_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=info,
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(EditProfileForm.edit_info, ~F.text)
async def wrong_edit_info_format(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å")

@router.callback_query(F.data == "edit_photo")
async def edit_photo(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_photo)
    
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':",
        reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="delete_photo")],
            [kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
    )
    await callback.answer()

@router.message(EditProfileForm.edit_photo, F.photo)
async def process_edit_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    
    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=photo_id
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back())

@router.callback_query(F.data == "delete_photo", EditProfileForm.edit_photo)
async def delete_photo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=None
        )
        
        await state.clear()
        
        if success:
            await callback.message.edit_text("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=kb.back())
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back())
    
    await callback.answer()

@router.message(EditProfileForm.edit_photo)
async def wrong_edit_photo_format(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏",
        reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="delete_photo")],
            [kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
    )

@router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.back())
    await callback.answer()

@router.callback_query(F.data == "delete_profile")
async def confirm_delete_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    game_name = settings.GAMES.get(game, game)

    text = (f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –≤ {game_name}\n\n" +
           "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n" +
           f"–í—Å–µ –ª–∞–π–∫–∏ –∏ –º–∞—Ç—á–∏ –≤ {game_name} –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")

    await callback.message.edit_text(text, reply_markup=kb.confirm_delete())
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def delete_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    success = db.delete_profile(user_id, game)

    if success:
        game_name = settings.GAMES.get(game, game)
        text = f"üóëÔ∏è –ê–Ω–∫–µ—Ç–∞ –≤ {game_name} —É–¥–∞–ª–µ–Ω–∞!"
        await callback.message.edit_text(text, reply_markup=kb.back())
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω –¥–ª—è {user_id} –≤ {game}")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=kb.back())

    await callback.answer()

@router.callback_query(F.data == "separator")
async def separator_handler(callback: CallbackQuery):
    await callback.answer()

@router.callback_query(F.data == "cancel")
async def cancel_profile(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.back())
    await callback.answer()