import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

from .basic import edit_text_with_photo

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)

@router.callback_query(F.data == "my_likes")
async def show_my_likes(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('name'):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É", show_alert=True)
        return

    likes = db.get_likes_for_user(user_id, user['current_game'])

    if not likes:
        game_name = settings.GAMES.get(user['current_game'], user['current_game'])
        text = f"‚ù§Ô∏è –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ {game_name}\n\n"
        text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        text += "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        text += "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        text += "‚Ä¢ –ë—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ –≤ –ø–æ–∏—Å–∫–µ"

        await callback.message.edit_text(text, reply_markup=kb.back())
        # await edit_text_with_photo(callback, text, kb.back())
        await callback.answer()
        return

    await show_like_profile(callback, likes[0])

async def show_like_profile(callback: CallbackQuery, profile: dict):
    profile_text = texts.format_profile(profile)
    text = f"‚ù§Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –ª–∞–π–∫–Ω—É–ª –≤–∞—Å:\n\n{profile_text}"

    try:
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=kb.like_actions(profile['telegram_id'])
            )
        else:
            await callback.message.edit_text(text, reply_markup=kb.like_actions(profile['telegram_id']))

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∞–π–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data.startswith("like_back_"))
async def like_back(callback: CallbackQuery):
    try:
        target_user_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    is_match = db.add_like(user_id, target_user_id, user['current_game'])

    if is_match:
        target_user = db.get_user(target_user_id)

        if target_user and target_user.get('username'):
            contact_text = f"\n\nüí¨ @{target_user['username']}"
        else:
            contact_text = "\n\n(–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç @username)"

        text = texts.MATCH_CREATED + contact_text
        keyboard = kb.contact(target_user.get('username') if target_user else None)

        # await callback.message.edit_text(text, reply_markup=keyboard)

        # if callback.message.photo:
        #     await callback.message.edit_caption(
        #         caption=text,
        #         reply_markup=keyboard
        #     )
        # else:
        #     await callback.message.edit_text(
        #         text,
        #         reply_markup=keyboard
        #     )
        await edit_text_with_photo(callback, text, keyboard)
        logger.info(f"–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫: {user_id} <-> {target_user_id}")
    else:
        await callback.message.edit_text("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=kb.back())
        # await edit_text_with_photo(callback, "‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=kb.back())

    await callback.answer()

@router.callback_query(F.data.startswith("skip_like_"))
async def skip_like(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞", reply_markup=kb.back())
        # await edit_text_with_photo(callback, "‚ùå –û—à–∏–±–∫–∞", reply_markup=kb.back())
        await callback.answer()
        return

    likes = db.get_likes_for_user(user_id, user['current_game'])

    if len(likes) <= 1:
        text = "‚úÖ –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n–ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ."
        # await callback.message.edit_text(text, reply_markup=kb.back())
        # if callback.message.photo:
        #     await callback.message.edit_caption(
        #         caption=text,
        #         reply_markup=kb.back()
        #     )
        # else:
        #     await callback.message.edit_text(
        #         text,
        #         reply_markup=kb.back()
        #     )
        await edit_text_with_photo(callback, "‚ùå –û—à–∏–±–∫–∞", reply_markup=kb.back())
    else:
        await show_like_profile(callback, likes[1]) ##### why likes[1]?

    await callback.answer()

@router.callback_query(F.data == "my_matches")
async def show_my_matches(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('name'):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É", show_alert=True)
        return

    matches = db.get_matches(user_id, user['current_game'])

    if not matches:
        game_name = settings.GAMES.get(user['current_game'], user['current_game'])
        text = f"üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ {game_name}\n\n"
        text += "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏:\n"
        text += "‚Ä¢ –õ–∞–π–∫–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—ã –≤ –ø–æ–∏—Å–∫–µ\n"
        text += "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"

        await callback.message.edit_text(text, reply_markup=kb.back())
        await callback.answer()
        return

    game_name = settings.GAMES.get(user['current_game'], user['current_game'])
    text = f"üíñ –í–∞—à–∏ –º–∞—Ç—á–∏ –≤ {game_name} ({len(matches)}):\n\n"

    for i, match in enumerate(matches, 1):
        name = match['name']
        username = match.get('username', '–Ω–µ—Ç username')
        text += f"{i}. {name} (@{username})\n"

    text += "\nüí¨ –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –∏–∑ –Ω–∏—Ö!"

    buttons = []
    for i, match in enumerate(matches[:5]):
        name = match['name'][:15] + "..." if len(match['name']) > 15 else match['name']
        buttons.append([kb.InlineKeyboardButton(
            text=f"üí¨ {name}", 
            callback_data=f"contact_{match['telegram_id']}"
        )])

    buttons.append([kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    keyboard = kb.InlineKeyboardMarkup(inline_keyboard=buttons)

    # await callback.message.edit_text(text, reply_markup=keyboard)
    # if callback.message.photo:
    #     await callback.message.edit_caption(
    #         caption=text,
    #         reply_markup=keyboard
    #     )
    # else:
    #     await callback.message.edit_text(
    #         text,
    #         reply_markup=keyboard
    #     )
    await edit_text_with_photo(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("contact_"))
async def show_contact(callback: CallbackQuery):
    try:
        target_user_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    target_user = db.get_user(target_user_id)

    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    profile_text = texts.format_profile(target_user)
    text = f"üíñ –í–∞—à –º–∞—Ç—á:\n\n{profile_text}"

    if target_user.get('username'):
        text += f"\n\nüí¨ @{target_user['username']}"
    else:
        text += "\n\n(–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç @username)"

    keyboard = kb.contact(target_user.get('username'))

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()