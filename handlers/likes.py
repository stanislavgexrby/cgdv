import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

from .notifications import notify_about_match, notify_about_like

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)

from handlers.basic import safe_edit_message

@router.callback_query(F.data == "my_likes")
async def show_my_likes(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']

    if db.is_user_banned(user_id):
        ban_info = db.get_user_ban(user_id)
        if ban_info:
            game_name = settings.GAMES.get(game, game)
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}\n\n"
            text += "–í–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª '–õ–∞–π–∫–∏' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

            await safe_edit_message(callback, text, kb.back())
            await callback.answer()
            return

    if not db.has_profile(user_id, game):
        game_name = settings.GAMES.get(game, game)
        await callback.answer(f"‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è {game_name}", show_alert=True)
        return

    likes = db.get_likes_for_user(user_id, game)

    if not likes:
        game_name = settings.GAMES.get(game, game)
        text = f"‚ù§Ô∏è –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ {game_name}\n\n"
        text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        text += "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        text += "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        text += "‚Ä¢ –ë—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ –≤ –ø–æ–∏—Å–∫–µ"

        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    await show_like_profile(callback, likes, 0)

async def show_like_profile(callback: CallbackQuery, likes: list, index: int):
    if index >= len(likes):
        text = "‚úÖ –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n–ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ."
        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    profile = likes[index]
    profile_text = texts.format_profile(profile)
    text = f"‚ù§Ô∏è –≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –ª–∞–π–∫–Ω—É–ª –≤–∞—Å:\n\n{profile_text}"

    callback_like = f"loves_back_{profile['telegram_id']}_{index}"
    callback_skip = f"loves_skip_{profile['telegram_id']}_{index}"

    like_keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
        [
            kb.InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç", callback_data=callback_like),
            kb.InlineKeyboardButton(text="üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=callback_skip)
        ],
        [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    try:
        if profile.get('photo_id'):
            try:
                await callback.message.delete()
            except:
                pass

            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=like_keyboard
            )
        else:
            await safe_edit_message(callback, text, like_keyboard)

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∞–π–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data.startswith("loves_back_"))
async def like_back(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        target_user_id = int(parts[2])
        current_index = int(parts[3]) if len(parts) > 3 else 0
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']

    if db.is_user_banned(user_id):
        game_name = settings.GAMES.get(game, game)
        ban_info = db.get_user_ban(user_id)
        if ban_info:
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}. –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∞–π–∫–∏."
        else:
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}. –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∞–π–∫–∏."
        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    is_match = db.add_like(user_id, target_user_id, game)

    if is_match:
        target_profile = db.get_user_profile(target_user_id, game)
        await notify_about_match(callback.bot, target_user_id, user_id, game)

        if target_profile:
            match_text = texts.format_profile(target_profile, show_contact=True)
            text = f"{texts.MATCH_CREATED}\n\n{match_text}"
        else:
            text = texts.MATCH_CREATED
            if target_profile and target_profile.get('username'):
                text += f"\n\nüí¨ @{target_profile['username']}"
            else:
                text += "\n\n(–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç @username)"

        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="‚ù§Ô∏è –î—Ä—É–≥–∏–µ –ª–∞–π–∫–∏", callback_data="my_likes")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await safe_edit_message(callback, text, keyboard)

        logger.info(f"–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫: {user_id} <-> {target_user_id}")
    else:
        await notify_about_like(callback.bot, target_user_id, game)

        likes = db.get_likes_for_user(user_id, game)

        if likes and current_index < len(likes):
            await show_like_profile(callback, likes, current_index)
        else:
            text = "‚úÖ –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n–ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ."
            await safe_edit_message(callback, text, kb.back())

    await callback.answer()

@router.callback_query(F.data.startswith("loves_skip_"))
async def skip_like(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        target_user_id = int(parts[2])
        current_index = int(parts[3]) if len(parts) > 3 else 0
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await safe_edit_message(callback, "‚ùå –û—à–∏–±–∫–∞", kb.back())
        await callback.answer()
        return

    game = user['current_game']

    if db.is_user_banned(user_id):
        game_name = settings.GAMES.get(game, game)
        ban_info = db.get_user_ban(user_id)
        if ban_info:
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}."
        else:
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}."
        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    db.skip_like(user_id, target_user_id, game)

    likes = db.get_likes_for_user(user_id, game)

    if likes:
        await show_like_profile(callback, likes, 0)
    else:
        text = "‚úÖ –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!\n\n–ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ."
        await safe_edit_message(callback, text, kb.back())

    await callback.answer()

@router.callback_query(F.data == "my_matches")
async def show_my_matches(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']

    if db.is_user_banned(user_id):
        ban_info = db.get_user_ban(user_id)
        if ban_info:
            game_name = settings.GAMES.get(game, game)
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}\n\n"
            text += "–í–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª '–ú–∞—Ç—á–∏' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

            await safe_edit_message(callback, text, kb.back())
            await callback.answer()
            return

    if not db.has_profile(user_id, game):
        game_name = settings.GAMES.get(game, game)
        await callback.answer(f"‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è {game_name}", show_alert=True)
        return

    matches = db.get_matches(user_id, game)
    game_name = settings.GAMES.get(game, game)

    if not matches:
        text = f"üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ {game_name}\n\n"
        text += "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏:\n"
        text += "‚Ä¢ –õ–∞–π–∫–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—ã –≤ –ø–æ–∏—Å–∫–µ\n"
        text += "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"

        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    text = f"üíñ –í–∞—à–∏ –º–∞—Ç—á–∏ –≤ {game_name} ({len(matches)}):\n\n"

    for i, match in enumerate(matches, 1):
        name = match['name']
        username = match.get('username', '–Ω–µ—Ç username')
        text += f"{i}. {name} (@{username})\n"

    text += "\nüí¨ –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –∏–∑ –Ω–∏—Ö!"

    buttons = []
    for i, match in enumerate(matches[:5]):
        name = match['name'][:15] + "..." if len(match['name']) > 15 else match['name']
        buttons.append([kb.InlineKeyboardButton(
            text=f"üí¨ {name}", 
            callback_data=f"contact_{match['telegram_id']}"
        )])

    buttons.append([kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    keyboard = kb.InlineKeyboardMarkup(inline_keyboard=buttons)

    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("contact_"))
async def show_contact(callback: CallbackQuery):
    try:
        target_user_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']

    if db.is_user_banned(user_id):
        game_name = settings.GAMES.get(game, game)
        ban_info = db.get_user_ban(user_id)
        if ban_info:
            ban_end = ban_info['expires_at']
            await callback.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}", show_alert=True)
        else:
            await callback.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}", show_alert=True)
        return

    target_profile = db.get_user_profile(target_user_id, game)

    if not target_profile:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    profile_text = texts.format_profile(target_profile, show_contact=True)
    text = f"üíñ –í–∞—à –º–∞—Ç—á:\n\n{profile_text}"

    keyboard = kb.contact(target_profile.get('username'))

    try:
        if target_profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=target_profile['photo_id'],
                caption=text,
                reply_markup=keyboard
            )
        else:
            await safe_edit_message(callback, text, keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        await safe_edit_message(callback, text, keyboard)

    await callback.answer()