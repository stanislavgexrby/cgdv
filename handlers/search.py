import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

from handlers.notifications import notify_about_match, notify_about_like
from handlers.basic import safe_edit_message, SearchForm

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)


# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@router.callback_query(F.data == "search")
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']

    if db.is_user_banned(user_id):
        ban_info = db.get_user_ban(user_id)
        if ban_info:
            game_name = settings.GAMES.get(game, game)
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}\n\n"
            text += "–í–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–µ."

            await safe_edit_message(callback, text, kb.back())
            await callback.answer()
            return

    if not db.has_profile(user_id, game):
        game_name = settings.GAMES.get(game, game)
        await callback.answer(f"‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è {game_name}", show_alert=True)
        return

    await state.clear()

    await state.update_data(
        user_id=user_id,
        game=game,
        rating_filter=None,
        position_filter=None,
        region_filter=None,
        profiles=[],
        current_index=0,
        message_with_photo=False
    )

    await state.set_state(SearchForm.filters)

    game_name = settings.GAMES.get(game, game)
    text = f"üîç –ü–æ–∏—Å–∫ –≤ {game_name}\n\n–§–∏–ª—å—Ç—Ä—ã:\n\n"
    text += "üèÜ –†–µ–π—Ç–∏–Ω–≥: –ª—é–±–æ–π\n"
    text += "‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: –ª—é–±–∞—è\n"
    text += "üåç –†–µ–≥–∏–æ–Ω: –ª—é–±–æ–π\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"

    await safe_edit_message(callback, text, kb.search_filters())
    await callback.answer()


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ô–ö–ò –§–ò–õ–¨–¢–†–û–í ====================

@router.callback_query(F.data == "filter_rating", SearchForm.filters)
async def set_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    data = await state.get_data()
    game = data.get('game')

    if not game:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return

    await safe_edit_message(callback, "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", kb.ratings_filter(game))
    await callback.answer()


@router.callback_query(F.data == "filter_position", SearchForm.filters)
async def set_position_filter(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    data = await state.get_data()
    game = data.get('game')

    if not game:
        logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return

    keyboard = kb.position_filter_menu(game)
    await safe_edit_message(callback, "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:", keyboard)
    await callback.answer()


@router.callback_query(F.data == "filter_region", SearchForm.filters)
async def set_region_filter(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    await safe_edit_message(callback, "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", kb.regions_filter())
    await callback.answer()


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ë–†–û–°–ê –§–ò–õ–¨–¢–†–û–í ====================

@router.callback_query(F.data == "rating_reset", SearchForm.filters)
async def reset_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
    await state.update_data(rating_filter=None)
    await _update_filter_display(callback, state, "üîÑ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —Å–±—Ä–æ—à–µ–Ω")


@router.callback_query(F.data == "position_reset", SearchForm.filters)
async def reset_position_filter(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    await state.update_data(position_filter=None)
    await _update_filter_display(callback, state, "üîÑ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω")


@router.callback_query(F.data == "region_reset", SearchForm.filters)
async def reset_region_filter(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    await state.update_data(region_filter=None)
    await _update_filter_display(callback, state, "üîÑ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É —Å–±—Ä–æ—à–µ–Ω")


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–´–ë–û–†–ê –§–ò–õ–¨–¢–†–û–í ====================

@router.callback_query(F.data.startswith("rating_"), SearchForm.filters)
async def save_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    if callback.data == "rating_reset":
        return  # –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        
    rating = callback.data.split("_")[1]
    
    data = await state.get_data()
    if not data or 'game' not in data:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ save_rating_filter")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return

    game = data['game']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞
    valid_ratings = list(settings.RATINGS.get(game, {}).keys())
    if rating not in valid_ratings:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ {rating} –¥–ª—è –∏–≥—Ä—ã {game}")
        return

    current_rating = data.get('rating_filter')
    if current_rating == rating:
        await callback.answer("–≠—Ç–æ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —É–∂–µ –≤—ã–±—Ä–∞–Ω")
        return

    await state.update_data(rating_filter=rating)
    
    rating_name = settings.RATINGS[game].get(rating, rating)
    await _update_filter_display(callback, state, f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating_name}")


@router.callback_query(F.data.startswith("pos_filter_"), SearchForm.filters)
async def save_position_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    if callback.data == "position_reset":
        return  # –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        
    parts = callback.data.split("_")
    if len(parts) < 3:
        return
        
    position = parts[2]
    
    data = await state.get_data()
    if not data or 'game' not in data:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ save_position_filter")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return

    game = data['game']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    valid_positions = list(settings.POSITIONS.get(game, {}).keys())
    if position not in valid_positions:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {position} –¥–ª—è –∏–≥—Ä—ã {game}")
        return

    current_position = data.get('position_filter')
    if current_position == position:
        await callback.answer("–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
        return

    await state.update_data(position_filter=position)
    
    position_name = settings.POSITIONS[game].get(position, position)
    await _update_filter_display(callback, state, f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {position_name}")


@router.callback_query(F.data.startswith("region_filter_"), SearchForm.filters)
async def save_region_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
    if callback.data == "region_reset":
        return  # –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        
    parts = callback.data.split("_")
    if len(parts) < 3:
        return
        
    region = parts[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞
    valid_regions = list(settings.REGIONS.keys())
    if region not in valid_regions:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω {region}")
        return

    data = await state.get_data()
    current_region = data.get('region_filter')
    if current_region == region:
        await callback.answer("–≠—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω")
        return

    await state.update_data(region_filter=region)
    
    region_name = settings.REGIONS.get(region, region)
    await _update_filter_display(callback, state, f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {region_name}")


@router.callback_query(F.data == "cancel_filter", SearchForm.filters)
async def cancel_filter(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await _update_filter_display(callback, state, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")


# ==================== –ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê –ò –ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–ï–ô ====================

@router.callback_query(F.data == "start_search", SearchForm.filters)
async def begin_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()

    if db.is_user_banned(data['user_id']):
        await state.clear()
        game_name = settings.GAMES.get(data['game'], data['game'])
        ban_info = db.get_user_ban(data['user_id'])
        if ban_info:
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}. –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        else:
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}. –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    profiles = db.get_potential_matches(
        user_id=data['user_id'],
        game=data['game'],
        rating_filter=data.get('rating_filter'),
        position_filter=data.get('position_filter'),
        region_filter=data.get('region_filter'),
        limit=20
    )

    if not profiles:
        await state.clear()

        game_name = settings.GAMES.get(data['game'], data['game'])
        text = f"üòî –ê–Ω–∫–µ—Ç—ã –≤ {game_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."

        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await safe_edit_message(callback, text, keyboard)
        await callback.answer()
        return

    await state.set_state(SearchForm.browsing)
    await state.update_data(profiles=profiles, current_index=0, message_with_photo=False)

    await show_current_profile(callback, state)


# ==================== –î–ï–ô–°–¢–í–ò–Ø –° –ü–†–û–§–ò–õ–Ø–ú–ò –í –ü–û–ò–°–ö–ï ====================

@router.callback_query(F.data.startswith("skip_"), SearchForm.browsing)
async def skip_profile(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø–æ–∏—Å–∫–µ"""
    if not (callback.data.startswith("skip_") and callback.data[5:].isdigit()):
        return

    try:
        skipped_user_id = int(callback.data[5:])
        data = await state.get_data()
        user_id = data['user_id']
        game = data['game']

        if db.is_user_banned(user_id):
            await state.clear()
            game_name = settings.GAMES.get(game, game)
            ban_info = db.get_user_ban(user_id)
            if ban_info:
                ban_end = ban_info['expires_at']
                text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}."
            else:
                text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}."
            await safe_edit_message(callback, text, kb.back())
            await callback.answer()
            return

        db.add_search_skip(user_id, skipped_user_id, game)
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –≤ –ø–æ–∏—Å–∫–µ: {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª {skipped_user_id}")

    except (ValueError, KeyError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞: {e}")

    await show_next_profile(callback, state)


@router.callback_query(F.data.startswith("like_"), SearchForm.browsing)
async def like_profile(callback: CallbackQuery, state: FSMContext):
    """–õ–∞–π–∫ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–∏—Å–∫–µ"""
    parts = callback.data.split("_")
    if len(parts) != 2 or not parts[1].isdigit():
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    try:
        target_user_id = int(parts[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    data = await state.get_data()
    from_user_id = data['user_id']
    game = data['game']

    if db.is_user_banned(from_user_id):
        await state.clear()
        game_name = settings.GAMES.get(game, game)
        ban_info = db.get_user_ban(from_user_id)
        if ban_info:
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}. –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∞–π–∫–∏."
        else:
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}. –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∞–π–∫–∏."
        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    is_match = db.add_like(from_user_id, target_user_id, game)

    if is_match:
        target_profile = db.get_user_profile(target_user_id, game)
        await notify_about_match(callback.bot, target_user_id, from_user_id, game)

        if target_profile:
            match_text = texts.format_profile(target_profile, show_contact=True)
            text = f"{texts.MATCH_CREATED}\n\n{match_text}"
        else:
            text = texts.MATCH_CREATED
            if target_profile and target_profile.get('username'):
                text += f"\n\nüí¨ @{target_profile['username']}"
            else:
                text += "\n\n(–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç @username)"

        keyboard = kb.contact(target_profile.get('username') if target_profile else None)

        try:
            if target_profile and target_profile.get('photo_id'):
                await callback.message.answer_photo(
                    photo=target_profile['photo_id'],
                    caption=text,
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç—á–∞: {e}")
            await callback.message.answer(text, reply_markup=keyboard)

        logger.info(f"–ú–∞—Ç—á: {from_user_id} <-> {target_user_id}")
    else:
        await safe_edit_message(
            callback, 
            texts.LIKE_SENT,
            kb.InlineKeyboardMarkup(
                inline_keyboard=[
                    [kb.InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="continue_search")],
                    [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )
        )

        await notify_about_like(callback.bot, target_user_id, game)
        logger.info(f"–õ–∞–π–∫: {from_user_id} -> {target_user_id}")

    await callback.answer()


@router.callback_query(F.data == "continue_search", SearchForm.browsing)
async def continue_search(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –ª–∞–π–∫–∞"""
    await show_next_profile(callback, state)


@router.callback_query(F.data.startswith("report_"), SearchForm.browsing)
async def report_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø–æ–∏—Å–∫–µ"""
    parts = callback.data.split("_")
    if len(parts) != 2 or not parts[1].isdigit():
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    try:
        reported_user_id = int(parts[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    data = await state.get_data()
    reporter_id = data['user_id']
    game = data['game']

    if db.is_user_banned(reporter_id):
        await state.clear()
        game_name = settings.GAMES.get(game, game)
        ban_info = db.get_user_ban(reporter_id)
        if ban_info:
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}."
        else:
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}."
        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    success = db.add_report(reporter_id, reported_user_id, game)

    if success:
        text = "üö© –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É!\n\n–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

        keyboard = kb.InlineKeyboardMarkup(
            inline_keyboard=[
                [kb.InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="continue_search")],
                [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )

        await safe_edit_message(callback, text, keyboard)

        logger.info(f"–ñ–∞–ª–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {reporter_id} –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ {reported_user_id}")
        await callback.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

        if settings.ADMIN_ID and settings.ADMIN_ID != 0:
            try:
                await callback.bot.send_message(
                    settings.ADMIN_ID,
                    f"üö© –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reporter_id} –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É {reported_user_id} –≤ –∏–≥—Ä–µ {settings.GAMES.get(game, game)}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    else:
        await callback.answer("‚ùå –í—ã —É–∂–µ –∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É –∞–Ω–∫–µ—Ç—É", show_alert=True)


# ==================== –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–ô –í–ù–ï FSM ====================

@router.callback_query(F.data.in_(["filter_rating", "filter_position", "filter_region", "start_search"]))
async def handle_search_outside_state(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–∏—Å–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM"""
    current_state = await state.get_state()
    
    if current_state is None or current_state != SearchForm.filters:
        logger.warning(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤—ã–∑–≤–∞–Ω –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM: {callback.data}")
        await state.clear()
        await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞...")
        await start_search(callback, state)


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def _update_filter_display(callback: CallbackQuery, state: FSMContext, message: str = None):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()
    game = data.get('game', 'dota')
    game_name = settings.GAMES.get(game, game)

    # –¢–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_text = "–ª—é–±–æ–π"
    if data.get('rating_filter'):
        rating_text = settings.RATINGS[game].get(data['rating_filter'], data['rating_filter'])

    # –¢–µ–∫—Å—Ç –ø–æ–∑–∏—Ü–∏–∏
    position_text = "–ª—é–±–∞—è"
    if data.get('position_filter'):
        position_text = settings.POSITIONS[game].get(data['position_filter'], data['position_filter'])

    # –¢–µ–∫—Å—Ç —Ä–µ–≥–∏–æ–Ω–∞
    region_text = "–ª—é–±–æ–π"
    if data.get('region_filter'):
        region_text = settings.REGIONS.get(data['region_filter'], data['region_filter'])

    text = f"üîç –ü–æ–∏—Å–∫ –≤ {game_name}\n\n–§–∏–ª—å—Ç—Ä—ã:\n\n"
    text += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating_text}\n"
    text += f"‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: {position_text}\n"
    text += f"üåç –†–µ–≥–∏–æ–Ω: {region_text}\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"

    await safe_edit_message(callback, text, kb.search_filters())
    
    if message:
        await callback.answer(message)


async def show_current_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø–æ–∏—Å–∫–µ"""
    data = await state.get_data()

    if not data or 'profiles' not in data:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ show_current_profile")
        await state.clear()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    profiles = data['profiles']
    index = data['current_index']

    if index >= len(profiles):
        await state.clear()

        game_name = settings.GAMES.get(data.get('game', 'dota'), data.get('game', 'dota'))
        text = f"üòî –ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –≤ {game_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."

        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await safe_edit_message(callback, text, keyboard)
        await state.update_data(message_with_photo=False)
        await callback.answer()
        return

    profile = profiles[index]
    profile_text = texts.format_profile(profile)

    try:
        if profile.get('photo_id'):
            try:
                await callback.message.delete()
            except:
                pass

            sent_message = await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=profile_text,
                reply_markup=kb.profile_actions(profile['telegram_id'])
            )

            await state.update_data(message_with_photo=True, last_message_id=sent_message.message_id)
        else:
            await safe_edit_message(
                callback,
                profile_text,
                kb.profile_actions(profile['telegram_id'])
            )
            await state.update_data(message_with_photo=False)

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç—ã: {e}")
        await show_next_profile(callback, state)


async def show_next_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å"""
    data = await state.get_data()
    current_index = data['current_index']

    await state.update_data(current_index=current_index + 1)
    await show_current_profile(callback, state)