# handlers/search.py
"""
–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchForm(StatesGroup):
    filters = State()
    browsing = State()

@router.callback_query(F.data == "search")
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user or not user.get('name'):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    await state.update_data(
        user_id=user_id,
        game=user['current_game'],
        rating_filter=None,
        position_filter=None,
        profiles=[],
        current_index=0
    )
    
    await state.set_state(SearchForm.filters)
    
    text = "üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n\n"
    text += "üèÜ –†–µ–π—Ç–∏–Ω–≥: –ª—é–±–æ–π\n"
    text += "‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: –ª—é–±–∞—è\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"
    
    await callback.message.edit_text(text, reply_markup=kb.search_filters())
    await callback.answer()

@router.callback_query(F.data == "filter_rating", SearchForm.filters)
async def set_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
    data = await state.get_data()
    game = data['game']
    
    await callback.message.edit_text("üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=kb.ratings(game))
    await callback.answer()

@router.callback_query(F.data.startswith("rating_"), SearchForm.filters)
async def save_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    rating = callback.data.split("_")[1]
    await state.update_data(rating_filter=rating)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    data = await state.get_data()
    rating_name = settings.RATINGS[data['game']].get(rating, rating)
    
    text = "üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n\n"
    text += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating_name}\n"
    text += "‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: –ª—é–±–∞—è\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"
    
    await callback.message.edit_text(text, reply_markup=kb.search_filters())
    await callback.answer()

@router.callback_query(F.data == "filter_position", SearchForm.filters)
async def set_position_filter(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    data = await state.get_data()
    game = data['game']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    buttons = []
    for key, name in settings.POSITIONS[game].items():
        buttons.append([kb.InlineKeyboardButton(text=name, callback_data=f"pos_filter_{key}")])
    
    buttons.append([kb.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_filter")])
    
    keyboard = kb.InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text("‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("pos_filter_"), SearchForm.filters)
async def save_position_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∑–∏—Ü–∏–∏"""
    position = callback.data.split("_")[2]
    await state.update_data(position_filter=position)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
    data = await state.get_data()
    rating_text = "–ª—é–±–æ–π"
    if data.get('rating_filter'):
        rating_text = settings.RATINGS[data['game']].get(data['rating_filter'], data['rating_filter'])
    
    position_text = settings.POSITIONS[data['game']].get(position, position)
    
    text = "üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n\n"
    text += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating_text}\n"
    text += f"‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: {position_text}\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"
    
    await callback.message.edit_text(text, reply_markup=kb.search_filters())
    await callback.answer()

@router.callback_query(F.data == "cancel_filter", SearchForm.filters)
async def cancel_filter(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞"""
    data = await state.get_data()
    
    rating_text = "–ª—é–±–æ–π"
    if data.get('rating_filter'):
        rating_text = settings.RATINGS[data['game']].get(data['rating_filter'], data['rating_filter'])
    
    position_text = "–ª—é–±–∞—è"
    if data.get('position_filter'):
        position_text = settings.POSITIONS[data['game']].get(data['position_filter'], data['position_filter'])
    
    text = "üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:\n\n"
    text += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating_text}\n"
    text += f"‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: {position_text}\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"
    
    await callback.message.edit_text(text, reply_markup=kb.search_filters())
    await callback.answer()

@router.callback_query(F.data == "start_search", SearchForm.filters)
async def begin_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã
    profiles = db.get_potential_matches(
        user_id=data['user_id'],
        game=data['game'],
        rating_filter=data.get('rating_filter'),
        position_filter=data.get('position_filter'),
        limit=20
    )
    
    if not profiles:
        await callback.message.edit_text(texts.NO_PROFILES, reply_markup=kb.back())
        await callback.answer()
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
    await state.set_state(SearchForm.browsing)
    await state.update_data(profiles=profiles, current_index=0)
    
    await show_current_profile(callback, state)

async def show_current_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    profiles = data['profiles']
    index = data['current_index']
    
    if index >= len(profiles):
        await callback.message.edit_text(texts.NO_PROFILES, reply_markup=kb.back())
        await callback.answer()
        return
    
    profile = profiles[index]
    profile_text = texts.format_profile(profile)
    
    try:
        if profile.get('photo_id'):
            # –° —Ñ–æ—Ç–æ
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=profile_text,
                reply_markup=kb.profile_actions(profile['telegram_id'])
            )
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ
            await callback.message.edit_text(
                profile_text,
                reply_markup=kb.profile_actions(profile['telegram_id'])
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç—ã: {e}")
        await show_next_profile(callback, state)

async def show_next_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    current_index = data['current_index']
    
    await state.update_data(current_index=current_index + 1)
    await show_current_profile(callback, state)

@router.callback_query(F.data.startswith("skip_"), SearchForm.browsing)
async def skip_profile(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É"""
    await show_next_profile(callback, state)

@router.callback_query(F.data.startswith("like_"), SearchForm.browsing)
async def like_profile(callback: CallbackQuery, state: FSMContext):
    """–õ–∞–π–∫–Ω—É—Ç—å –∞–Ω–∫–µ—Ç—É"""
    try:
        target_user_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    data = await state.get_data()
    from_user_id = data['user_id']
    game = data['game']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
    is_match = db.add_like(from_user_id, target_user_id, game)
    
    if is_match:
        # –ú–∞—Ç—á!
        target_user = db.get_user(target_user_id)
        
        if target_user and target_user.get('username'):
            contact_text = f"\n\nüí¨ @{target_user['username']}"
        else:
            contact_text = "\n\n(–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç @username)"
        
        text = texts.MATCH_CREATED + contact_text
        keyboard = kb.contact(target_user.get('username') if target_user else None)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        logger.info(f"–ú–∞—Ç—á: {from_user_id} <-> {target_user_id}")
    else:
        # –û–±—ã—á–Ω—ã–π –ª–∞–π–∫
        await callback.message.edit_text(
            texts.LIKE_SENT,
            reply_markup=kb.InlineKeyboardMarkup(inline_keyboard=[
                [kb.InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="continue_search")],
                [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        logger.info(f"–õ–∞–π–∫: {from_user_id} -> {target_user_id}")
    
    await callback.answer()

@router.callback_query(F.data == "continue_search", SearchForm.browsing)
async def continue_search(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫"""
    await show_next_profile(callback, state)