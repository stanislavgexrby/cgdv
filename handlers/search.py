import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings
from handlers.basic import check_ban_and_profile, safe_edit_message, SearchForm
from handlers.notifications import notify_about_match, notify_about_like

logger = logging.getLogger(__name__)
router = Router()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def update_filter_display(callback: CallbackQuery, state: FSMContext, message: str = None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()
    game = data.get('game', 'dota')
    game_name = settings.GAMES.get(game, game)

    filters_text = []

    rating_filter = data.get('rating_filter')
    if rating_filter:
        rating_name = settings.RATINGS[game].get(rating_filter, rating_filter)
        filters_text.append(f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating_name}")
    else:
        filters_text.append("üèÜ –†–µ–π—Ç–∏–Ω–≥: –ª—é–±–æ–π")

    position_filter = data.get('position_filter')
    if position_filter:
        position_name = settings.POSITIONS[game].get(position_filter, position_filter)
        filters_text.append(f"‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: {position_name}")
    else:
        filters_text.append("‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: –ª—é–±–∞—è")

    region_filter = data.get('region_filter')
    if region_filter:
        region_name = settings.REGIONS.get(region_filter, region_filter)
        filters_text.append(f"üåç –†–µ–≥–∏–æ–Ω: {region_name}")
    else:
        filters_text.append("üåç –†–µ–≥–∏–æ–Ω: –ª—é–±–æ–π")

    text = f"üîç –ü–æ–∏—Å–∫ –≤ {game_name}\n\n–§–∏–ª—å—Ç—Ä—ã:\n\n"
    text += "\n".join(filters_text)
    text += "\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"

    await safe_edit_message(callback, text, kb.search_filters())

    if message:
        await callback.answer(message)

async def show_profile_in_search(callback: CallbackQuery, profile: dict, text: str, keyboard):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–∏—Å–∫–µ"""
    try:
        if profile.get('photo_id'):
            try:
                await callback.message.delete()
            except:
                pass
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=keyboard
            )
        else:
            await safe_edit_message(callback, text, keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–∏—Å–∫–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

async def handle_search_action(callback: CallbackQuery, action: str, target_user_id: int, state: FSMContext, db):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø–æ–∏—Å–∫–µ"""
    user_id = callback.from_user.id
    data = await state.get_data()
    game = data['game']

    if action == "like":
        is_match = await db.add_like(user_id, target_user_id, game)

        if is_match:
            target_profile = await db.get_user_profile(target_user_id, game)
            await notify_about_match(callback.bot, target_user_id, user_id, game, db)

            if target_profile:
                match_text = texts.format_profile(target_profile, show_contact=True)
                text = f"{texts.MATCH_CREATED}\n\n{match_text}"
            else:
                text = texts.MATCH_CREATED
                if target_profile and target_profile.get('username'):
                    text += f"\n\nüí¨ @{target_profile['username']}"
                else:
                    text += "\n\n(–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç @username)"

            keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
                [kb.InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="continue_search")],
                [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            await safe_edit_message(callback, text, keyboard)
            logger.info(f"–ú–∞—Ç—á: {user_id} <-> {target_user_id}")
        else:
            await safe_edit_message(
                callback, 
                texts.LIKE_SENT,
                kb.InlineKeyboardMarkup(inline_keyboard=[
                    [kb.InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="continue_search")],
                    [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            await notify_about_like(callback.bot, target_user_id, game, db)
            logger.info(f"–õ–∞–π–∫: {user_id} -> {target_user_id}")

    elif action == "skip":
        await db.add_search_skip(user_id, target_user_id, game)
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫ –≤ –ø–æ–∏—Å–∫–µ: {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª {target_user_id}")
        await show_next_profile(callback, state)

    elif action == "report":
        success = await db.add_report(user_id, target_user_id, game)

        if success:
            text = "üö© –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É!\n\n–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
                [kb.InlineKeyboardButton(text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="continue_search")],
                [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await safe_edit_message(callback, text, keyboard)
            logger.info(f"–ñ–∞–ª–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user_id} –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ {target_user_id}")
            await callback.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

            if settings.ADMIN_ID and settings.ADMIN_ID != 0:
                try:
                    await callback.bot.send_message(
                        settings.ADMIN_ID,
                        f"üö© –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É {target_user_id} –≤ –∏–≥—Ä–µ {settings.GAMES.get(game, game)}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        else:
            await callback.answer("‚ùå –í—ã —É–∂–µ –∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É –∞–Ω–∫–µ—Ç—É", show_alert=True)

async def show_current_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–∏—Å–∫–µ"""
    data = await state.get_data()
    profiles = data.get('profiles', [])
    index = data.get('current_index', 0)

    if index >= len(profiles):
        await state.clear()
        game_name = settings.GAMES.get(data.get('game', 'dota'), data.get('game', 'dota'))
        text = f"üòî –ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –≤ {game_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."

        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await safe_edit_message(callback, text, keyboard)
        await callback.answer()
        return

    profile = profiles[index]
    profile_text = texts.format_profile(profile)

    await show_profile_in_search(
        callback,
        profile,
        profile_text,
        kb.profile_actions(profile['telegram_id'])
    )

async def show_next_profile(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    await state.update_data(current_index=current_index + 1)
    await show_current_profile(callback, state)

# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@router.callback_query(F.data == "search")
@check_ban_and_profile()
async def start_search(callback: CallbackQuery, state: FSMContext, db):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    game = user['current_game']

    await state.clear()
    await state.update_data(
        user_id=user_id,
        game=game,
        rating_filter=None,
        position_filter=None,
        region_filter=None,
        profiles=[],
        current_index=0
    )
    await state.set_state(SearchForm.filters)

    await update_filter_display(callback, state)
    await callback.answer()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–ò–õ–¨–¢–†–û–í ====================

@router.callback_query(F.data == "filter_rating", SearchForm.filters)
async def set_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    data = await state.get_data()
    game = data.get('game')
    await safe_edit_message(callback, "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", kb.ratings_filter(game))
    await callback.answer()

@router.callback_query(F.data == "filter_position", SearchForm.filters)
async def set_position_filter(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    data = await state.get_data()
    game = data.get('game')
    await safe_edit_message(callback, "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:", kb.position_filter_menu(game))
    await callback.answer()

@router.callback_query(F.data == "filter_region", SearchForm.filters)
async def set_region_filter(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    await safe_edit_message(callback, "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", kb.regions_filter())
    await callback.answer()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–°–¢–ê–ù–û–í–ö–ò –§–ò–õ–¨–¢–†–û–í ====================

@router.callback_query(F.data.startswith("rating_"), SearchForm.filters)
async def save_rating_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    if callback.data.endswith("_reset"):
        await state.update_data(rating_filter=None)
        await update_filter_display(callback, state, "üîÑ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —Å–±—Ä–æ—à–µ–Ω")
        return

    rating = callback.data.split("_")[1]
    data = await state.get_data()
    game = data['game']

    if rating not in settings.RATINGS.get(game, {}):
        return

    current_rating = data.get('rating_filter')
    if current_rating == rating:
        await callback.answer("–≠—Ç–æ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —É–∂–µ –≤—ã–±—Ä–∞–Ω")
        return

    await state.update_data(rating_filter=rating)
    rating_name = settings.RATINGS[game].get(rating, rating)
    await update_filter_display(callback, state, f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: {rating_name}")

@router.callback_query(F.data.startswith("pos_filter_"), SearchForm.filters)
async def save_position_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    parts = callback.data.split("_")
    if len(parts) < 3:
        return

    position = parts[2]
    data = await state.get_data()
    game = data['game']

    if position not in settings.POSITIONS.get(game, {}):
        return

    current_position = data.get('position_filter')
    if current_position == position:
        await callback.answer("–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
        return

    await state.update_data(position_filter=position)
    position_name = settings.POSITIONS[game].get(position, position)
    await update_filter_display(callback, state, f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏: {position_name}")

@router.callback_query(F.data.startswith("region_filter_"), SearchForm.filters)
async def save_region_filter(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
    parts = callback.data.split("_")
    if len(parts) < 3:
        return

    region = parts[2]

    if region not in settings.REGIONS:
        return

    data = await state.get_data()
    current_region = data.get('region_filter')
    if current_region == region:
        await callback.answer("–≠—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω")
        return

    await state.update_data(region_filter=region)
    region_name = settings.REGIONS.get(region, region)
    await update_filter_display(callback, state, f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É: {region_name}")

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ë–†–û–°–ê –§–ò–õ–¨–¢–†–û–í ====================

@router.callback_query(F.data == "rating_reset", SearchForm.filters)
async def reset_rating_filter(callback: CallbackQuery, state: FSMContext):
    await state.update_data(rating_filter=None)
    await update_filter_display(callback, state, "üîÑ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —Å–±—Ä–æ—à–µ–Ω")

@router.callback_query(F.data == "position_reset", SearchForm.filters)
async def reset_position_filter(callback: CallbackQuery, state: FSMContext):
    await state.update_data(position_filter=None)
    await update_filter_display(callback, state, "üîÑ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω")

@router.callback_query(F.data == "region_reset", SearchForm.filters)
async def reset_region_filter(callback: CallbackQuery, state: FSMContext):
    await state.update_data(region_filter=None)
    await update_filter_display(callback, state, "üîÑ –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É —Å–±—Ä–æ—à–µ–Ω")

@router.callback_query(F.data == "cancel_filter", SearchForm.filters)
async def cancel_filter(callback: CallbackQuery, state: FSMContext):
    await update_filter_display(callback, state, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

# ==================== –ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê ====================

@router.callback_query(F.data == "start_search", SearchForm.filters)
async def begin_search(callback: CallbackQuery, state: FSMContext, db):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    data = await state.get_data()

    profiles = await db.get_potential_matches(
        user_id=data['user_id'],
        game=data['game'],
        rating_filter=data.get('rating_filter'),
        position_filter=data.get('position_filter'),
        region_filter=data.get('region_filter'),
        limit=20
    )

    if not profiles:
        await state.clear()
        game_name = settings.GAMES.get(data['game'], data['game'])
        text = f"üòî –ê–Ω–∫–µ—Ç—ã –≤ {game_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ."

        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await safe_edit_message(callback, text, keyboard)
        await callback.answer()
        return

    await state.set_state(SearchForm.browsing)
    await state.update_data(profiles=profiles, current_index=0)
    await show_current_profile(callback, state)

# ==================== –î–ï–ô–°–¢–í–ò–Ø –í –ü–û–ò–°–ö–ï ====================

@router.callback_query(F.data.startswith("skip_"))
async def skip_profile(callback: CallbackQuery, state: FSMContext, db):
    try:
        target_user_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    await handle_search_action(callback, "skip", target_user_id, state, db)

@router.callback_query(F.data.startswith("like_"))
async def like_profile(callback: CallbackQuery, state: FSMContext, db):
    try:
        target_user_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    await handle_search_action(callback, "like", target_user_id, state, db)

@router.callback_query(F.data.startswith("report_"))
async def report_profile(callback: CallbackQuery, state: FSMContext, db):
    try:
        target_user_id = int(callback.data.split("_")[1])
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    await handle_search_action(callback, "report", target_user_id, state, db)

@router.callback_query(F.data == "continue_search", SearchForm.browsing)
async def continue_search(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –ª–∞–π–∫–∞"""
    await show_next_profile(callback, state)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–ô –í–ù–ï FSM ====================

@router.callback_query(F.data.in_(["filter_rating", "filter_position", "filter_region", "start_search"]))
async def handle_search_outside_state(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–∏—Å–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM"""
    current_state = await state.get_state()

    if current_state is None or current_state != SearchForm.filters:
        logger.warning(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤—ã–∑–≤–∞–Ω –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM: {callback.data}")
        await state.clear()
        await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞...")
        await start_search(callback, state)