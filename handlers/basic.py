import logging
from typing import Optional
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)

__all__ = ['safe_edit_message', 'router']

@router.callback_query(F.data == "admin_bans")
async def show_admin_bans(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤"""
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    bans = db.get_all_bans()
    
    if not bans:
        text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–Ω
    await show_admin_ban(callback, bans, 0)

async def show_admin_ban(callback: CallbackQuery, bans: list, index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if index >= len(bans):
        text = "‚úÖ –í—Å–µ –±–∞–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    ban = bans[index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ
    ban_text = f"""üö´ –ë–∞–Ω #{ban['id']}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ban.get('name', 'N/A')} (@{ban.get('username', '–Ω–µ—Ç username')})
üéØ –ù–∏–∫–Ω–µ–π–º: {ban.get('nickname', 'N/A')}
üìÖ –î–∞—Ç–∞ –±–∞–Ω–∞: {ban['created_at'][:16]}
‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {ban['expires_at'][:16]}
üìù –ü—Ä–∏—á–∏–Ω–∞: {ban['reason']}

–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–∞–Ω–æ–º?"""

    await safe_edit_message(callback, ban_text, kb.admin_ban_actions(ban['user_id']))
    await callback.answer()

@router.callback_query(F.data.startswith("admin_unban_"))
async def admin_unban_user(callback: CallbackQuery):
    """–°–Ω—è—Ç—å –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        user_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    success = db.unban_user(user_id)
    
    if success:
        text = "‚úÖ –ë–∞–Ω —Å–Ω—è—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        await safe_edit_message(callback, text, kb.admin_back_to_bans())
        await callback.answer("‚úÖ –ë–∞–Ω —Å–Ω—è—Ç")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} —Å–Ω—è–ª –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from .notifications import notify_user_unbanned
        await notify_user_unbanned(callback.bot, user_id)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞", show_alert=True)

@router.callback_query(F.data.startswith("admin_ban_"))
async def admin_ban_user(callback: CallbackQuery):
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–µ–¥–µ–ª—é (–∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∂–∞–ª–æ–±)"""
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        report_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    success = db.process_report(report_id, 'ban', settings.ADMIN_ID)
    
    if success:
        text = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é!"
        await safe_edit_message(callback, text, kb.admin_back_to_reports())
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∂–∞–ª–æ–±–µ {report_id}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä—ã"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await safe_edit_message(callback, texts.WELCOME, kb.game_selection())
        await callback.answer()
        return

    game = user['current_game']
    has_profile = db.has_profile(user_id, game)
    game_name = settings.GAMES.get(game, game)

    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"

    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()

async def check_subscription(user_id: int, game: str, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã"""
    channel = None
    if game == "dota":
        channel = settings.DOTA_CHANNEL
    elif game == "cs":
        channel = settings.CS_CHANNEL
    
    if not channel or not settings.CHECK_SUBSCRIPTION:
        return True  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        
    try:
        member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@router.callback_query(F.data == "back_to_games")
async def back_to_games(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    await safe_edit_message(callback,
        texts.WELCOME,
        reply_markup=kb.game_selection()
    )
    await callback.answer()

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        current_text = callback.message.text or callback.message.caption or ""
        current_markup = callback.message.reply_markup
        
        text_changed = current_text != text
        markup_changed = str(current_markup) != str(reply_markup)
        
        if callback.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –≤—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=reply_markup)
        else:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if text_changed or markup_changed:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=reply_markup
                )
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=reply_markup)
        except:
            pass

@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    user = db.get_user(user_id)

    if user and user.get('current_game'):
        game = user['current_game']
        game_name = settings.GAMES.get(game, game)
        has_profile = db.has_profile(user_id, game)

        text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: {game_name}"
        if has_profile:
            text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

        await message.answer(text, reply_markup=kb.main_menu(has_profile, game))
    else:
        await message.answer(texts.WELCOME, reply_markup=kb.game_selection())

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """üéÆ TeammateBot - –ü–æ–º–æ—â—å

üîç –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
‚Ä¢ –ü–æ–∏—Å–∫ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π

üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É (Dota 2 –∏–ª–∏ CS2)
2. –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
3. –ò—â–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
4. –õ–∞–π–∫–∞–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è
5. –ü—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã

‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"""

    await message.answer(help_text)

@router.callback_query(F.data.startswith("game_"))
async def select_game(callback: CallbackQuery):
    game = callback.data.split("_")[1]
    user_id = callback.from_user.id
    username = callback.from_user.username

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if settings.CHECK_SUBSCRIPTION and not await check_subscription(user_id, game, callback.bot):
        game_name = settings.GAMES.get(game, game)
        channel = settings.DOTA_CHANNEL if game == "dota" else settings.CS_CHANNEL
        
        await safe_edit_message(callback, 
            f"‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {game_name}, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª\n"
            "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã:",
            kb.subscribe_channel_keyboard(game)
        )
        await callback.answer()
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É: {game}")

    db.create_user(user_id, username, game)

    has_profile = db.has_profile(user_id, game)
    game_name = settings.GAMES.get(game, game)
    
    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"

    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()

@router.callback_query(F.data.startswith("switch_"))
async def switch_game(callback: CallbackQuery):
    game = callback.data.split("_")[1]
    user_id = callback.from_user.id

    if settings.CHECK_SUBSCRIPTION and not await check_subscription(user_id, game, callback.bot):
        game_name = settings.GAMES.get(game, game)
        channel = settings.DOTA_CHANNEL if game == "dota" else settings.CS_CHANNEL
        
        await callback.message.edit_text(
            f"‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {game_name}, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª\n"
            "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã:",
            reply_markup=kb.subscribe_channel_keyboard(game)
        )
        await callback.answer()
        return

    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É: {game}")

    db.switch_game(user_id, game)

    has_profile = db.has_profile(user_id, game)
    game_name = settings.GAMES.get(game, game)
    
    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"

    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += f"\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è {game_name}.\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await safe_edit_message(callback, texts.WELCOME, kb.game_selection())
        await callback.answer()
        return

    game = user['current_game']
    has_profile = db.has_profile(user_id, game)
    game_name = settings.GAMES.get(game, game)

    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"

    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()

@router.callback_query(F.data == "view_profile")
async def view_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    profile = db.get_user_profile(user_id, game)

    if not profile:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã
    profile_text = texts.format_profile(profile, show_contact=True)
    game_name = settings.GAMES.get(game, game)
    text = f"üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n{profile_text}"

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ñ–æ—Ç–æ
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=kb.back()
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await safe_edit_message(callback, text, kb.back())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_edit_message(callback, text, kb.back())

    await callback.answer()

# –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –∫–æ–Ω–µ—Ü handlers/basic.py, –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π

@router.callback_query(F.data == "back_to_editing")
async def back_to_editing_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    profile = db.get_user_profile(user_id, game)

    if not profile:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    game_name = settings.GAMES.get(game, game)
    current_info = f"üìù –¢–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n"
    current_info += texts.format_profile(profile, show_contact=True)
    current_info += "\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

    keyboard = kb.edit_profile_menu()

    try:
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=current_info,
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        try:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
        except:
            await callback.message.delete()
            await callback.message.answer(current_info, reply_markup=keyboard)

    await callback.answer()

@router.callback_query(F.data == "back_to_search")  
async def back_to_search_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É"""  
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    
    if not db.has_profile(user_id, game):
        game_name = settings.GAMES.get(game, game)
        await callback.answer(f"‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è {game_name}", show_alert=True)
        return

    game_name = settings.GAMES.get(game, game)
    text = f"üîç –ü–æ–∏—Å–∫ –≤ {game_name}\n\n–§–∏–ª—å—Ç—Ä—ã:\n\n"
    text += "üèÜ –†–µ–π—Ç–∏–Ω–≥: –ª—é–±–æ–π\n"
    text += "‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: –ª—é–±–∞—è\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"

    await safe_edit_message(callback, text, kb.search_filters())
    await callback.answer()

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != settings.ADMIN_ID:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return

    await message.answer("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_main_menu())

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        import sqlite3
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]

            cursor = conn.execute("SELECT COUNT(*) FROM profiles")
            total_profiles = cursor.fetchone()[0]

            cursor = conn.execute("SELECT game, COUNT(*) FROM profiles GROUP BY game")
            profiles_by_game = cursor.fetchall()

            cursor = conn.execute("SELECT COUNT(*) FROM matches")
            total_matches = cursor.fetchone()[0]

            cursor = conn.execute("SELECT COUNT(*) FROM reports WHERE status = 'pending'")
            pending_reports = cursor.fetchone()[0]

        text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üìÑ –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {total_profiles}"""

        for game, count in profiles_by_game:
            game_name = settings.GAMES.get(game, game)
            text += f"\n  - {game_name}: {count}"

        text += f"\nüíñ –ú–∞—Ç—á–µ–π: {total_matches}"
        text += f"\nüö© –û–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±: {pending_reports}"

        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer()

@router.callback_query(F.data == "admin_reports")
async def show_admin_reports(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±"""
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    reports = db.get_pending_reports()
    
    if not reports:
        text = "üö© –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∂–∞–ª–æ–±—É
    await show_admin_report(callback, reports, 0)

async def show_admin_report(callback: CallbackQuery, reports: list, index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∂–∞–ª–æ–±—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if index >= len(reports):
        text = "‚úÖ –í—Å–µ –∂–∞–ª–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    report = reports[index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∞–ª–æ–±–µ
    game_name = settings.GAMES.get(report['game'], report['game'])
    report_text = f"""üö© –ñ–∞–ª–æ–±–∞ #{report['id']}

üéÆ –ò–≥—Ä–∞: {game_name}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {report['name']} (@{report['username'] or '–Ω–µ—Ç username'})
üéØ –ù–∏–∫–Ω–µ–π–º: {report['nickname']}
üìÖ –î–∞—Ç–∞ –∂–∞–ª–æ–±—ã: {report['created_at'][:16]}

–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∞–Ω–∫–µ—Ç–æ–π?"""

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if report.get('photo_id'):
            try:
                await callback.message.delete()
            except:
                pass

            await callback.message.answer_photo(
                photo=report['photo_id'],
                caption=report_text,
                reply_markup=kb.admin_report_actions(report['id'])
            )
        else:
            await safe_edit_message(callback, report_text, kb.admin_report_actions(report['id']))

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∂–∞–ª–æ–±—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data.startswith("admin_approve_"))
async def admin_approve_report(callback: CallbackQuery):
    """–û–¥–æ–±—Ä–∏—Ç—å –∂–∞–ª–æ–±—É –∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        report_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    success = db.process_report(report_id, 'approve', settings.ADMIN_ID)
    
    if success:
        text = "‚úÖ –ñ–∞–ª–æ–±–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω!"
        await safe_edit_message(callback, text, kb.admin_back_to_reports())
        await callback.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} —É–¥–∞–ª–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∂–∞–ª–æ–±–µ {report_id}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã", show_alert=True)

@router.callback_query(F.data.startswith("admin_dismiss_"))
async def admin_dismiss_report(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∂–∞–ª–æ–±—É"""
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        report_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    success = db.process_report(report_id, 'dismiss', settings.ADMIN_ID)
    
    if success:
        text = "‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        await safe_edit_message(callback, text, kb.admin_back_to_reports())
        await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} –æ—Ç–∫–ª–æ–Ω–∏–ª –∂–∞–ª–æ–±—É {report_id}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã", show_alert=True)