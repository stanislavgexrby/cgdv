import logging
import keyboards.keyboards as kb
import config.settings as settings
from functools import wraps
from typing import Optional
from functools import wraps
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

logger = logging.getLogger(__name__)
router = Router()

class SearchForm(StatesGroup):
    filters = State()
    browsing = State()

__all__ = ['safe_edit_message', 'router', 'SearchForm']

# ==================== –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –ü–†–û–í–ï–†–û–ö ====================

def _detect_db_backend(db):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (backend_name, db_path_or_None).
    –î–ª—è PostgreSQL –ø—É—Ç–∏ –Ω–µ—Ç, –¥–ª—è SQLite –º–æ–∂–µ—Ç –±—ã—Ç—å db.db_path.
    """
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ ‚Äî —É Postgres-–ø—É–ª–∞ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç pool/execute/fetch
    if hasattr(db, "pool"):
        return "PostgreSQL", None
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—Ç–∞—Ä—ã–º SQLite-–∫–ª–∞—Å—Å–æ–º
    if hasattr(db, "db_path"):
        return "SQLite", getattr(db, "db_path", None)
    return "Unknown", None

async def _fetch_reports_for_admin(db, limit: int = 100):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∂–∞–ª–æ–± –∏–∑ –ë–î –±–µ–∑ –∑–Ω–∞–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –º–µ—Ç–æ–¥–∞.
    –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å –ª—é–±–æ–π –∏–∑ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º).
    """
    # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: –¥–æ–±–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    candidate_methods = [
        ("get_reports", {"limit": limit}),
        ("get_all_reports", {"limit": limit}),
        ("list_reports", {"limit": limit}),
        ("fetch_reports", {"limit": limit}),
        ("admin_get_reports", {"limit": limit}),
        ("get_reports", {}),            # –±–µ–∑ limit
        ("get_all_reports", {}),
        ("list_reports", {}),
        ("fetch_reports", {}),
        ("admin_get_reports", {}),
    ]

    for name, kwargs in candidate_methods:
        if hasattr(db, name):
            meth = getattr(db, name)
            try:
                res = await meth(**kwargs) if kwargs else await meth()
                if res is None:
                    res = []
                return res
            except TypeError:
                # —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –¥—Ä—É–≥–∞—è ‚Äî –ø—Ä–æ–±—É–µ–º –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                try:
                    res = await meth()
                    if res is None:
                        res = []
                    return res
                except Exception as e:
                    logger.warning(f"–ú–µ—Ç–æ–¥ {name} –µ—Å—Ç—å, –Ω–æ –Ω–µ –≤—ã–∑–≤–∞–ª—Å—è: {e}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∂–∞–ª–æ–±—ã —á–µ—Ä–µ–∑ {name}: {e}")

    logger.warning("–í Database –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–± "
                   "(–Ω–∞–ø—Ä–∏–º–µ—Ä, get_reports/list_reports/get_all_reports). "
                   "–ü–æ–∫–∞–∂–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
    return []

def check_ban_and_profile(require_profile=True):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    def decorator(func):
        @wraps(func)
        async def wrapper(callback: CallbackQuery, *args, db=None, **kwargs):
            if db is None:
                raise RuntimeError("Database instance not provided. Ensure DatabaseMiddleware injects 'db'.")

            user_id = callback.from_user.id
            user = await db.get_user(user_id)
            if not user or not user.get('current_game'):
                await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
                return

            game = user['current_game']

            # –ë–∞–Ω
            if await db.is_user_banned(user_id):
                ban_info = await db.get_user_ban(user_id)
                game_name = settings.GAMES.get(game, game)
                if ban_info:
                    ban_end = ban_info['expires_at'][:16]
                    text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end}"
                else:
                    text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}"
                await safe_edit_message(callback, text, kb.back())
                await callback.answer()
                return

            # –ü—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            if require_profile and not await db.has_profile(user_id, game):
                game_name = settings.GAMES.get(game, game)
                await callback.answer(f"‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è {game_name}", show_alert=True)
                return

            # –í–ê–ñ–ù–û: db –ø–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            return await func(callback, *args, db=db, **kwargs)
        return wrapper
    return decorator

def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    @wraps(func)
    async def wrapper(callback: CallbackQuery, *args, **kwargs):
        if callback.from_user.id != settings.ADMIN_ID:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
            return
        return await func(callback, *args, **kwargs)
    return wrapper

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        message = callback.message
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        has_photo = bool(message.photo)
        current_text = message.caption if has_photo else (message.text or "")
        current_markup = message.reply_markup
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        text_changed = current_text != text
        markup_changed = str(current_markup) != str(reply_markup)
        
        if not text_changed and not markup_changed:
            return  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ, –≤—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ñ–æ—Ç–æ –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if has_photo:
            await message.delete()
            await callback.bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=reply_markup
            )
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await message.edit_text(text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # Fallback - —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass
        try:
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=reply_markup
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

async def check_subscription(user_id: int, game: str, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    if not settings.CHECK_SUBSCRIPTION:
        return True
        
    channel = settings.DOTA_CHANNEL if game == "dota" else settings.CS_CHANNEL
    if not channel:
        return True

    try:
        member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def get_main_menu_text(game: str, has_profile: bool) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    game_name = settings.GAMES.get(game, game)
    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"
    
    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"
    
    return text

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================

@router.message(Command("start"))
async def cmd_start(message: Message, db):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    user = await db.get_user(user_id)

    if user and user.get('current_game'):
        game = user['current_game']
        has_profile = await db.has_profile(user_id, game)
        text = get_main_menu_text(game, has_profile)
        await message.answer(text, reply_markup=kb.main_menu(has_profile, game))
    else:
        await message.answer(texts.WELCOME, reply_markup=kb.game_selection())

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """üéÆ TeammateBot - –ü–æ–º–æ—â—å

üîç –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
‚Ä¢ –ü–æ–∏—Å–∫ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π

üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É (Dota 2 –∏–ª–∏ CS2)
2. –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
3. –ò—â–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
4. –õ–∞–π–∫–∞–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è
5. –ü—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã

‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"""

    await message.answer(help_text)

@router.message(Command("admin"))
@admin_only
async def cmd_admin(message: Message):
    await message.answer("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_main_menu())

# ==================== –í–´–ë–û–† –ò –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ò–ì–† ====================

@router.callback_query(F.data.startswith("game_"))
async def select_game(callback: CallbackQuery, db):
    game = callback.data.split("_")[1]
    user_id = callback.from_user.id
    username = callback.from_user.username

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user_id, game, callback.bot):
        game_name = settings.GAMES.get(game, game)
        channel = settings.DOTA_CHANNEL if game == "dota" else settings.CS_CHANNEL

        text = (f"‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {game_name}, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}\n\n"
               "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª\n"
               "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
               "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'\n\n"
               "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã:")

        await safe_edit_message(callback, text, kb.subscribe_channel_keyboard(game))
        await callback.answer()
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É: {game}")

    await db.create_user(user_id, username, game)
    has_profile = await db.has_profile(user_id, game)
    text = get_main_menu_text(game, has_profile)

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()

@router.callback_query(F.data.startswith("switch_and_matches_"))
async def switch_and_show_matches(callback: CallbackQuery, state: FSMContext, db):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–∫–∞–∑ –º–∞—Ç—á–µ–π –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    game = parts[3]
    user_id = callback.from_user.id
    
    if game not in settings.GAMES:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∏–≥—Ä–∞ –≤ callback: {game}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–≥—Ä–∞", show_alert=True)
        return
    
    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É {game} –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä—É –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if not await db.switch_game(user_id, game):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä—ã", show_alert=True)
        return
    
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏
    if await db.is_user_banned(user_id):
        ban_info = await db.get_user_ban(user_id)
        game_name = settings.GAMES.get(game, game)
        text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}"
        if ban_info:
            text += f" –¥–æ {ban_info['expires_at'][:16]}"
        text += "\n\n–†–∞–∑–¥–µ–ª '–ú–∞—Ç—á–∏' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    if not await db.has_profile(user_id, game):
        game_name = settings.GAMES.get(game, game)
        await callback.answer(f"‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è {game_name}", show_alert=True)
        return

    await show_matches(callback, user_id, game)

@router.callback_query(F.data.startswith("switch_"))
async def switch_game(callback: CallbackQuery, db):
    parts = callback.data.split("_")
    if len(parts) < 2:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
        
    game = parts[1]
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user_id, game, callback.bot):
        game_name = settings.GAMES.get(game, game)
        channel = settings.DOTA_CHANNEL if game == "dota" else settings.CS_CHANNEL

        text = (f"‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {game_name}, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}\n\n"
               "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª\n"
               "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
               "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'\n\n"
               "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã:")

        await callback.message.edit_text(text, reply_markup=kb.subscribe_channel_keyboard(game))
        await callback.answer()
        return

    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É: {game}")

    await db.switch_game(user_id, game)
    has_profile = await db.has_profile(user_id, game)
    text = get_main_menu_text(game, has_profile)

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()

# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ú–ï–ù–Æ ====================

@router.callback_query(F.data.in_(["main_menu", "back_to_main"]))
async def show_main_menu(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if not user or not user.get('current_game'):
        await safe_edit_message(callback, texts.WELCOME, kb.game_selection())
        await callback.answer()
        return

    game = user['current_game']
    has_profile = await db.has_profile(user_id, game)
    text = get_main_menu_text(game, has_profile)

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()

@router.callback_query(F.data == "back_to_games")
async def back_to_games(callback: CallbackQuery):
    await safe_edit_message(callback, texts.WELCOME, kb.game_selection())
    await callback.answer()

@router.callback_query(F.data == "view_profile")
@check_ban_and_profile()
async def view_profile(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    game = user['current_game']
    profile = await db.get_user_profile(user_id, game)

    profile_text = texts.format_profile(profile, show_contact=True)
    game_name = settings.GAMES.get(game, game)
    text = f"üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n{profile_text}"

    try:
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=kb.back()
            )
        else:
            await safe_edit_message(callback, text, kb.back())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await safe_edit_message(callback, text, kb.back())

    await callback.answer()

# ==================== –í–û–ó–í–†–ê–¢ –ö –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Æ –ò –ü–û–ò–°–ö–£ ====================

@router.callback_query(F.data == "back_to_editing")
@check_ban_and_profile()
async def back_to_editing_handler(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    game = user['current_game']
    profile = await db.get_user_profile(user_id, game)

    game_name = settings.GAMES.get(game, game)
    current_info = f"üìù –¢–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n"
    current_info += texts.format_profile(profile, show_contact=True)
    current_info += "\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

    keyboard = kb.edit_profile_menu()

    try:
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=current_info,
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        try:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
        except:
            await callback.message.delete()
            await callback.message.answer(current_info, reply_markup=keyboard)

    await callback.answer()

@router.callback_query(F.data == "back_to_search")  
@check_ban_and_profile()
async def back_to_search_handler(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    game = user['current_game']

    await state.clear()
    await state.update_data(
        user_id=user_id,
        game=game,
        rating_filter=None,
        position_filter=None,
        profiles=[],
        current_index=0,
        message_with_photo=False
    )
    await state.set_state(SearchForm.filters)

    game_name = settings.GAMES.get(game, game)
    text = f"üîç –ü–æ–∏—Å–∫ –≤ {game_name}\n\n–§–∏–ª—å—Ç—Ä—ã:\n\n"
    text += "üèÜ –†–µ–π—Ç–∏–Ω–≥: –ª—é–±–æ–π\n"
    text += "‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: –ª—é–±–∞—è\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"

    await safe_edit_message(callback, text, kb.search_filters())
    await callback.answer()

# ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================

@router.callback_query(F.data == "admin_stats")
@admin_only
async def show_admin_stats(callback: CallbackQuery, db):
    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", "", "üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL"]

    # Redis (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ db)
    if hasattr(db, "redis"):
        try:
            pong = await db.redis.ping()
            lines.append(f"‚ö° Redis: {'OK' if pong else '‚Äî'}")
        except Exception:
            lines.append("‚ö° Redis: ‚Äî")

    # 1) –ï—Å–ª–∏ —É —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ get_stats() ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    stats_dict = None
    if hasattr(db, "get_stats"):
        try:
            value = await db.get_stats()
            if isinstance(value, dict):
                stats_dict = value
        except Exception as e:
            lines.append(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    profiles_by_game = []

    # 2) –§–æ–ª–±—ç–∫: —Å–æ–±–∏—Ä–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ asyncpg pool
    if stats_dict is None:
        stats_dict = {}
        if not hasattr(db, "pool") or db.pool is None:
            lines.append("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (db.pool –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")
            await safe_edit_message(callback, "\n".join(lines), kb.admin_main_menu())
            await callback.answer()
            return

        try:
            async with db.pool.acquire() as conn:
                async def fetchval(sql: str):
                    try:
                        return await conn.fetchval(sql)
                    except Exception:
                        return None

                # –ü–µ—Ä–µ–∏–º–µ–Ω—É–π —Ç–∞–±–ª–∏—Ü—ã/–ø–æ–ª—è –ø–æ–¥ —Å–≤–æ—é —Å—Ö–µ–º—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî
                # –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –º–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.
                totals = [
                    ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",      "SELECT COUNT(*) FROM users"),
                    ("–ê–Ω–∫–µ—Ç—ã",            "SELECT COUNT(*) FROM profiles"),
                    ("–ú–∞—Ç—á–∏",             "SELECT COUNT(*) FROM matches"),
                    ("–õ–∞–π–∫–∏",             "SELECT COUNT(*) FROM likes"),
                    ("–ñ–∞–ª–æ–±—ã (–≤—Å–µ–≥–æ)",    "SELECT COUNT(*) FROM reports"),
                    ("–û–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±",   "SELECT COUNT(*) FROM reports WHERE status = 'pending'"),
                    ("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",     "SELECT COUNT(*) FROM bans WHERE expires_at > NOW()"),
                ]
                for key, sql in totals:
                    v = await fetchval(sql)
                    if v is not None:
                        stats_dict[key] = v

                # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ –∏–≥—Ä–∞–º
                try:
                    rows = await conn.fetch("SELECT game, COUNT(*) AS cnt FROM profiles GROUP BY game")
                    profiles_by_game = [(r["game"], r["cnt"]) for r in rows]
                except Exception:
                    profiles_by_game = []

        except Exception as e:
            lines.append(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PostgreSQL: {e}")

    # 3) –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    order = [
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "–ê–Ω–∫–µ—Ç—ã",
        "–ú–∞—Ç—á–∏",
        "–õ–∞–π–∫–∏",
        "–ñ–∞–ª–æ–±—ã (–≤—Å–µ–≥–æ)",
        "–û–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±",
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",
    ]
    any_printed = False
    for key in order:
        if key in stats_dict and stats_dict[key] is not None:
            lines.append(f"‚Ä¢ {key}: {stats_dict[key]}")
            any_printed = True

    if profiles_by_game:
        lines.append("‚Ä¢ –ê–Ω–∫–µ—Ç—ã –ø–æ –∏–≥—Ä–∞–º:")
        for game, cnt in profiles_by_game:
            game_name = settings.GAMES.get(game, game)
            lines.append(f"    - {game_name}: {cnt}")

    if not any_printed and not profiles_by_game:
        lines.append("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
                     "–î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ Database.get_stats() –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü.")

    text = "\n".join(lines)
    await safe_edit_message(callback, text, kb.admin_main_menu())
    await callback.answer()

@router.callback_query(F.data == "admin_reports")
@admin_only
async def show_admin_reports(callback: CallbackQuery, db):
    reports = await _fetch_reports_for_admin(db, limit=100)
    # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî –ø–æ–∫–∞–∂–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –º–æ–ª—á–∏–º
    if not reports:
        await callback.message.edit_text("üö© –ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç –∏–ª–∏ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–± –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
        await callback.answer()
        return
    await show_admin_report(callback, reports, 0, db=db)  # –í–ê–ñ–ù–û: db=db

@router.callback_query(F.data == "admin_bans")
@admin_only
async def show_admin_bans(callback: CallbackQuery, db):
    bans = await db.get_all_bans()

    if not bans:
        text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    await show_admin_ban(callback, bans, 0)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ñ–ê–õ–û–ë –ò –ë–ê–ù–û–í ====================

@router.callback_query(F.data.startswith("admin_approve_"))
@admin_only
async def admin_approve_report(callback: CallbackQuery):
    await process_report_action(callback, "approve")

@router.callback_query(F.data.startswith("admin_ban_"))
@admin_only  
async def admin_ban_user(callback: CallbackQuery):
    await process_report_action(callback, "ban")

@router.callback_query(F.data.startswith("admin_dismiss_"))
@admin_only
async def admin_dismiss_report(callback: CallbackQuery):
    await process_report_action(callback, "dismiss")

@router.callback_query(F.data.startswith("admin_unban_"))
@admin_only
async def admin_unban_user(callback: CallbackQuery, db):
    try:
        user_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    success = await db.unban_user(user_id)

    if success:
        await callback.answer("‚úÖ –ë–∞–Ω —Å–Ω—è—Ç")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} —Å–Ω—è–ª –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from .notifications import notify_user_unbanned
        await notify_user_unbanned(callback.bot, user_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
        bans = await db.get_all_bans()
        if not bans:
            text = "‚úÖ –ë–∞–Ω —Å–Ω—è—Ç!\n\n–ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –Ω–µ—Ç."
            await safe_edit_message(callback, text, kb.admin_main_menu())
        else:
            await show_admin_ban(callback, bans, 0)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞", show_alert=True)

# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò ====================

@router.callback_query(F.data.startswith("admin_report_"))
@admin_only
async def navigate_reports(callback: CallbackQuery, db):
    parts = callback.data.split("_")
    direction = parts[2]  # next –∏–ª–∏ prev
    current_index = int(parts[3])
    
    reports = await db.get_pending_reports()
    
    if direction == "next" and current_index + 1 < len(reports):
        await show_admin_report(callback, reports, current_index + 1)
    elif direction == "prev" and current_index > 0:
        await show_admin_report(callback, reports, current_index - 1)
    else:
        message = "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∂–∞–ª–æ–±–∞" if direction == "next" else "–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∂–∞–ª–æ–±–∞"
        await callback.answer(message, show_alert=True)

@router.callback_query(F.data.startswith("admin_ban_"))
@admin_only
async def navigate_bans(callback: CallbackQuery, db):
    if not callback.data.startswith("admin_ban_next_") and not callback.data.startswith("admin_ban_prev_"):
        return  # –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        
    parts = callback.data.split("_")
    direction = parts[2]  # next –∏–ª–∏ prev
    current_index = int(parts[3])
    
    bans = await db.get_all_bans()
    
    if direction == "next" and current_index + 1 < len(bans):
        await show_admin_ban(callback, bans, current_index + 1)
    elif direction == "prev" and current_index > 0:
        await show_admin_ban(callback, bans, current_index - 1)
    else:
        message = "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω" if direction == "next" else "–≠—Ç–æ –ø–µ—Ä–≤—ã–π –±–∞–Ω"
        await callback.answer(message, show_alert=True)

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ö–ò ====================

async def process_report_action(callback: CallbackQuery, action: str, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∂–∞–ª–æ–±–∞–º–∏"""
    try:
        report_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    report_info = await db.get_report_info(report_id)
    if not report_info:
        await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    success = await db.process_report(report_id, action, settings.ADMIN_ID)

    if success:
        action_messages = {
            "approve": "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω",
            "ban": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω", 
            "dismiss": "‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        }
        
        await callback.answer(action_messages[action])
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ {action} –¥–ª—è –∂–∞–ª–æ–±—ã {report_id}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if action in ["approve", "ban"]:
            from .notifications import notify_profile_deleted, notify_user_banned
            await notify_profile_deleted(callback.bot, report_info['reported_user_id'], report_info['game'])
            
            if action == "ban":
                ban_info = await db.get_user_ban(report_info['reported_user_id'])
                if ban_info:
                    await notify_user_banned(callback.bot, report_info['reported_user_id'], ban_info['expires_at'])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∂–∞–ª–æ–±—É
        reports = await db.get_pending_reports()
        if not reports:
            text = "‚úÖ –ñ–∞–ª–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –ë–æ–ª—å—à–µ –∂–∞–ª–æ–± –Ω–µ—Ç."
            await safe_edit_message(callback, text, kb.admin_main_menu())
        else:
            await show_admin_report(callback, reports, 0)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã", show_alert=True)

async def show_admin_report(callback: CallbackQuery, reports: list, current_index: int, db):
    """–ü–æ–∫–∞–∑ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω—É"""
    if current_index >= len(reports):
        text = "‚úÖ –í—Å–µ –∂–∞–ª–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    report = reports[current_index]
    profile = await db.get_user_profile(report['reported_user_id'], report['game'])

    if not profile:
        game_name = settings.GAMES.get(report['game'], report['game'])
        report_text = f"""üö© –ñ–∞–ª–æ–±–∞ #{report['id']} ({current_index + 1}/{len(reports)})

‚ö†Ô∏è –ü–†–û–§–ò–õ–¨ –£–ñ–ï –£–î–ê–õ–ï–ù

üéÆ –ò–≥—Ä–∞: {game_name}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {report.get('name', 'N/A')} (@{report.get('username', '–Ω–µ—Ç username')})
üéØ –ù–∏–∫–Ω–µ–π–º: {report.get('nickname', 'N/A')}
üìÖ –î–∞—Ç–∞ –∂–∞–ª–æ–±—ã: {report['created_at'][:16]}

–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)."""

        await safe_edit_message(callback, report_text, 
                               kb.admin_report_actions_with_nav(report['id'], current_index, len(reports)))
        await callback.answer()
        return

    game_name = settings.GAMES.get(report['game'], report['game'])
    report_text = f"üö© –ñ–∞–ª–æ–±–∞ #{report['id']} ({current_index + 1}/{len(reports)})\n\n"
    report_text += f"üéÆ –ò–≥—Ä–∞: {game_name}\n"
    report_text += f"üìÖ –î–∞—Ç–∞ –∂–∞–ª–æ–±—ã: {report['created_at'][:16]}\n\n"
    report_text += "üë§ –ê–ù–ö–ï–¢–ê –ù–ê–†–£–®–ò–¢–ï–õ–Ø:\n"
    report_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    report_text += texts.format_profile(profile, show_contact=False)
    report_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    report_text += "‚öñÔ∏è –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∞–Ω–∫–µ—Ç–æ–π?"

    try:
        if profile.get('photo_id'):
            try:
                await callback.message.delete()
            except:
                pass
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=report_text,
                reply_markup=kb.admin_report_actions_with_nav(report['id'], current_index, len(reports))
            )
        else:
            await safe_edit_message(callback, report_text, 
                                   kb.admin_report_actions_with_nav(report['id'], current_index, len(reports)))
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∂–∞–ª–æ–±—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

async def show_admin_ban(callback: CallbackQuery, bans: list, current_index: int):
    """–ü–æ–∫–∞–∑ –±–∞–Ω–∞ –∞–¥–º–∏–Ω—É"""
    if current_index >= len(bans):
        text = "‚úÖ –í—Å–µ –±–∞–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    ban = bans[current_index]
    ban_text = f"""üö´ –ë–∞–Ω #{ban['id']} ({current_index + 1}/{len(bans)})

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ban.get('name', 'N/A')} (@{ban.get('username', '–Ω–µ—Ç username')})
üéØ –ù–∏–∫–Ω–µ–π–º: {ban.get('nickname', 'N/A')}
üìÖ –î–∞—Ç–∞ –±–∞–Ω–∞: {ban['created_at'][:16]}
‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {ban['expires_at'][:16]}
üìù –ü—Ä–∏—á–∏–Ω–∞: {ban['reason']}

–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–∞–Ω–æ–º?"""

    await safe_edit_message(callback, ban_text, 
                           kb.admin_ban_actions_with_nav(ban['user_id'], current_index, len(bans)))
    await callback.answer()

async def show_matches(callback: CallbackQuery, user_id: int, game: str, db):
    """–ü–æ–∫–∞–∑ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    matches = await db.get_matches(user_id, game)
    game_name = settings.GAMES.get(game, game)

    if not matches:
        text = f"üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ {game_name}\n\n"
        text += "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏:\n"
        text += "‚Ä¢ –õ–∞–π–∫–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—ã –≤ –ø–æ–∏—Å–∫–µ\n"
        text += "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"
        await safe_edit_message(callback, text, kb.back())
        await callback.answer(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {game_name}")
        return

    text = f"üíñ –í–∞—à–∏ –º–∞—Ç—á–∏ –≤ {game_name} ({len(matches)}):\n\n"
    for i, match in enumerate(matches, 1):
        name = match['name']
        username = match.get('username', '–Ω–µ—Ç username')
        text += f"{i}. {name} (@{username})\n"

    text += "\nüí¨ –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –∏–∑ –Ω–∏—Ö!"

    buttons = []
    for i, match in enumerate(matches[:5]):
        name = match['name'][:15] + "..." if len(match['name']) > 15 else match['name']
        buttons.append([kb.InlineKeyboardButton(
            text=f"üí¨ {name}", 
            callback_data=f"contact_{match['telegram_id']}"
        )])

    buttons.append([kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    keyboard = kb.InlineKeyboardMarkup(inline_keyboard=buttons)

    await safe_edit_message(callback, text, keyboard)
    await callback.answer(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {game_name}")