import logging
from typing import Optional
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from handlers.notifications import notify_about_match, notify_about_like, notify_user_banned, notify_profile_deleted
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)

class SearchForm(StatesGroup):
    filters = State()
    browsing = State()

__all__ = ['safe_edit_message', 'router', 'SearchForm']


# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================

@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    user = db.get_user(user_id)

    if user and user.get('current_game'):
        game = user['current_game']
        game_name = settings.GAMES.get(game, game)
        has_profile = db.has_profile(user_id, game)

        text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: {game_name}"
        if has_profile:
            text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

        await message.answer(text, reply_markup=kb.main_menu(has_profile, game))
    else:
        await message.answer(texts.WELCOME, reply_markup=kb.game_selection())


@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """üéÆ TeammateBot - –ü–æ–º–æ—â—å

üîç –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
‚Ä¢ –ü–æ–∏—Å–∫ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π

üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É (Dota 2 –∏–ª–∏ CS2)
2. –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
3. –ò—â–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
4. –õ–∞–π–∫–∞–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è
5. –ü—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã

‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"""

    await message.answer(help_text)


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id != settings.ADMIN_ID:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return

    await message.answer("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_main_menu())


# ==================== –í–´–ë–û–† –ò –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ò–ì–† ====================

@router.callback_query(F.data.startswith("game_"))
async def select_game(callback: CallbackQuery):
    game = callback.data.split("_")[1]
    user_id = callback.from_user.id
    username = callback.from_user.username

    if settings.CHECK_SUBSCRIPTION and not await check_subscription(user_id, game, callback.bot):
        game_name = settings.GAMES.get(game, game)
        channel = settings.DOTA_CHANNEL if game == "dota" else settings.CS_CHANNEL

        await safe_edit_message(callback, 
            f"‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {game_name}, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª\n"
            "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã:",
            kb.subscribe_channel_keyboard(game)
        )
        await callback.answer()
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É: {game}")

    db.create_user(user_id, username, game)

    has_profile = db.has_profile(user_id, game)
    game_name = settings.GAMES.get(game, game)

    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"

    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()


@router.callback_query(F.data.startswith("switch_and_matches_"))
async def switch_and_show_matches(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–∫–∞–∑ –º–∞—Ç—á–µ–π –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    # callback_data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: "switch_and_matches_cs" –∏–ª–∏ "switch_and_matches_dota"
    # –ü–æ—Å–ª–µ split("_") –ø–æ–ª—É—á–∞–µ–º: ["switch", "and", "matches", "cs"]
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    game = parts[3]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
    if game not in settings.GAMES:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∏–≥—Ä–∞ –≤ callback: {game}, parts: {parts}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–≥—Ä–∞", show_alert=True)
        return
    
    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É {game} –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä—É
    success = db.switch_game(user_id, game)
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä—ã", show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if db.is_user_banned(user_id):
        ban_info = db.get_user_ban(user_id)
        game_name = settings.GAMES.get(game, game)
        if ban_info:
            ban_end = ban_info['expires_at']
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name} –¥–æ {ban_end[:16]}\n\n–†–∞–∑–¥–µ–ª '–ú–∞—Ç—á–∏' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        else:
            text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ {game_name}\n\n–†–∞–∑–¥–µ–ª '–ú–∞—Ç—á–∏' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        await safe_edit_message(callback, text, kb.back())
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    if not db.has_profile(user_id, game):
        game_name = settings.GAMES.get(game, game)
        await callback.answer(f"‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è {game_name}", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏
    matches = db.get_matches(user_id, game)
    game_name = settings.GAMES.get(game, game)

    if not matches:
        text = f"üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ {game_name}\n\n"
        text += "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏:\n"
        text += "‚Ä¢ –õ–∞–π–∫–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—ã –≤ –ø–æ–∏—Å–∫–µ\n"
        text += "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ª–∞–π–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤"
        await safe_edit_message(callback, text, kb.back())
        await callback.answer(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {game_name}")
        return

    text = f"üíñ –í–∞—à–∏ –º–∞—Ç—á–∏ –≤ {game_name} ({len(matches)}):\n\n"
    for i, match in enumerate(matches, 1):
        name = match['name']
        username = match.get('username', '–Ω–µ—Ç username')
        text += f"{i}. {name} (@{username})\n"

    text += "\nüí¨ –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –∏–∑ –Ω–∏—Ö!"

    buttons = []
    for i, match in enumerate(matches[:5]):
        name = match['name'][:15] + "..." if len(match['name']) > 15 else match['name']
        buttons.append([kb.InlineKeyboardButton(
            text=f"üí¨ {name}", 
            callback_data=f"contact_{match['telegram_id']}"
        )])

    buttons.append([kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    keyboard = kb.InlineKeyboardMarkup(inline_keyboard=buttons)

    await safe_edit_message(callback, text, keyboard)
    await callback.answer(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {game_name}")


@router.callback_query(F.data.startswith("switch_"))
async def switch_game(callback: CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) < 2:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
        
    game = parts[1]
    user_id = callback.from_user.id

    if settings.CHECK_SUBSCRIPTION and not await check_subscription(user_id, game, callback.bot):
        game_name = settings.GAMES.get(game, game)
        channel = settings.DOTA_CHANNEL if game == "dota" else settings.CS_CHANNEL

        await callback.message.edit_text(
            f"‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {game_name}, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel}\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª\n"
            "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã:",
            reply_markup=kb.subscribe_channel_keyboard(game)
        )
        await callback.answer()
        return

    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É: {game}")

    db.switch_game(user_id, game)

    has_profile = db.has_profile(user_id, game)
    game_name = settings.GAMES.get(game, game)

    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"

    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += f"\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è {game_name}.\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()

# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ú–ï–ù–Æ ====================

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await safe_edit_message(callback, texts.WELCOME, kb.game_selection())
        await callback.answer()
        return

    game = user['current_game']
    has_profile = db.has_profile(user_id, game)
    game_name = settings.GAMES.get(game, game)

    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"

    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await safe_edit_message(callback, texts.WELCOME, kb.game_selection())
        await callback.answer()
        return

    game = user['current_game']
    has_profile = db.has_profile(user_id, game)
    game_name = settings.GAMES.get(game, game)

    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"

    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"

    await safe_edit_message(callback, text, kb.main_menu(has_profile, game))
    await callback.answer()


@router.callback_query(F.data == "back_to_games")
async def back_to_games(callback: CallbackQuery):
    await safe_edit_message(callback,
        texts.WELCOME,
        reply_markup=kb.game_selection()
    )
    await callback.answer()


# ==================== –ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–Ø ====================

@router.callback_query(F.data == "view_profile")
async def view_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    profile = db.get_user_profile(user_id, game)

    if not profile:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    profile_text = texts.format_profile(profile, show_contact=True)
    game_name = settings.GAMES.get(game, game)
    text = f"üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n{profile_text}"

    try:
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=text,
                reply_markup=kb.back()
            )
        else:
            await safe_edit_message(callback, text, kb.back())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await safe_edit_message(callback, text, kb.back())

    await callback.answer()


# ==================== –í–û–ó–í–†–ê–¢ –ö –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Æ –ò –ü–û–ò–°–ö–£ ====================

@router.callback_query(F.data == "back_to_editing")
async def back_to_editing_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    profile = db.get_user_profile(user_id, game)

    if not profile:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    game_name = settings.GAMES.get(game, game)
    current_info = f"üìù –¢–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n"
    current_info += texts.format_profile(profile, show_contact=True)
    current_info += "\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

    keyboard = kb.edit_profile_menu()

    try:
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=current_info,
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        try:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
        except:
            await callback.message.delete()
            await callback.message.answer(current_info, reply_markup=keyboard)

    await callback.answer()


@router.callback_query(F.data == "back_to_search")  
async def back_to_search_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']

    if not db.has_profile(user_id, game):
        game_name = settings.GAMES.get(game, game)
        await callback.answer(f"‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è {game_name}", show_alert=True)
        return

    await state.clear()

    await state.update_data(
        user_id=user_id,
        game=game,
        rating_filter=None,
        position_filter=None,
        profiles=[],
        current_index=0,
        message_with_photo=False
    )
    await state.set_state(SearchForm.filters)

    game_name = settings.GAMES.get(game, game)
    text = f"üîç –ü–æ–∏—Å–∫ –≤ {game_name}\n\n–§–∏–ª—å—Ç—Ä—ã:\n\n"
    text += "üèÜ –†–µ–π—Ç–∏–Ω–≥: –ª—é–±–æ–π\n"
    text += "‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è: –ª—é–±–∞—è\n\n"
    text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫:"

    await safe_edit_message(callback, text, kb.search_filters())
    await callback.answer()


# ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        import sqlite3
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]

            cursor = conn.execute("SELECT COUNT(*) FROM profiles")
            total_profiles = cursor.fetchone()[0]

            cursor = conn.execute("SELECT game, COUNT(*) FROM profiles GROUP BY game")
            profiles_by_game = cursor.fetchall()

            cursor = conn.execute("SELECT COUNT(*) FROM matches")
            total_matches = cursor.fetchone()[0]

            cursor = conn.execute("SELECT COUNT(*) FROM reports WHERE status = 'pending'")
            pending_reports = cursor.fetchone()[0]

        text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üìÑ –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {total_profiles}"""

        for game, count in profiles_by_game:
            game_name = settings.GAMES.get(game, game)
            text += f"\n  - {game_name}: {count}"

        text += f"\nüíñ –ú–∞—Ç—á–µ–π: {total_matches}"
        text += f"\nüö© –û–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±: {pending_reports}"

        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer()


@router.callback_query(F.data == "admin_reports")
async def show_admin_reports(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    reports = db.get_pending_reports()

    if not reports:
        text = "üö© –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    await show_admin_report(callback, reports, 0)


@router.callback_query(F.data == "admin_bans")
async def show_admin_bans(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    bans = db.get_all_bans()

    if not bans:
        text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    await show_admin_ban(callback, bans, 0)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ñ–ê–õ–û–ë –ò –ë–ê–ù–û–í ====================

@router.callback_query(F.data.startswith("admin_approve_"))
async def admin_approve_report(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        report_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    report_info = db.get_report_info(report_id)
    if not report_info:
        await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    success = db.process_report(report_id, 'approve', settings.ADMIN_ID)

    if success:
        await callback.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} —É–¥–∞–ª–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∂–∞–ª–æ–±–µ {report_id}")

        await notify_profile_deleted(
            callback.bot, 
            report_info['reported_user_id'], 
            report_info['game']
        )

        reports = db.get_pending_reports()
        if not reports:
            text = "‚úÖ –ñ–∞–ª–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –ë–æ–ª—å—à–µ –∂–∞–ª–æ–± –Ω–µ—Ç."
            await safe_edit_message(callback, text, kb.admin_main_menu())
        else:
            await show_admin_report(callback, reports, 0)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã", show_alert=True)


@router.callback_query(F.data.startswith("admin_ban_"))
async def admin_ban_user(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        report_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    report_info = db.get_report_info(report_id)
    if not report_info:
        await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    success = db.process_report(report_id, 'ban', settings.ADMIN_ID)

    if success:
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∂–∞–ª–æ–±–µ {report_id}")

        ban_info = db.get_user_ban(report_info['reported_user_id'])
        if ban_info:
            await notify_user_banned(callback.bot, report_info['reported_user_id'], ban_info['expires_at'])
        await notify_profile_deleted(
            callback.bot, 
            report_info['reported_user_id'], 
            report_info['game']
        )

        reports = db.get_pending_reports()
        if not reports:
            text = "‚úÖ –ñ–∞–ª–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –ë–æ–ª—å—à–µ –∂–∞–ª–æ–± –Ω–µ—Ç."
            await safe_edit_message(callback, text, kb.admin_main_menu())
        else:
            await show_admin_report(callback, reports, 0)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)


@router.callback_query(F.data.startswith("admin_dismiss_"))
async def admin_dismiss_report(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        report_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    success = db.process_report(report_id, 'dismiss', settings.ADMIN_ID)
    
    if success:
        await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} –æ—Ç–∫–ª–æ–Ω–∏–ª –∂–∞–ª–æ–±—É {report_id}")
        
        reports = db.get_pending_reports()
        if not reports:
            text = "‚úÖ –ñ–∞–ª–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –ë–æ–ª—å—à–µ –∂–∞–ª–æ–± –Ω–µ—Ç."
            await safe_edit_message(callback, text, kb.admin_main_menu())
        else:
            await show_admin_report(callback, reports, 0)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±—ã", show_alert=True)


@router.callback_query(F.data.startswith("admin_unban_"))
async def admin_unban_user(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        user_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    success = db.unban_user(user_id)

    if success:
        await callback.answer("‚úÖ –ë–∞–Ω —Å–Ω—è—Ç")
        logger.info(f"–ê–¥–º–∏–Ω {settings.ADMIN_ID} —Å–Ω—è–ª –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        from .notifications import notify_user_unbanned
        await notify_user_unbanned(callback.bot, user_id)

        bans = db.get_all_bans()

        if not bans:
            text = "‚úÖ –ë–∞–Ω —Å–Ω—è—Ç!\n\n–ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –Ω–µ—Ç."
            await safe_edit_message(callback, text, kb.admin_main_menu())
        else:
            await show_admin_ban(callback, bans, 0)

    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞", show_alert=True)


# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ñ–ê–õ–û–ë–ê–ú –ò –ë–ê–ù–ê–ú ====================

@router.callback_query(F.data.startswith("admin_report_next_"))
async def admin_report_next(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        parts = callback.data.split("_")
        current_index = int(parts[3])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        return

    reports = db.get_pending_reports()
    next_index = current_index + 1

    if next_index < len(reports):
        await show_admin_report(callback, reports, next_index)
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∂–∞–ª–æ–±–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin_report_prev_"))
async def admin_report_prev(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        parts = callback.data.split("_")
        current_index = int(parts[3])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        return

    reports = db.get_pending_reports()
    prev_index = current_index - 1

    if prev_index >= 0:
        await show_admin_report(callback, reports, prev_index)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∂–∞–ª–æ–±–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin_ban_next_"))
async def admin_ban_next(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        parts = callback.data.split("_")
        current_index = int(parts[3])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        return

    bans = db.get_all_bans()
    next_index = current_index + 1

    if next_index < len(bans):
        await show_admin_ban(callback, bans, next_index)
    else:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω", show_alert=True)


@router.callback_query(F.data.startswith("admin_ban_prev_"))
async def admin_ban_prev(callback: CallbackQuery):
    if callback.from_user.id != settings.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        parts = callback.data.split("_")
        current_index = int(parts[3])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        return

    bans = db.get_all_bans()
    prev_index = current_index - 1

    if prev_index >= 0:
        await show_admin_ban(callback, bans, prev_index)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –±–∞–Ω", show_alert=True)


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def check_subscription(user_id: int, game: str, bot: Bot) -> bool:
    channel = None
    if game == "dota":
        channel = settings.DOTA_CHANNEL
    elif game == "cs":
        channel = settings.CS_CHANNEL

    if not channel or not settings.CHECK_SUBSCRIPTION:
        return True

    try:
        member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None):
    try:
        current_text = callback.message.text or callback.message.caption or ""
        current_markup = callback.message.reply_markup

        text_changed = current_text != text
        markup_changed = str(current_markup) != str(reply_markup)

        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=reply_markup)
        else:
            if text_changed or markup_changed:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=reply_markup
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=reply_markup)
        except:
            pass


async def show_admin_report(callback: CallbackQuery, reports: list, current_index: int):
    if current_index >= len(reports):
        text = "‚úÖ –í—Å–µ –∂–∞–ª–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    report = reports[current_index]

    profile = db.get_user_profile(report['reported_user_id'], report['game'])

    if not profile:
        game_name = settings.GAMES.get(report['game'], report['game'])
        report_text = f"""üö© –ñ–∞–ª–æ–±–∞ #{report['id']} ({current_index + 1}/{len(reports)})

‚ö†Ô∏è –ü–†–û–§–ò–õ–¨ –£–ñ–ï –£–î–ê–õ–ï–ù

üéÆ –ò–≥—Ä–∞: {game_name}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {report.get('name', 'N/A')} (@{report.get('username', '–Ω–µ—Ç username')})
üéØ –ù–∏–∫–Ω–µ–π–º: {report.get('nickname', 'N/A')}
üìÖ –î–∞—Ç–∞ –∂–∞–ª–æ–±—ã: {report['created_at'][:16]}

–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)."""

        await safe_edit_message(callback, report_text, kb.admin_report_actions_with_nav(report['id'], current_index, len(reports)))
        await callback.answer()
        return

    game_name = settings.GAMES.get(report['game'], report['game'])

    report_text = f"üö© –ñ–∞–ª–æ–±–∞ #{report['id']} ({current_index + 1}/{len(reports)})\n\n"
    report_text += f"üéÆ –ò–≥—Ä–∞: {game_name}\n"
    report_text += f"üìÖ –î–∞—Ç–∞ –∂–∞–ª–æ–±—ã: {report['created_at'][:16]}\n\n"

    report_text += "üë§ –ê–ù–ö–ï–¢–ê –ù–ê–†–£–®–ò–¢–ï–õ–Ø:\n"
    report_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

    profile_text = texts.format_profile(profile, show_contact=False)
    report_text += profile_text

    report_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    report_text += "‚öñÔ∏è –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∞–Ω–∫–µ—Ç–æ–π?"

    try:
        if profile.get('photo_id'):
            try:
                await callback.message.delete()
            except:
                pass

            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=report_text,
                reply_markup=kb.admin_report_actions_with_nav(report['id'], current_index, len(reports))
            )
        else:
            await safe_edit_message(callback, report_text, kb.admin_report_actions_with_nav(report['id'], current_index, len(reports)))

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∂–∞–ª–æ–±—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")


async def show_admin_ban(callback: CallbackQuery, bans: list, current_index: int):
    if current_index >= len(bans):
        text = "‚úÖ –í—Å–µ –±–∞–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!"
        await safe_edit_message(callback, text, kb.admin_main_menu())
        await callback.answer()
        return

    ban = bans[current_index]

    ban_text = f"""üö´ –ë–∞–Ω #{ban['id']} ({current_index + 1}/{len(bans)})

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ban.get('name', 'N/A')} (@{ban.get('username', '–Ω–µ—Ç username')})
üéØ –ù–∏–∫–Ω–µ–π–º: {ban.get('nickname', 'N/A')}
üìÖ –î–∞—Ç–∞ –±–∞–Ω–∞: {ban['created_at'][:16]}
‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {ban['expires_at'][:16]}
üìù –ü—Ä–∏—á–∏–Ω–∞: {ban['reason']}

–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–∞–Ω–æ–º?"""

    await safe_edit_message(callback, ban_text, kb.admin_ban_actions_with_nav(ban['user_id'], current_index, len(bans)))
    await callback.answer()