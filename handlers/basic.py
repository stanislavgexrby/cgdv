# handlers/basic.py
"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user(user_id)
    
    if user and user.get('current_game'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        game_name = settings.GAMES.get(user['current_game'], user['current_game'])
        has_profile = bool(user.get('name'))
        
        text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: {game_name}"
        if has_profile:
            text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"
        
        await message.answer(text, reply_markup=kb.main_menu(has_profile, user['current_game']))
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã
        await message.answer(texts.WELCOME, reply_markup=kb.game_selection())

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–º–æ—â—å"""
    help_text = """üéÆ TeammateBot - –ü–æ–º–æ—â—å

üîç –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
‚Ä¢ –ü–æ–∏—Å–∫ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π

üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É (Dota 2 –∏–ª–∏ CS2)
2. –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É
3. –ò—â–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
4. –õ–∞–π–∫–∞–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è
5. –ü—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã

‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"""
    
    await message.answer(help_text)

@router.callback_query(F.data.startswith("game_"))
async def select_game(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∏–≥—Ä—ã"""
    game = callback.data.split("_")[1]
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É: {game}")
    
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.create_user(user_id, username, game)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    has_profile = bool(user.get('name'))
    
    game_name = settings.GAMES.get(game, game)
    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"
    
    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"
    
    await callback.message.edit_text(text, reply_markup=kb.main_menu(has_profile, game))
    await callback.answer()

@router.callback_query(F.data.startswith("switch_"))
async def switch_game(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä—ã"""
    game = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É: {game}")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä—É
    db.switch_game(user_id, game)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    has_profile = bool(user.get('name'))
    
    game_name = settings.GAMES.get(game, game)
    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"
    
    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"
    
    await callback.message.edit_text(text, reply_markup=kb.main_menu(has_profile, game))
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user or not user.get('current_game'):
        await callback.message.edit_text(texts.WELCOME, reply_markup=kb.game_selection())
        await callback.answer()
        return
    
    has_profile = bool(user.get('name'))
    game_name = settings.GAMES.get(user['current_game'], user['current_game'])
    
    text = f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–ò–≥—Ä–∞: {game_name}"
    
    if has_profile:
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "\n\n–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞:"
    
    await callback.message.edit_text(text, reply_markup=kb.main_menu(has_profile, user['current_game']))
    await callback.answer()

@router.callback_query(F.data == "view_profile")
async def view_profile(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if not user or not user.get('name'):
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    profile_text = texts.format_profile(user)
    text = f"üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n{profile_text}"
    
    await callback.message.edit_text(text, reply_markup=kb.back())
    await callback.answer()

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != settings.ADMIN_ID:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    try:
        with db._init_db.__self__._init_db.__globals__['sqlite3'].connect(db.db_path) as conn:
            cursor = conn.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            
            cursor = conn.execute("SELECT COUNT(*) FROM users WHERE name IS NOT NULL")
            with_profiles = cursor.fetchone()[0]
            
            cursor = conn.execute("SELECT COUNT(*) FROM matches")
            total_matches = cursor.fetchone()[0]
        
        text = f"""üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –° –∞–Ω–∫–µ—Ç–∞–º–∏: {with_profiles}
‚Ä¢ –ú–∞—Ç—á–µ–π: {total_matches}"""
        
        await message.answer(text)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")