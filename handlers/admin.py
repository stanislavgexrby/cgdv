import logging
import contextlib
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, InputMediaPhoto

import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings
from handlers.basic import admin_only, safe_edit_message
from handlers.notifications import notify_user_banned, notify_user_unbanned, notify_profile_deleted

logger = logging.getLogger(__name__)
router = Router()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def _parse_rep_data(data: str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±—ã: rep:<action>:<report_id>[:<user_id>[:<days>]]"""
    parts = data.split(":")
    action = parts[1] if len(parts) > 1 else None
    report_id = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else None
    user_id = int(parts[3]) if len(parts) > 3 and parts[3].isdigit() else None
    days = int(parts[4]) if len(parts) > 4 and parts[4].isdigit() else 7
    return action, report_id, user_id, days

def _format_datetime(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if dt is None:
        return "‚Äî"
    if isinstance(dt, str):
        return dt[:16]
    try:
        return dt.strftime("%Y-%m-%d %H:%M")
    except Exception:
        return str(dt)

def _truncate_text(text: str, limit: int = 1024) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram"""
    if not text or len(text) <= limit:
        return text or ""
    return text[:limit-1] + "‚Ä¶"

# ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù–ö–ò ====================

@router.callback_query(F.data == "admin_back")
@admin_only
async def admin_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    await safe_edit_message(callback, "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", kb.admin_main_menu())
    await callback.answer()

# ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================

@router.callback_query(F.data == "admin_stats")
@admin_only
async def show_admin_stats(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", "", "üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL"]

    # Redis —Å—Ç–∞—Ç—É—Å
    try:
        if hasattr(db, '_redis'):
            pong = await db._redis.ping()
            lines.append(f"‚ö° Redis: {'‚úÖ OK' if pong else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        else:
            lines.append("‚ö° Redis: ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception:
        lines.append("‚ö° Redis: ‚ùå –û—à–∏–±–∫–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    if not hasattr(db, '_pg_pool') or db._pg_pool is None:
        lines.append("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL.")
        await safe_edit_message(callback, "\n".join(lines), kb.admin_back_menu())
        await callback.answer()
        return

    try:
        async with db._pg_pool.acquire() as conn:
            stats = await db.get_database_stats()

            main_stats = [
                ("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "users_total"),
                ("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–Ω–∫–µ—Ç–∞–º–∏", "users_with_profiles"), 
                ("üìù –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç", "profiles_total"),
                ("üíñ –ú—ç—Ç—á–∏", "matches_total"),
                ("‚ù§Ô∏è –õ–∞–π–∫–∏", "likes_total"),
                ("üö© –ñ–∞–ª–æ–±—ã (–≤—Å–µ–≥–æ)", "reports_total"),
                ("‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –∂–∞–ª–æ–±—ã", "reports_pending"),
                ("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", "active_bans"),
            ]

            for name, key in main_stats:
                value = stats.get(key, "–æ—à–∏–±–∫–∞")
                lines.append(f"{name}: {value}")

            games_data = stats.get("games_breakdown", {})
            if games_data:
                lines.append("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º:")
                for game, data in games_data.items():
                    game_name = settings.GAMES.get(game, game)
                    lines.append(f"  ‚Ä¢ {game_name}:")
                    lines.append(f"    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['users']}")
                    lines.append(f"    üìù –ê–Ω–∫–µ—Ç: {data['profiles']}")

            try:
                rows = await conn.fetch("SELECT game, COUNT(*) AS cnt FROM profiles GROUP BY game")
                if rows:
                    lines.append("\nüìä –ê–Ω–∫–µ—Ç—ã –ø–æ –∏–≥—Ä–∞–º:")
                    for row in rows:
                        game_name = settings.GAMES.get(row["game"], row["game"])
                        lines.append(f"  ‚Ä¢ {game_name}: {row['cnt']}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–∞–º: {e}")

    except Exception as e:
        lines.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    text = "\n".join(lines)
    await safe_edit_message(callback, text, kb.admin_back_menu())
    await callback.answer()

# ==================== –ñ–ê–õ–û–ë–´ ====================

@router.callback_query(F.data == "admin_reports")
@admin_only
async def show_admin_reports(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑ –∂–∞–ª–æ–±"""
    reports = await db.get_pending_reports()
    
    if not reports:
        text = "üö© –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∂–∞–ª–æ–±"
        await safe_edit_message(callback, text, kb.admin_back_menu())
        await callback.answer()
        return

    await _show_report(callback, reports[0], db)

async def _show_report(callback: CallbackQuery, report: dict, db):
    """–ü–æ–∫–∞–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∂–∞–ª–æ–±—ã"""
    report_id = report['id']
    reported_user_id = report['reported_user_id']
    game = report.get('game', 'dota')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
    profile = await db.get_user_profile(reported_user_id, game)
    game_name = settings.GAMES.get(game, game)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    header = (
        f"üö© –ñ–∞–ª–æ–±–∞ #{report_id} | {game_name}\n"
        f"üìÖ –î–∞—Ç–∞: {_format_datetime(report.get('created_at'))}\n"
        f"üë§ –ñ–∞–ª–æ–±—â–∏–∫: {report['reporter_id']}\n"
        f"üéØ –ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reported_user_id}\n"
        f"üìã –ü—Ä–∏—á–∏–Ω–∞: {report.get('report_reason', 'inappropriate_content')}\n"
    )
    
    if profile:
        body = "\nüë§ –ê–Ω–∫–µ—Ç–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:\n\n" + texts.format_profile(profile, show_contact=True)
    else:
        body = f"\n‚ùå –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {reported_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    text = _truncate_text(header + body)
    keyboard = kb.admin_report_actions(reported_user_id, report_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    photo_id = profile.get('photo_id') if profile else None
    
    try:
        if photo_id:
            media = InputMediaPhoto(media=photo_id, caption=text)
            await callback.message.edit_media(media=media, reply_markup=keyboard)
        else:
            await safe_edit_message(callback, text, keyboard)
    except Exception:
        # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            if photo_id:
                await callback.message.delete()
                await callback.message.answer_photo(photo_id, caption=text, reply_markup=keyboard)
            else:
                await safe_edit_message(callback, text, keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∂–∞–ª–æ–±—ã: {e}")
            await safe_edit_message(callback, text, keyboard)
    
    await callback.answer()

@router.callback_query(F.data.startswith("rep:"))
@admin_only
async def handle_report_action(callback: CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∂–∞–ª–æ–±–∞–º–∏"""
    action, report_id, user_id, days = _parse_rep_data(callback.data)
    
    if not action:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return
    
    if action == "del":
        await _delete_profile_action(callback, report_id, user_id, db)
    elif action == "ban":
        await _ban_user_action(callback, report_id, user_id, days, db)
    elif action == "ignore":
        await _dismiss_report_action(callback, report_id, db)
    elif action == "next":
        await _show_next_report(callback, db)
    else:
        await callback.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

async def _delete_profile_action(callback: CallbackQuery, report_id: int, user_id: int, db):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –∂–∞–ª–æ–±–µ"""
    user = await db.get_user(user_id)
    game = (user.get("current_game") if user else "dota") or "dota"
    
    success_delete = await db.delete_profile(user_id, game)
    success_report = await db.update_report_status(report_id, status="resolved", admin_id=callback.from_user.id)
    
    if success_delete:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await notify_profile_deleted(callback.bot, user_id, game)
        logger.info(f"–ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª –ø—Ä–æ—Ñ–∏–ª—å {user_id} –ø–æ –∂–∞–ª–æ–±–µ {report_id}")
    
    message = "üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω" if (success_delete and success_report) else "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    await callback.answer(message, show_alert=not (success_delete and success_report))
    
    await _show_next_report(callback, db)

async def _ban_user_action(callback: CallbackQuery, report_id: int, user_id: int, days: int, db):
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∂–∞–ª–æ–±–µ"""
    expires_at = datetime.utcnow() + timedelta(days=days)
    reason = f"–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª (–∂–∞–ª–æ–±–∞ #{report_id})"
    
    success_ban = await db.ban_user(user_id, reason, expires_at)
    success_report = await db.update_report_status(report_id, status="resolved", admin_id=callback.from_user.id)
    
    if success_ban:
        await notify_user_banned(callback.bot, user_id, expires_at)
        logger.info(f"–ê–¥–º–∏–Ω –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {days} –¥–Ω–µ–π –ø–æ –∂–∞–ª–æ–±–µ {report_id}")
    
    message = f"–ë–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π –ø—Ä–∏–º–µ–Ω–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω" if (success_ban and success_report) else "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    await callback.answer(message, show_alert=not (success_ban and success_report))
    
    user = await db.get_user(user_id)
    if user and user.get('current_game'):
        await db._clear_pattern_cache(f"search:*:{user['current_game']}:*")
    
    await _show_next_report(callback, db)

async def unban_user(callback: CallbackQuery, db):
    """–°–Ω—è—Ç–∏–µ –±–∞–Ω–∞"""
    try:
        user_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    success = await db.unban_user(user_id)
    
    if success:
        notify_user_unbanned(callback.bot, user_id)
        logger.info(f"–ê–¥–º–∏–Ω —Å–Ω—è–ª –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer("–ë–∞–Ω —Å–Ω—è—Ç")
        
        bans = await db.get_all_bans()
        if not bans:
            text = "–ë–∞–Ω —Å–Ω—è—Ç!\n\n–ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –Ω–µ—Ç."
            await safe_edit_message(callback, text, kb.admin_back_menu())
        else:
            await _show_ban(callback, bans[0], 0, len(bans))
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞", show_alert=True)

async def _dismiss_report_action(callback: CallbackQuery, report_id: int, db):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã"""
    success = await db.update_report_status(report_id, status="ignored", admin_id=callback.from_user.id)
    
    message = "‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞" if success else "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    await callback.answer(message, show_alert=not success)
    
    await _show_next_report(callback, db)

async def _show_next_report(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –∂–∞–ª–æ–±—ã"""
    reports = await db.get_pending_reports()
    
    if not reports:
        text = "‚úÖ –ë–æ–ª—å—à–µ –∂–∞–ª–æ–± –Ω–µ—Ç"
        await safe_edit_message(callback, text, kb.admin_back_menu())
        return
    
    await _show_report(callback, reports[0], db)

# ==================== –ë–ê–ù–´ ====================

@router.callback_query(F.data.startswith("admin_unban_"))
@admin_only
async def admin_unban_user(callback: CallbackQuery, db):
    """–°–Ω—è—Ç–∏–µ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(callback.data.split("_")[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    success = await db.unban_user(user_id)
    
    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await notify_user_unbanned(callback.bot, user_id)
        logger.info(f"–ê–¥–º–∏–Ω —Å–Ω—è–ª –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –±–∞–Ω—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
        bans = await db.get_all_bans()
        if not bans:
            text = "‚úÖ –ë–∞–Ω —Å–Ω—è—Ç!\n\n–ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –Ω–µ—Ç."
            await safe_edit_message(callback, text, kb.admin_back_menu())
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–Ω –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
            await _show_ban(callback, bans[0], 0, len(bans))
        
        await callback.answer("‚úÖ –ë–∞–Ω —Å–Ω—è—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞", show_alert=True)

@router.callback_query(F.data == "admin_bans")
@admin_only
async def show_admin_bans(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤"""
    bans = await db.get_all_bans()
    
    if not bans:
        text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤"
        await safe_edit_message(callback, text, kb.admin_back_menu())
        await callback.answer()
        return
    
    await _show_ban(callback, bans[0], 0, len(bans))

async def _show_ban(callback: CallbackQuery, ban: dict, current_index: int, total_bans: int):
    """–ü–æ–∫–∞–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∞"""
    ban_text = f"""üö´ –ë–∞–Ω #{ban['id']} ({current_index + 1}/{total_bans})

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ban.get('name', 'N/A')} (@{ban.get('username', '–Ω–µ—Ç username')})
üéØ –ù–∏–∫–Ω–µ–π–º: {ban.get('nickname', 'N/A')}
üìÖ –î–∞—Ç–∞ –±–∞–Ω–∞: {_format_datetime(ban.get('created_at'))}
‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {_format_datetime(ban.get('expires_at'))}
üìù –ü—Ä–∏—á–∏–Ω–∞: {ban['reason']}

–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–∞–Ω–æ–º?"""

    keyboard = kb.admin_ban_actions_with_nav(ban['user_id'], current_index, total_bans)
    await safe_edit_message(callback, ban_text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("admin_ban_"))
@admin_only
async def navigate_bans(callback: CallbackQuery, db):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–∞–Ω–∞–º"""
    parts = callback.data.split("_")
    if len(parts) < 4:
        return
    
    direction = parts[2]  # prev –∏–ª–∏ next
    current_index = int(parts[3])
    
    bans = await db.get_all_bans()
    
    if direction == "next" and current_index + 1 < len(bans):
        await _show_ban(callback, bans[current_index + 1], current_index + 1, len(bans))
    elif direction == "prev" and current_index > 0:
        await _show_ban(callback, bans[current_index - 1], current_index - 1, len(bans))
    else:
        message = "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω" if direction == "next" else "–≠—Ç–æ –ø–µ—Ä–≤—ã–π –±–∞–Ω"
        await callback.answer(message, show_alert=True)