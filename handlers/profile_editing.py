import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

from handlers.basic import safe_edit_message

logger = logging.getLogger(__name__)
router = Router()
db = Database(settings.DATABASE_PATH)

class EditProfileForm(StatesGroup):
    edit_name = State()
    edit_nickname = State()
    edit_age = State()
    edit_rating = State()
    edit_positions = State()
    edit_info = State()
    edit_photo = State()

@router.callback_query(F.data == "edit_profile")
async def edit_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    if db.is_user_banned(user_id):
        ban_info = db.get_user_ban(user_id)
        if ban_info:
            await callback.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {ban_info['expires_at'][:16]}", show_alert=True)
        else:
            await callback.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return
        
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    profile = db.get_user_profile(user_id, game)

    if not profile:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    game_name = settings.GAMES.get(game, game)
    current_info = f"üìù –¢–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n"
    current_info += texts.format_profile(profile, show_contact=True)
    current_info += "\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

    keyboard = kb.edit_profile_menu()

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ñ–æ—Ç–æ
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=current_info,
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await callback.message.edit_text(current_info, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
        except:
            await callback.message.delete()
            await callback.message.answer(current_info, reply_markup=keyboard)

    await callback.answer()

async def safe_edit_or_send(message, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.delete()
            await message.answer(text, reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await message.delete()
            await message.answer(text, reply_markup=reply_markup)
        except:
            pass

@router.callback_query(F.data == "edit_name")
async def edit_name(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_name)
    
    await safe_edit_or_send(
        callback.message,
        "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        kb.cancel_edit()
    )
    await callback.answer()

@router.callback_query(F.data == "edit_nickname")
async def edit_nickname(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_nickname)
    
    await safe_edit_or_send(
        callback.message,
        "üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:",
        kb.cancel_edit()
    )
    await callback.answer()

@router.callback_query(F.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_age)
    
    await safe_edit_or_send(
        callback.message,
        f"üéÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
        kb.cancel_edit()
    )
    await callback.answer()

@router.callback_query(F.data == "edit_rating")
async def edit_rating(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_rating)
    
    await safe_edit_or_send(
        callback.message,
        "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:",
        kb.ratings(user['current_game'])
    )
    await callback.answer()

@router.callback_query(F.data == "edit_positions")
async def edit_positions(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    profile = db.get_user_profile(user_id, user['current_game'])
    current_positions = profile['positions'] if profile else []
    
    await state.update_data(
        user_id=user_id, 
        game=user['current_game'],
        positions_selected=current_positions.copy(),
        original_positions=current_positions.copy()
    )
    await state.set_state(EditProfileForm.edit_positions)
    
    await safe_edit_or_send(
        callback.message,
        "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        kb.positions(user['current_game'], current_positions)
    )
    await callback.answer()

@router.callback_query(F.data == "edit_info")
async def edit_info(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_info)
    
    await safe_edit_or_send(
        callback.message,
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        kb.edit_info_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "edit_photo")
async def edit_photo(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_photo)
    
    await safe_edit_or_send(
        callback.message,
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':",
        kb.edit_photo_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@router.message(EditProfileForm.edit_name)
async def process_edit_name(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π")
        return
        
    name = message.text.strip()

    if len(name) < 2 or len(name) > settings.MAX_NAME_LENGTH:
        await message.answer(f"‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
        return

    if len(name.split()) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
        return

    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=name,
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back_to_editing())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_name, ~F.text)
async def wrong_edit_name_format(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π")

@router.message(EditProfileForm.edit_nickname)
async def process_edit_nickname(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º")
        return
        
    nickname = message.text.strip()

    if len(nickname) < 2 or len(nickname) > settings.MAX_NICKNAME_LENGTH:
        await message.answer(f"‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NICKNAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
        return

    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=nickname,
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.back_to_editing())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_nickname, ~F.text)
async def wrong_edit_nickname_format(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º")

@router.message(EditProfileForm.edit_age)
async def process_edit_age(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ {settings.MIN_AGE}:")
        return
        
    try:
        age = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    if age < settings.MIN_AGE:
        await message.answer(f"‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ–µ {settings.MIN_AGE}:")
        return

    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=age,
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.back_to_editing())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_age, ~F.text)
async def wrong_edit_age_format(message: Message, state: FSMContext):
    await message.answer(f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ {settings.MIN_AGE}:")

@router.message(EditProfileForm.edit_info)
async def process_edit_info(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
        return
        
    info = message.text.strip()

    if len(info) > settings.MAX_INFO_LENGTH:
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å–∏–º—É–º {settings.MAX_INFO_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=info,
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back_to_editing())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_info, ~F.text)
async def wrong_edit_info_format(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")

@router.message(EditProfileForm.edit_photo, F.photo)
async def process_edit_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    
    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=photo_id
        )
        
        await state.clear()
        
        if success:
            await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back_to_editing())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_photo)
async def wrong_edit_photo_format(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏",
        reply_markup=kb.edit_photo_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@router.callback_query(F.data.startswith("rating_"), EditProfileForm.edit_rating)
async def process_edit_rating(callback: CallbackQuery, state: FSMContext):
    rating = callback.data.split("_")[1]
    
    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=rating,
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await safe_edit_or_send(callback.message, "‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!", kb.back_to_editing())
        else:
            await safe_edit_or_send(callback.message, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", kb.back_to_editing())
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–π

@router.callback_query(F.data.startswith("pos_add_"), EditProfileForm.edit_positions)
async def edit_add_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[2]

    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']

    if position not in selected:
        selected.append(position)
        await state.update_data(positions_selected=selected)

    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data.startswith("pos_remove_"), EditProfileForm.edit_positions)
async def edit_remove_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[2]

    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']

    if position in selected:
        selected.remove(position)
        await state.update_data(positions_selected=selected)

    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data == "pos_done", EditProfileForm.edit_positions)
async def edit_positions_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get('positions_selected', [])
    original = data.get('original_positions', [])

    if not selected:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–æ–∑–∏—Ü–∏–∏
    if set(selected) == set(original):
        await callback.answer("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
        await state.clear()
        await safe_edit_or_send(callback.message, "‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏", kb.back_to_editing())
        return

    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=selected,
            additional_info=profile['additional_info'],
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await safe_edit_or_send(callback.message, "‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", kb.back_to_editing())
        else:
            await safe_edit_or_send(callback.message, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", kb.back_to_editing())
    
    await callback.answer()

@router.callback_query(F.data == "pos_need", EditProfileForm.edit_positions)
async def edit_positions_need(callback: CallbackQuery):
    await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

@router.callback_query(F.data == "delete_info", EditProfileForm.edit_info)
async def delete_info(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info="",  # –£–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            photo_id=profile.get('photo_id')
        )
        
        await state.clear()
        
        if success:
            await safe_edit_or_send(callback.message, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", kb.back_to_editing())
        else:
            await safe_edit_or_send(callback.message, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", kb.back_to_editing())
    
    await callback.answer()

@router.callback_query(F.data == "delete_photo", EditProfileForm.edit_photo)
async def delete_photo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    profile = db.get_user_profile(data['user_id'], data['game'])
    
    if profile:
        success = db.update_user_profile(
            telegram_id=data['user_id'],
            game=data['game'],
            name=profile['name'],
            nickname=profile['nickname'],
            age=profile['age'],
            rating=profile['rating'],
            positions=profile['positions'],
            additional_info=profile['additional_info'],
            photo_id=None
        )
        
        await state.clear()
        
        if success:
            await safe_edit_or_send(callback.message, "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!", kb.back_to_editing())
        else:
            await safe_edit_or_send(callback.message, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", kb.back_to_editing())
    
    await callback.answer()

@router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_edit_or_send(callback.message, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", kb.back_to_editing())
    await callback.answer()

@router.callback_query(F.data == "delete_profile")
async def confirm_delete_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    game_name = settings.GAMES.get(game, game)

    text = (f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –≤ {game_name}\n\n" +
           "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n" +
           f"–í—Å–µ –ª–∞–π–∫–∏ –∏ –º–∞—Ç—á–∏ –≤ {game_name} –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")

    try:
        if callback.message.photo:
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=kb.confirm_delete())
        else:
            await callback.message.edit_text(text, reply_markup=kb.confirm_delete())
    except Exception as e:
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=kb.confirm_delete())
        await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def delete_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']
    success = db.delete_profile(user_id, game)

    if success:
        game_name = settings.GAMES.get(game, game)
        
        text = f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –≤ {game_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n"
        text += f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ª–∞–π–∫–∏ –∏ –º–∞—Ç—á–∏) —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.\n\n"
        text += f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
        
        buttons = [
            [kb.InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É", callback_data="create_profile")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω –¥–ª—è {user_id} –≤ {game}")
    else:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        await callback.message.edit_text(text, reply_markup=kb.back())

    await callback.answer()