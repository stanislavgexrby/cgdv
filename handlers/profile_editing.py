import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings
from handlers.basic import check_ban_and_profile, safe_edit_message

logger = logging.getLogger(__name__)
router = Router()

class EditProfileForm(StatesGroup):
    edit_name = State()
    edit_nickname = State()
    edit_age = State()
    edit_rating = State()
    edit_region = State()
    edit_positions = State()
    edit_info = State()
    edit_photo = State()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

# async def update_profile_field(callback: CallbackQuery, field: str, value, state: FSMContext = None, db=None):
#     """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
#     user_id = callback.from_user.id
#     user = await db.get_user(user_id)

#     if not user or not user.get('current_game'):
#         await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
#         return False

#     game = user['current_game']
#     profile = await db.get_user_profile(user_id, game)

#     if not profile:
#         await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
#         return False

#     update_data = {
#         'telegram_id': user_id,
#         'game': game,
#         'name': profile['name'],
#         'nickname': profile['nickname'],
#         'age': profile['age'],
#         'rating': profile['rating'],
#         'region': profile.get('region', 'eeu'),
#         'positions': profile['positions'],
#         'additional_info': profile['additional_info'],
#         'photo_id': profile.get('photo_id')
#     }

#     update_data[field] = value

#     success = await db.update_user_profile(**update_data)

#     if state:
#         await state.clear()

#     if success:
#         field_names = {
#             'name': '–ò–º—è',
#             'nickname': '–ù–∏–∫–Ω–µ–π–º', 
#             'age': '–í–æ–∑—Ä–∞—Å—Ç',
#             'rating': '–†–µ–π—Ç–∏–Ω–≥',
#             'region': '–†–µ–≥–∏–æ–Ω',
#             'positions': '–ü–æ–∑–∏—Ü–∏–∏',
#             'additional_info': '–û–ø–∏—Å–∞–Ω–∏–µ',
#             'photo_id': '–§–æ—Ç–æ'
#         }

#         message = f"‚úÖ {field_names.get(field, '–ü–æ–ª–µ')} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
#         if field == 'additional_info' and value == "":
#             message = "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!"
#         elif field == 'photo_id' and value is None:
#             message = "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!"

#         await safe_edit_message(callback, message, kb.back_to_editing())
#     else:
#         await safe_edit_message(callback, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", kb.back_to_editing())

#     return success

async def update_profile_field(user_id: int, field: str, value, db) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑–µ. –ë–µ–∑ UI-–ª–æ–≥–∏–∫–∏."""
    user = await db.get_user(user_id)
    if not user or not user.get('current_game'):
        return False

    game = user['current_game']
    profile = await db.get_user_profile(user_id, game)
    if not profile:
        return False

    update_data = {
        'telegram_id': user_id,
        'game': game,
        'name': profile['name'],
        'nickname': profile['nickname'],
        'age': profile['age'],
        'rating': profile['rating'],
        'region': profile.get('region', 'eeu'),
        'positions': profile['positions'],
        'additional_info': profile['additional_info'],
        'photo_id': profile.get('photo_id')
    }

    update_data[field] = value
    return await db.update_user_profile(**update_data)

def validate_input(field: str, value, game: str = None) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if field == 'name':
        if len(value) < 2 or len(value) > settings.MAX_NAME_LENGTH:
            return False, f"‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
        if len(value.split()) < 2:
            return False, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"

    elif field == 'nickname':
        if len(value) < 2 or len(value) > settings.MAX_NICKNAME_LENGTH:
            return False, f"‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ {settings.MAX_NICKNAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"

    elif field == 'age':
        try:
            age = int(value)
            if age < settings.MIN_AGE:
                return False, f"‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ {settings.MIN_AGE}"
        except ValueError:
            return False, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"

    elif field == 'info':
        if len(value) > settings.MAX_INFO_LENGTH:
            return False, f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å–∏–º—É–º {settings.MAX_INFO_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"

    return True, ""

# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@router.callback_query(F.data == "edit_profile")
@check_ban_and_profile()
async def edit_profile(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    game = user['current_game']
    profile = await db.get_user_profile(user_id, game)

    game_name = settings.GAMES.get(game, game)
    current_info = f"üìù –¢–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ {game_name}:\n\n"
    current_info += texts.format_profile(profile, show_contact=True)
    current_info += "\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

    keyboard = kb.edit_profile_menu()

    try:
        if profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=profile['photo_id'],
                caption=current_info,
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        try:
            await callback.message.edit_text(current_info, reply_markup=keyboard)
        except:
            await callback.message.delete()
            await callback.message.answer(current_info, reply_markup=keyboard)

    await callback.answer()

@router.callback_query(F.data == "recreate_profile")
@check_ban_and_profile(require_profile=False)
async def recreate_profile(callback: CallbackQuery, state: FSMContext, db):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è)"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if not user or not user.get('current_game'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    game = user['current_game']

    if await db.has_profile(user_id, game):
        await db.delete_profile(user_id, game)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è: {user_id} –≤ {game}")

    game_name = settings.GAMES.get(game, game)

    await state.clear()
    await state.update_data(
        user_id=user_id,
        game=game,
        positions_selected=[]
    )

    from handlers.profile import ProfileForm
    await state.set_state(ProfileForm.name)

    text = f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è {game_name}\n\n{texts.QUESTIONS['name']}"

    await callback.message.delete()
    await callback.bot.send_message(
        chat_id=callback.message.chat.id,
        text=text,
        reply_markup=kb.cancel_profile_creation()
    )
    await callback.answer()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–ï–ô ====================

@router.callback_query(F.data == "edit_name")
@check_ban_and_profile()
async def edit_name(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_name)

    await safe_edit_message(callback, "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:", kb.cancel_edit())
    await callback.answer()

@router.callback_query(F.data == "edit_nickname")
@check_ban_and_profile()
async def edit_nickname(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_nickname)

    await safe_edit_message(callback, "üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:", kb.cancel_edit())
    await callback.answer()

@router.callback_query(F.data == "edit_age")
@check_ban_and_profile()
async def edit_age(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_age)

    await safe_edit_message(callback, "üéÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", kb.cancel_edit())
    await callback.answer()

@router.callback_query(F.data == "edit_rating")
@check_ban_and_profile()
async def edit_rating(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_rating)
    await safe_edit_message(callback, "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:", kb.ratings(user['current_game']))
    await callback.answer()

@router.callback_query(F.data == "edit_region")
@check_ban_and_profile()
async def edit_region(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_region)
    await safe_edit_message(callback, "üåç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:", kb.regions())
    await callback.answer()

@router.callback_query(F.data == "edit_positions")
@check_ban_and_profile()
async def edit_positions(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    profile = await db.get_user_profile(user_id, user['current_game'])
    current_positions = profile['positions'] if profile else []
    await state.update_data(
        user_id=user_id,
        game=user['current_game'],
        positions_selected=current_positions.copy(),
        original_positions=current_positions.copy()
    )
    await state.set_state(EditProfileForm.edit_positions)
    await safe_edit_message(callback, "‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", kb.positions(user['current_game'], current_positions))
    await callback.answer()

@router.callback_query(F.data == "edit_info")
@check_ban_and_profile()
async def edit_info(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_info)
    await safe_edit_message(callback, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", kb.edit_info_menu())
    await callback.answer()

@router.callback_query(F.data == "edit_photo")
@check_ban_and_profile()
async def edit_photo(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    await state.update_data(user_id=user_id, game=user['current_game'])
    await state.set_state(EditProfileForm.edit_photo)

    await safe_edit_message(
        callback,
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':",
        kb.edit_photo_menu()
    )
    await callback.answer()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================

@router.message(EditProfileForm.edit_name)
async def process_edit_name(message: Message, state: FSMContext, db):
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π")
        return

    name = message.text.strip()
    is_valid, error_msg = validate_input('name', name)
    if not is_valid:
        await message.answer(error_msg)
        return

    success = await update_profile_field(message, 'name', name, state=state, db=db)
    if success:
        await state.clear()
        await message.answer("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back_to_editing())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_nickname)
async def process_edit_nickname(message: Message, state: FSMContext, db):
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º")
        return

    nickname = message.text.strip()
    is_valid, error_msg = validate_input('nickname', nickname)
    if not is_valid:
        await message.answer(error_msg)
        return

    success = await update_profile_field(message, 'nickname', nickname, state=state, db=db)
    if success:
        await state.clear()
        await message.answer("‚úÖ –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=kb.back_to_editing())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_age)
async def process_edit_age(message: Message, state: FSMContext, db):
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ")
        return

    is_valid, error_msg = validate_input('age', message.text.strip())
    if not is_valid:
        await message.answer(error_msg)
        return

    age = int(message.text.strip())
    success = await update_profile_field(message, 'age', age, state=state, db=db)
    if success:
        await state.clear()
        await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=kb.back_to_editing())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_info)
async def process_edit_info(message: Message, state: FSMContext, db):
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
        return

    info = message.text.strip()
    is_valid, error_msg = validate_input('info', info)
    if not is_valid:
        await message.answer(error_msg)
        return

    success = await update_profile_field(message, 'additional_info', info, state=state, db=db)
    if success:
        await state.clear()
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back_to_editing())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=kb.back_to_editing())

@router.callback_query(F.data == "info_clear", EditProfileForm.edit_info)
async def clear_info(callback: CallbackQuery, state: FSMContext, db):
    success = await update_profile_field(callback, 'additional_info', "", state=state, db=db)
    await callback.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞")

@router.message(EditProfileForm.edit_photo, F.photo)
async def process_edit_photo(message: Message, state: FSMContext, db):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ photo_id."""
    photo_id = message.photo[-1].file_id

    success = await update_profile_field(message, 'photo_id', photo_id, state=state, db=db)
    if success:
        await state.clear()
        await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back_to_editing())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ", reply_markup=kb.back_to_editing())

@router.message(EditProfileForm.edit_name, ~F.text)
async def wrong_edit_name_format(message: Message):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π")

@router.message(EditProfileForm.edit_nickname, ~F.text)
async def wrong_edit_nickname_format(message: Message):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º")

@router.message(EditProfileForm.edit_age, ~F.text)
async def wrong_edit_age_format(message: Message):
    await message.answer(f"‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ {settings.MIN_AGE}")

@router.message(EditProfileForm.edit_info, ~F.text)
async def wrong_edit_info_format(message: Message):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")

@router.message(EditProfileForm.edit_photo)
async def wrong_edit_photo_format(message: Message):
    await message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏",
        reply_markup=kb.edit_photo_menu()
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ====================

@router.callback_query(F.data.startswith("rating_"), EditProfileForm.edit_rating)
async def process_edit_rating(callback: CallbackQuery, state: FSMContext, db):
    rating = callback.data.split("_")[1]
    success = await update_profile_field(callback, 'rating', rating, state, db=db)
    await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("region_"), EditProfileForm.edit_region)
async def process_edit_region(callback: CallbackQuery, state: FSMContext, db):
    region = callback.data.split("_")[1]
    success = await update_profile_field(callback, 'region', region, state, db=db)
    await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("pos_add_"), EditProfileForm.edit_positions)
async def edit_add_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[2]
    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']
    if position not in selected:
        selected.append(position)
        await state.update_data(positions_selected=selected)
    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data.startswith("pos_remove_"), EditProfileForm.edit_positions)
async def edit_remove_position(callback: CallbackQuery, state: FSMContext):
    position = callback.data.split("_")[2]
    data = await state.get_data()
    selected = data.get('positions_selected', [])
    game = data['game']
    if position in selected:
        selected.remove(position)
        await state.update_data(positions_selected=selected)
    await callback.message.edit_reply_markup(reply_markup=kb.positions(game, selected))
    await callback.answer()

@router.callback_query(F.data == "pos_done", EditProfileForm.edit_positions)
async def edit_positions_done(callback: CallbackQuery, state: FSMContext, db):
    data = await state.get_data()
    selected = data.get('positions_selected', [])
    original = data.get('original_positions', [])

    if not selected:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)
        return

    if set(selected) == set(original):
        await callback.answer("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
        await state.clear()
        await safe_edit_message(callback, "‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏", kb.back_to_editing())
        return

    await update_profile_field(callback, 'positions', selected, state, db=db)
    await callback.answer()

@router.callback_query(F.data == "pos_need", EditProfileForm.edit_positions)
async def edit_positions_need(callback: CallbackQuery):
    await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é", show_alert=True)

@router.callback_query(F.data == "delete_info", EditProfileForm.edit_info)
async def delete_info(callback: CallbackQuery, state: FSMContext):
    await update_profile_field(callback, 'additional_info', "", state)
    await callback.answer()

@router.callback_query(F.data == "photo_delete", EditProfileForm.edit_photo)
async def delete_photo(callback: CallbackQuery, state: FSMContext, db):
    success = await update_profile_field(callback, 'photo_id', None, state, db=db)
    await callback.answer("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_edit_message(callback, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", kb.back_to_editing())
    await callback.answer()

# ==================== –£–î–ê–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø ====================

@router.callback_query(F.data == "delete_profile")
@check_ban_and_profile()
async def confirm_delete_profile(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    game = user['current_game']
    game_name = settings.GAMES.get(game, game)

    text = (f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –≤ {game_name}\n\n" +
           "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n" +
           f"–í—Å–µ –ª–∞–π–∫–∏ –∏ –º–∞—Ç—á–∏ –≤ {game_name} –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")

    try:
        profile = await db.get_user_profile(user_id, game)
        if profile and profile.get('photo_id'):
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=kb.confirm_delete())
        else:
            await callback.message.edit_text(text, reply_markup=kb.confirm_delete())
    except Exception:
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=kb.confirm_delete())

    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
@check_ban_and_profile()
async def delete_profile(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    game = user['current_game']

    success = await db.delete_profile(user_id, game)

    if success:
        game_name = settings.GAMES.get(game, game)
        text = f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –≤ {game_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n"
        text += "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ª–∞–π–∫–∏ –∏ –º–∞—Ç—á–∏) —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.\n\n"
        text += "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."

        buttons = [
            [kb.InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É", callback_data="recreate_profile")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω –¥–ª—è {user_id} –≤ {game}")
    else:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        await callback.message.edit_text(text, reply_markup=kb.back())

    await callback.answer()

@router.message(EditProfileForm.edit_photo, F.photo)
async def process_edit_photo_message(message: Message, state: FSMContext, db):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ photo_id."""
    photo_id = message.photo[-1].file_id

    success = await update_profile_field(message, 'photo_id', photo_id, state=state, db=db)

    if success:
        await state.clear()
        await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.back_to_editing())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ", reply_markup=kb.back_to_editing())


@router.callback_query(F.data == "photo_delete", EditProfileForm.edit_photo)
async def process_edit_photo_delete(callback: CallbackQuery, state: FSMContext, db):
    success = await update_profile_field(callback, 'photo_id', None, state, db=db)
    await callback.answer("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ" if success else "‚ùå –û—à–∏–±–∫–∞", show_alert=not success)