import logging
from typing import Optional, List, Tuple
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.database import Database
import utils.texts as texts
import config.settings as settings

logger = logging.getLogger(__name__)
db = Database(settings.DATABASE_PATH)

# ==================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def safe_send_notification(bot: Bot, user_id: int, text: str, 
                                photo_id: str = None, keyboard: InlineKeyboardMarkup = None) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if photo_id:
            await bot.send_photo(
                chat_id=user_id,
                photo=photo_id,
                caption=text,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard
            )
        return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

def create_navigation_keyboard(buttons: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    keyboard_buttons = []
    
    for text, callback_data in buttons:
        keyboard_buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

def get_game_display_name(game: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã"""
    return settings.GAMES.get(game, game)

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ú–ê–¢–ß–ê–• ====================

async def notify_about_match(bot: Bot, user_id: int, match_user_id: int, game: str) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ"""
    try:
        match_profile = db.get_user_profile(match_user_id, game)
        game_name = get_game_display_name(game)
        
        if not match_profile:
            text = f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á –≤ {game_name}!"
            await safe_send_notification(bot, user_id, text)
            return True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        profile_text = texts.format_profile(match_profile, show_contact=True)
        text = f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á –≤ {game_name}!\n\n{profile_text}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_user = db.get_user(user_id)
        buttons = []
        
        if current_user and current_user.get('current_game') != game:
            buttons.append((f"üíñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–∞—Ç—á–∞–º –≤ {game_name}", f"switch_and_matches_{game}"))
        else:
            buttons.append(("üíñ –ú–æ–∏ –º–∞—Ç—á–∏", "my_matches"))
        
        buttons.append(("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"))
        keyboard = create_navigation_keyboard(buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await safe_send_notification(
            bot, user_id, text, match_profile.get('photo_id'), keyboard
        )
        
        if success:
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ: {e}")
        return False

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –õ–ê–ô–ö–ê–• ====================

async def notify_about_like(bot: Bot, user_id: int, game: str = None) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä—É
        if not game:
            user = db.get_user(user_id)
            game = user.get('current_game', 'dota') if user else 'dota'
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω—É–∂–Ω—É—é –∏–≥—Ä—É –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        current_user = db.get_user(user_id)
        if current_user and current_user.get('current_game') != game:
            db.switch_game(user_id, game)
            logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {game} –∏–∑-–∑–∞ –ª–∞–π–∫–∞")
        
        game_name = get_game_display_name(game)
        text = f"‚ù§Ô∏è –ö—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ {game_name}! –ó–∞–π–¥–∏—Ç–µ –≤ '–õ–∞–π–∫–∏' —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."
        
        buttons = [
            ("‚ù§Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∞–π–∫–∏", "my_likes"),
            ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
        ]
        keyboard = create_navigation_keyboard(buttons)
        
        success = await safe_send_notification(bot, user_id, text, None, keyboard)
        
        if success:
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} –¥–ª—è –∏–≥—Ä—ã {game}")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ: {e}")
        return False

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ú–û–î–ï–†–ê–¶–ò–ò ====================

async def notify_profile_deleted(bot: Bot, user_id: int, game: str) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        game_name = get_game_display_name(game)
        text = (f"‚ö†Ô∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤ {game_name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                f"üìã –ü—Ä–∏—á–∏–Ω–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
                f"‚úÖ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
                f"‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É\n"
                f"‚Ä¢ –°–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
                f"‚Ä¢ –ë—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏")
        
        buttons = [
            ("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É", "create_profile"),
            ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
        ]
        keyboard = create_navigation_keyboard(buttons)
        
        success = await safe_send_notification(bot, user_id, text, None, keyboard)
        
        if success:
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} –¥–ª—è –∏–≥—Ä—ã {game}")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False

async def notify_user_banned(bot: Bot, user_id: int, expires_at: str) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        text = (f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {expires_at[:16]} –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
                f"–í–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã\n"
                f"‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤\n"
                f"‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–∞–π–∫–∏ –∏ –º–∞—Ç—á–∏")
        
        success = await safe_send_notification(bot, user_id, text)
        
        if success:
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")
        return False

async def notify_user_unbanned(bot: Bot, user_id: int) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞"""
    try:
        text = "‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        
        buttons = [("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")]
        keyboard = create_navigation_keyboard(buttons)
        
        success = await safe_send_notification(bot, user_id, text, None, keyboard)
        
        if success:
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞: {e}")
        return False

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê ====================

async def notify_admin_new_report(bot: Bot, reporter_id: int, reported_user_id: int, game: str) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ"""
    if not settings.ADMIN_ID or settings.ADMIN_ID == 0:
        return False
    
    try:
        game_name = get_game_display_name(game)
        text = (f"üö© –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reporter_id} –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É {reported_user_id} "
                f"–≤ –∏–≥—Ä–µ {game_name}")
        
        success = await safe_send_notification(bot, settings.ADMIN_ID, text)
        
        if success:
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∂–∞–ª–æ–±–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        return False