import asyncio
import logging
from typing import Optional, List, Tuple, Dict, Any
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

import utils.texts as texts
import config.settings as settings
import keyboards.keyboards as kb

logger = logging.getLogger(__name__)

# ==================== –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ß–ï–†–ï–î–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

class NotificationQueue:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self._active_tasks = set()
        self._max_concurrent = 10  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._retry_count = 2
        
    async def add_notification(self, coro, description: str = "notification"):
        """–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if len(self._active_tasks) >= self._max_concurrent:
            # –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞
            if self._active_tasks:
                done, pending = await asyncio.wait(
                    self._active_tasks, 
                    return_when=asyncio.FIRST_COMPLETED
                )
                self._active_tasks -= done
        
        task = asyncio.create_task(self._safe_execute(coro, description))
        self._active_tasks.add(task)
        task.add_done_callback(self._active_tasks.discard)
    
    async def _safe_execute(self, coro, description: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—Ä—É—Ç–∏–Ω—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self._retry_count + 1):
            try:
                await coro
                return
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ {description} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < self._retry_count:
                    await asyncio.sleep(0.5 * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
_notification_queue = NotificationQueue()

# ==================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def get_user_interaction_state(user_id: int, db) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        cache_key = f"user_state:{user_id}"
        last_state = await db._redis.get(cache_key)
        
        busy_states = [
            'search_browsing',     # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã
            'profile_editing',     # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å
            'profile_creation',    # –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å
            'search_setup'         # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        ]
        
        if last_state in busy_states:
            return 'busy'
        
        return 'available'
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return 'available'

async def smart_notification(bot: Bot, user_id: int, text: str, 
                           quick_actions: List[Tuple[str, str]] = None, 
                           photo_id: Optional[str] = None, db=None):
    """–£–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_state = await get_user_interaction_state(user_id, db) if db else 'available'
        
        if user_state == 'busy':
            # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="dismiss_notification")]
            ])
            notification_text = f"üîî {text}"
            return await safe_send_notification(bot, user_id, notification_text, None, keyboard)
        else:
            # –ü–æ–ª–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            if quick_actions:
                keyboard = kb.create_navigation_keyboard(quick_actions)
            else:
                keyboard = kb.create_navigation_keyboard([("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")])
            return await safe_send_notification(bot, user_id, text, photo_id, keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def update_user_activity(user_id: int, state: str = None, db=None):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not db:
        return
        
    try:
        import time
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_key = f"last_activity:{user_id}"
        await db._redis.setex(activity_key, 300, str(current_time))  # 5 –º–∏–Ω—É—Ç
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
        if state:
            state_key = f"user_state:{user_id}"
            await db._redis.setex(state_key, 300, state)  # 5 –º–∏–Ω—É—Ç
            
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def safe_send_notification(
    bot: Bot,
    user_id: int,
    text: str,
    photo_id: Optional[str] = None,
    add_ok_button: bool = True
) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        keyboard = kb.notification_ok() if add_ok_button else None

        if photo_id:
            await bot.send_photo(
                chat_id=user_id,
                photo=photo_id,
                caption=text,
                reply_markup=keyboard, 
                parse_mode='HTML'
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard, 
                parse_mode='HTML'
            )
        return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

async def _send_notification_internal(
    bot: Bot,
    user_id: int, 
    text: str,
    photo_id: Optional[str] = None,
    keyboard: Optional[InlineKeyboardMarkup] = None
):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    success = await safe_send_notification(bot, user_id, text, photo_id, keyboard)
    if success:
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
    return success

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ú–ê–¢–ß–ê–• ====================

async def notify_about_match(bot: Bot, user_id: int, match_user_id: int, game: str, db) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ, –∫–∞–∫ –ª–∞–π–∫–∏)"""
    async def _notify():
        try:
            game_name = settings.GAMES.get(game, game)
            text = f"–£ –≤–∞—Å –Ω–æ–≤—ã–π –º—ç—Ç—á –≤ {game_name}! –ó–∞–π–¥–∏—Ç–µ –≤ ¬´–ú—ç—Ç—á–∏¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã."

            current_user = await db.get_user(user_id)
            quick_actions = []

            if current_user and current_user.get('current_game') != game:
                quick_actions.append((f"–ú—ç—Ç—á–∏ –≤ {game_name}", f"switch_and_matches_{game}"))
            else:
                quick_actions.append(("–ú–æ–∏ –º—ç—Ç—á–∏", "my_matches"))

            return await smart_notification(bot, user_id, text, quick_actions, None, db)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ: {e}")
            return False

    await _notification_queue.add_notification(_notify(), f"match notification to {user_id}")
    return True

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –õ–ê–ô–ö–ê–• ====================

async def notify_about_like(bot: Bot, user_id: int, game: str, db=None) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ (—É–º–Ω–æ–µ)"""
    async def _notify():
        try:
            if db is None:
                logger.error("db parameter is required for notify_about_like")
                return False

            if not game:
                user = await db.get_user(user_id)
                actual_game = user.get('current_game', 'dota') if user else 'dota'
            else:
                actual_game = game

            game_name = settings.GAMES.get(actual_game, actual_game)
            text = f"–ö—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ {game_name}! –ó–∞–π–¥–∏—Ç–µ –≤ ¬´–õ–∞–π–∫–∏¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."

            current_user = await db.get_user(user_id)
            quick_actions = []

            if current_user and current_user.get('current_game') != actual_game:
                quick_actions.append((f"–õ–∞–π–∫–∏ –≤ {game_name}", f"switch_and_likes_{actual_game}"))
            else:
                quick_actions.append(("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∞–π–∫–∏", "my_likes"))

            return await smart_notification(bot, user_id, text, quick_actions, None, db)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ: {e}")
            return False

    await _notification_queue.add_notification(_notify(), f"like notification to {user_id}")
    return True

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ú–û–î–ï–†–ê–¶–ò–ò ====================

# –û–±–Ω–æ–≤–ª—è–µ–º notify_profile_deleted, notify_user_banned, notify_user_unbanned
# –ó–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ smart_notification:

async def notify_profile_deleted(bot: Bot, user_id: int, game: str) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º (—É–º–Ω–æ–µ)"""
    async def _notify():
        try:
            game_name = settings.GAMES.get(game, game)
            text = (f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤ {game_name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É, —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–∞.")

            quick_actions = [
                ("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É", "create_profile"),
                ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
            ]

            return await smart_notification(bot, user_id, text, quick_actions, None, None)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

    await _notification_queue.add_notification(_notify(), f"profile deleted notification to {user_id}")
    return True

async def notify_user_banned(bot: Bot, user_id: int, expires_at: datetime) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–º–Ω–æ–µ)"""
    async def _notify():
        try:
            formatted_date = expires_at.strftime("%d.%m.%Y %H:%M (UTC)")
            text = (f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {formatted_date} –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
                    f"–í–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            
            # –î–ª—è –±–∞–Ω–æ–≤ –Ω–µ –¥–∞–µ–º –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            return await smart_notification(bot, user_id, text, None, None, None)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")
            return False

    await _notification_queue.add_notification(_notify(), f"ban notification to {user_id}")
    return True

async def notify_user_unbanned(bot: Bot, user_id: int) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞ (—É–º–Ω–æ–µ)"""
    async def _notify():
        try:
            text = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            quick_actions = [("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")]
            return await smart_notification(bot, user_id, text, quick_actions, None, None)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞: {e}")
            return False

    await _notification_queue.add_notification(_notify(), f"unban notification to {user_id}")
    return True

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê ====================

async def notify_admin_new_report(bot: Bot, reporter_id: int, reported_user_id: int, game: str) -> bool:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ"""
    if not settings.ADMIN_ID or settings.ADMIN_ID == 0:
        return False

    try:
        game_name = settings.GAMES.get(game, game)
        text = (f"üö© –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reporter_id} –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É {reported_user_id} "
                f"–≤ –∏–≥—Ä–µ {game_name}")
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏ OK
        success = await safe_send_notification(bot, settings.ADMIN_ID, text, add_ok_button=False)
        if success:
            logger.info("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∂–∞–ª–æ–±–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return success
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        return False

# ==================== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def get_notification_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return {
        "active_notifications": len(_notification_queue._active_tasks),
        "max_concurrent": _notification_queue._max_concurrent
    }

async def wait_all_notifications():
    """–î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è graceful shutdown)"""
    if _notification_queue._active_tasks:
        logger.info(f"–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(_notification_queue._active_tasks)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        await asyncio.gather(*_notification_queue._active_tasks, return_exceptions=True)
        logger.info("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")