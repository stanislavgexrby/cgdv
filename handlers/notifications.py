import logging
from aiogram import Bot
from database.database import Database
import keyboards.keyboards as kb
import utils.texts as texts
import config.settings as settings

logger = logging.getLogger(__name__)
db = Database(settings.DATABASE_PATH)

async def notify_about_match(bot: Bot, user_id: int, match_user_id: int):
    try:
        user = db.get_user(user_id)
        if not user:
            return

        game = user['current_game']
        match_profile = db.get_user_profile(match_user_id, game)

        if match_profile and match_profile.get('name'):
            profile_text = texts.format_profile(match_profile, show_contact=True)
            game_name = settings.GAMES.get(game, game)
            text = f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á –≤ {game_name}!\n\n{profile_text}"

            if match_profile.get('photo_id'):
                await bot.send_photo(
                    chat_id=user_id,
                    photo=match_profile['photo_id'],
                    caption=text,
                    reply_markup=kb.back()
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=kb.back()
                )
        else:
            game_name = settings.GAMES.get(game, game)
            text = f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á –≤ {game_name}!"
            await bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=kb.back()
            )

        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ: {e}")

async def notify_about_like(bot: Bot, user_id: int, game: str = None):
    try:
        if not game:
            user = db.get_user(user_id)
            if user:
                game = user.get('current_game', 'dota')
            else:
                game = 'dota'

        current_user = db.get_user(user_id)
        if current_user and current_user.get('current_game') != game:
            db.switch_game(user_id, game)
            logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {game} –∏–∑-–∑–∞ –ª–∞–π–∫–∞")

        game_name = settings.GAMES.get(game, game)

        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="‚ù§Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∞–π–∫–∏", callback_data="my_likes")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        text = f"‚ù§Ô∏è –ö—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ {game_name}! –ó–∞–π–¥–∏—Ç–µ –≤ '–õ–∞–π–∫–∏' —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."

        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=keyboard
        )
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} –¥–ª—è –∏–≥—Ä—ã {game}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ: {e}")

async def notify_profile_deleted(bot: Bot, user_id: int, game: str):
    try:
        game_name = settings.GAMES.get(game, game)
        text = f"‚ö†Ô∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤ {game_name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n\n"
        text += f"üìã –ü—Ä–∏—á–∏–Ω–∞: –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
        text += f"‚úÖ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
        text += f"‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É\n"
        text += f"‚Ä¢ –°–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
        text += f"‚Ä¢ –ë—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏"

        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É", callback_data="create_profile")],
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=keyboard
        )
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} –¥–ª—è –∏–≥—Ä—ã {game}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

async def notify_user_banned(bot: Bot, user_id: int, expires_at: str):
    try:
        text = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {expires_at[:16]} –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n" \
               f"–í–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ:\n" \
               f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã\n" \
               f"‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤\n" \
               f"‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏\n" \
               f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–∞–π–∫–∏ –∏ –º–∞—Ç—á–∏"

        await bot.send_message(
            chat_id=user_id,
            text=text
        )
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")

async def notify_user_unbanned(bot: Bot, user_id: int):
    try:
        text = "‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."

        keyboard = kb.InlineKeyboardMarkup(inline_keyboard=[
            [kb.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=keyboard
        )
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞: {e}")