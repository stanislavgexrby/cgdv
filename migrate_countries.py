#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É —Å—Ç—Ä–∞–Ω
"""

import asyncio
import asyncpg
import os
import sys
from dotenv import load_dotenv

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–æ–≤—ã–º —Å—Ç—Ä–∞–Ω–∞–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
REGION_MAPPING = {
    "eeu": "russia",    # –í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞ -> –†–æ—Å—Å–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    "weu": "poland",    # –ó–∞–ø–∞–¥–Ω–∞—è –ï–≤—Ä–æ–ø–∞ -> –ü–æ–ª—å—à–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)  
    "asia": "china",    # –ê–∑–∏—è -> –ö–∏—Ç–∞–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    "any": "any"        # –ù–µ —É–∫–∞–∑–∞–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ —É–∫–∞–∑–∞–Ω
}

async def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    load_dotenv()
    
    db_host = os.getenv('DB_HOST', 'localhost')
    db_port = os.getenv('DB_PORT', '5432')
    db_name = os.getenv('DB_NAME', 'teammates')
    db_user = os.getenv('DB_USER', 'teammates_user')
    db_password = os.getenv('DB_PASSWORD', '')
    
    if not db_password:
        print("‚ùå DB_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None
    
    connection_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    
    try:
        conn = await asyncpg.connect(connection_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

async def migrate_regions_to_countries():
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å—Ç—Ä–∞–Ω"""
    
    conn = await get_db_connection()
    if not conn:
        return False
    
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–∞–Ω—ã...")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å —Å—Ç–∞—Ä—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        profiles = await conn.fetch("""
            SELECT telegram_id, game, region 
            FROM profiles 
            WHERE region IS NOT NULL
            ORDER BY telegram_id, game
        """)
        
        if not profiles:
            print("‚úÖ –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            return True
        
        migrated_count = 0
        unchanged_count = 0
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π:")
        print("-" * 70)
        
        async with conn.transaction():
            for profile in profiles:
                telegram_id = profile['telegram_id']
                game = profile['game']
                old_region = profile['region']
                
                # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω —É–∂–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–µ—Å—Ç—å –≤ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                new_countries = ['russia', 'belarus', 'ukraine', 'kazakhstan', 'any']
                if old_region in new_countries:
                    unchanged_count += 1
                    continue
                    
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ä–µ–≥–∏–æ–Ω, –º–∏–≥—Ä–∏—Ä—É–µ–º
                if old_region in REGION_MAPPING:
                    new_country = REGION_MAPPING[old_region]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    await conn.execute("""
                        UPDATE profiles 
                        SET region = $1 
                        WHERE telegram_id = $2 AND game = $3
                    """, new_country, telegram_id, game)
                    
                    game_name = "Dota 2" if game == 'dota' else "CS2"
                    print(f"ID {telegram_id} ({game_name}): '{old_region}' ‚Üí '{new_country}'")
                    migrated_count += 1
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "any"
                    await conn.execute("""
                        UPDATE profiles 
                        SET region = 'any' 
                        WHERE telegram_id = $1 AND game = $2
                    """, telegram_id, game)
                    
                    game_name = "Dota 2" if game == 'dota' else "CS2"
                    print(f"ID {telegram_id} ({game_name}): –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π '{old_region}' ‚Üí 'any'")
                    migrated_count += 1
        
        print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {migrated_count}")
        print(f"üìä –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {unchanged_count}")
        print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {migrated_count + unchanged_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    finally:
        await conn.close()

async def reset_all_regions_to_any():
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ 'any' - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–±–µ—Ä—É—Ç —Å—Ç—Ä–∞–Ω—ã –∑–∞–Ω–æ–≤–æ"""
    
    conn = await get_db_connection()
    if not conn:
        return False
    
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ 'any'...")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –Ω–µ —Ä–∞–≤–Ω—ã–º–∏ 'any'
        profiles = await conn.fetch("""
            SELECT telegram_id, game, region 
            FROM profiles 
            WHERE region IS NOT NULL AND region != 'any'
            ORDER BY telegram_id, game
        """)
        
        if not profiles:
            print("‚úÖ –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Å–±—Ä–æ—Å–∞ - –≤—Å–µ —É–∂–µ –≤ 'any'")
            return True
        
        reset_count = 0
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Å–±—Ä–æ—Å–∞:")
        print("-" * 70)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        for profile in profiles[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            game_name = "Dota 2" if profile['game'] == 'dota' else "CS2"
            print(f"ID {profile['telegram_id']} ({game_name}): '{profile['region']}' ‚Üí 'any'")
        
        if len(profiles) > 10:
            print(f"... –∏ –µ—â–µ {len(profiles) - 10} –ø—Ä–æ—Ñ–∏–ª–µ–π")
        
        print("-" * 70)
        confirm = input(f"\n‚ùì –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        
        if confirm != '–¥–∞':
            print("‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
            return False
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å
        async with conn.transaction():
            result = await conn.execute("""
                UPDATE profiles 
                SET region = 'any' 
                WHERE region IS NOT NULL AND region != 'any'
            """)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            reset_count = int(result.split()[-1])
        
        print(f"\n‚úÖ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –°–±—Ä–æ—à–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {reset_count}")
        print(f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {e}")
        return False
    
    finally:
        await conn.close()

async def show_current_regions():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    
    conn = await get_db_connection()
    if not conn:
        return False
    
    try:
        print("üìä –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤:")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        stats = await conn.fetch("""
            SELECT region, game, COUNT(*) as count
            FROM profiles 
            WHERE region IS NOT NULL
            GROUP BY region, game
            ORDER BY region, game
        """)
        
        if not stats:
            print("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return True
        
        current_region = None
        for stat in stats:
            region = stat['region'] or 'NULL'
            game_name = "Dota 2" if stat['game'] == 'dota' else "CS2"
            count = stat['count']
            
            if region != current_region:
                if current_region is not None:
                    print()
                print(f"üìç {region}:")
                current_region = region
            
            print(f"  {game_name}: {count} –ø—Ä–æ—Ñ–∏–ª–µ–π")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = await conn.fetchval("SELECT COUNT(*) FROM profiles")
        print(f"\nüìà –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {total}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False
    
    finally:
        await conn.close()

async def main():
    print("üåç –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–∞–Ω—ã")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤")
        print("2. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω—ã –≤ —Å—Ç—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print("3. –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ 'any' (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-3): ").strip()
        
        if choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == "1":
            await show_current_regions()
        elif choice == "2":
            print("\nüîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º...")
            success = await migrate_regions_to_countries()
            if success:
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        elif choice == "3":
            print("\nüîÑ –ó–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤...")
            success = await reset_all_regions_to_any()
            if success:
                print("‚úÖ –°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    asyncio.run(main())