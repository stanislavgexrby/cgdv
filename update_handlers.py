#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è handlers —Ñ–∞–π–ª–æ–≤
–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ async Database
"""

import os
import re
from pathlib import Path

def update_handler_file(file_path: Path):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ handler —Ñ–∞–π–ª–∞"""
    print(f"üîÑ –û–±–Ω–æ–≤–ª—è—é {file_path.name}...")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # 1. –ó–∞–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞
        content = re.sub(
            r'from database\.database import Database.*\n',
            '',
            content
        )
        content = re.sub(
            r'db = Database\(.*?\)\n',
            '',
            content
        )
        
        # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
        if 'from main import get_database' not in content:
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ (–ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
            import_pattern = r'(import config\.settings as settings)'
            replacement = r'\1\nfrom main import get_database'
            content = re.sub(import_pattern, replacement, content)
        
        # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ db = get_database() –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ë–î
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤—ã–∑–æ–≤–∞–º–∏ db.method()
        function_pattern = r'(async def|def) ([^(]+)\([^)]*\):'
        
        def add_db_getter(match):
            func_def = match.group(0)
            func_name = match.group(2)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if func_name in ['register_handlers', '__init__', 'signal_handler']:
                return func_def
            
            return func_def
        
        # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        content = content.replace(
            'def check_ban_and_profile',
            '# TODO: –û–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è async\ndef check_ban_and_profile'
        )
        
        # 4. –ó–∞–º–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –ë–î –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ (–±–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏)
        db_methods = [
            'get_user', 'create_user', 'switch_game', 'get_user_profile', 
            'has_profile', 'update_user_profile', 'delete_profile',
            'get_potential_matches', 'add_search_skip', 'add_like',
            'get_likes_for_user', 'get_matches', 'skip_like',
            'is_user_banned', 'get_user_ban', 'add_ban', 'unban_user',
            'add_report', 'get_pending_reports', 'process_report'
        ]
        
        for method in db_methods:
            # –ó–∞–º–µ–Ω—è–µ–º db.method( –Ω–∞ await db.method(
            pattern = f'db\.{method}\('
            replacement = f'await db.{method}('
            content = re.sub(pattern, replacement, content)
        
        # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ await –∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –≤—ã–∑–æ–≤–∞–º
        content = re.sub(r'= db\.', '= await db.', content)
        content = re.sub(r'if db\.', 'if await db.', content)
        content = re.sub(r'elif db\.', 'elif await db.', content)
        
        # 6. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è await
        content = re.sub(r'await await', 'await', content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if content != original_content:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            backup_path = file_path.with_suffix(file_path.suffix + '.backup')
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(original_content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"  ‚úÖ {file_path.name} –æ–±–Ω–æ–≤–ª–µ–Ω (–±—ç–∫–∞–ø: {backup_path.name})")
            return True
        else:
            print(f"  ‚ÑπÔ∏è {file_path.name} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return False
    
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path.name}: {e}")
        return False

def create_manual_todo_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    todo_content = """# TODO: –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ handlers —Ñ–∞–π–ª–æ–≤

–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ update_handlers.py –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é:

## 1. –í –ö–ê–ñ–î–û–ú handlers/*.py —Ñ–∞–π–ª–µ (–∫—Ä–æ–º–µ __init__.py):

### –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ –ö–ê–ñ–î–û–ô —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ë–î:
```python
db = get_database()
```

### –ü—Ä–∏–º–µ—Ä:
```python
# –ë–´–õ–û:
@router.callback_query(F.data == "create_profile")
async def start_create_profile(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    # ...

# –°–¢–ê–õ–û:
@router.callback_query(F.data == "create_profile")  
async def start_create_profile(callback: CallbackQuery, state: FSMContext):
    db = get_database()  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
    user_id = callback.from_user.id
    # ...
```

## 2. –°–¥–µ–ª–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ async:

### –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞:
```python
def my_function(callback: CallbackQuery):
```

### –°–¥–µ–ª–∞—Ç—å:
```python
async def my_function(callback: CallbackQuery):
```

## 3. –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤ handlers/basic.py:

–ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é check_ban_and_profile –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ –ø—Ä–∏–º–µ—Ä—É –≤ 
–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.

## 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
```bash
python main.py
```

## –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å:
- handlers/basic.py
- handlers/profile.py  
- handlers/profile_editing.py
- handlers/search.py
- handlers/likes.py

## –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º:
1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–æ–≤: *.backup
2. –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""
    
    with open('TODO_handlers.md', 'w', encoding='utf-8') as f:
        f.write(todo_content)
    
    print("üìã –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª TODO_handlers.md —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ handlers —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    handlers_dir = Path("handlers")
    if not handlers_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ handlers –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ handlers
    python_files = list(handlers_dir.glob("*.py"))
    python_files = [f for f in python_files if f.name != "__init__.py"]
    
    if not python_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã handlers —Ñ–∞–π–ª—ã")
        return
    
    updated_count = 0
    for file_path in python_files:
        if update_handler_file(file_path):
            updated_count += 1
    
    # –°–æ–∑–¥–∞–µ–º TODO —Ñ–∞–π–ª
    create_manual_todo_file()
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}/{len(python_files)} —Ñ–∞–π–ª–æ–≤")
    print("\nüîß –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
    print("  ‚úÖ –£–±—Ä–∞–Ω—ã —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã Database")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç get_database")
    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω await –∫ –≤—ã–∑–æ–≤–∞–º –ë–î")
    
    print("\nüìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é:")
    print("  üî∏ –î–æ–±–∞–≤–∏—Ç—å db = get_database() –≤ —Ñ—É–Ω–∫—Ü–∏–∏")
    print("  üî∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ async")
    print("  üî∏ –û–±–Ω–æ–≤–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã")
    print("\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: TODO_handlers.md")
    
    print("\nüöÄ –ü–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    print("  python main.py")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        print("–û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º")