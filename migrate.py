import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

async def migrate():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è role –≤ —Ç–∞–±–ª–∏—Ü—É profiles"""
    
    db_host = os.getenv('DB_HOST', 'localhost')
    db_port = os.getenv('DB_PORT', '5432')
    db_name = os.getenv('DB_NAME', 'teammates')
    db_user = os.getenv('DB_USER', 'teammates_user')
    db_password = os.getenv('DB_PASSWORD', '')
    
    connection_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    
    conn = await asyncpg.connect(connection_url)
    
    try:
        print("\n" + "="*70)
        print("üîß –ú–ò–ì–†–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è 'role' –≤ —Ç–∞–±–ª–∏—Ü—É 'profiles'")
        print("="*70)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã 'profiles'...")
        columns = await conn.fetch("""
            SELECT column_name, data_type 
            FROM information_schema.columns
            WHERE table_name = 'profiles'
            ORDER BY ordinal_position
        """)
        
        print("\nüìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:")
        has_role = False
        for col in columns:
            print(f"  - {col['column_name']}: {col['data_type']}")
            if col['column_name'] == 'role':
                has_role = True
        
        if has_role:
            print("\n‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ 'role' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # 2. –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
        count = await conn.fetchval("SELECT COUNT(*) FROM profiles")
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
        
        # 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
        print("–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ 'role' —Å —Ç–∏–ø–æ–º TEXT")
        print("–í—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–Ω–∫–µ—Ç–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å 'player'")
        confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ").strip().lower()
        
        if confirm != 'yes':
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        print("\n‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        await conn.execute("""
            ALTER TABLE profiles 
            ADD COLUMN role TEXT DEFAULT 'player' NOT NULL
        """)
        print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'role' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–Ω–∫–µ—Ç–∞–º —Ä–æ–ª—å 'player'
        updated = await conn.execute("""
            UPDATE profiles 
            SET role = 'player' 
            WHERE role IS NULL OR role = ''
        """)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated}")
        
        # 5. –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_profiles_game_role 
            ON profiles(game, role)
        """)
        print("‚úÖ –ò–Ω–¥–µ–∫—Å idx_profiles_game_role —Å–æ–∑–¥–∞–Ω")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        new_structure = await conn.fetch("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns
            WHERE table_name = 'profiles'
            ORDER BY ordinal_position
        """)
        
        print("\nüìä –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã 'profiles':")
        for col in new_structure:
            marker = "‚ú® NEW" if col['column_name'] == 'role' else ""
            print(f"  - {col['column_name']}: {col['data_type']} "
                  f"(nullable: {col['is_nullable']}, default: {col['column_default']}) {marker}")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        role_stats = await conn.fetch("""
            SELECT role, COUNT(*) as count 
            FROM profiles 
            GROUP BY role
        """)
        
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º:")
        for stat in role_stats:
            print(f"   {stat['role']}: {stat['count']}")
        
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise
    
    finally:
        await conn.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    try:
        asyncio.run(migrate())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)