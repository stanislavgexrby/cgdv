#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–π –∏–∑ –ø–æ–ª—è name –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö
–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ (–∏–º—è) –∏–∑ –ø–æ–ª—è name
"""

import asyncio
import asyncpg
import os
import sys
from dotenv import load_dotenv

async def migrate_names():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∏–º–µ–Ω - —É–±–∏—Ä–∞–µ–º —Ñ–∞–º–∏–ª–∏–∏"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–º–µ–Ω...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    db_host = os.getenv('DB_HOST', 'localhost')
    db_port = os.getenv('DB_PORT', '5432')
    db_name = os.getenv('DB_NAME', 'teammates')
    db_user = os.getenv('DB_USER', 'teammates_user')
    db_password = os.getenv('DB_PASSWORD', '')
    
    if not db_password:
        print("‚ùå DB_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    connection_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = await asyncpg.connect(connection_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å
        profiles_to_change = await conn.fetch("""
            SELECT telegram_id, game, name 
            FROM profiles 
            WHERE name LIKE '% %'
            ORDER BY telegram_id, game
        """)
        
        if not profiles_to_change:
            print("‚úÖ –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            await conn.close()
            return True
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(profiles_to_change)} –ø—Ä–æ—Ñ–∏–ª–µ–π —Å —Ñ–∞–º–∏–ª–∏—è–º–∏:")
        print("-" * 60)
        for profile in profiles_to_change:
            old_name = profile['name']
            new_name = old_name.split()[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
            game_name = "Dota 2" if profile['game'] == 'dota' else "CS2"
            print(f"ID {profile['telegram_id']} ({game_name}): '{old_name}' ‚Üí '{new_name}'")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print("-" * 60)
        confirm = input("\n‚ùì –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        
        if confirm != '–¥–∞':
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await conn.close()
            return False
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        print("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        
        async with conn.transaction():
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
            result = await conn.execute("""
                UPDATE profiles 
                SET name = TRIM(SPLIT_PART(name, ' ', 1))
                WHERE name LIKE '% %'
            """)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            updated_count = int(result.split()[-1])
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        remaining_with_spaces = await conn.fetchval("""
            SELECT COUNT(*) FROM profiles WHERE name LIKE '% %'
        """)
        
        await conn.close()
        
        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}")
        print(f"   –û—Å—Ç–∞–ª–æ—Å—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: {remaining_with_spaces}")
        
        if remaining_with_spaces == 0:
            print("üéâ –í—Å–µ —Ñ–∞–º–∏–ª–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        else:
            print("‚ö†Ô∏è  –ï—Å—Ç—å –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        return True
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

async def show_current_names():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–º–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    print("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∏–º–µ–Ω –≤ –±–∞–∑–µ...")
    
    load_dotenv()
    
    db_host = os.getenv('DB_HOST', 'localhost')
    db_port = os.getenv('DB_PORT', '5432')
    db_name = os.getenv('DB_NAME', 'teammates')
    db_user = os.getenv('DB_USER', 'teammates_user')
    db_password = os.getenv('DB_PASSWORD', '')
    
    if not db_password:
        print("‚ùå DB_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    connection_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    
    try:
        conn = await asyncpg.connect(connection_url)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–∞
        all_names = await conn.fetch("""
            SELECT telegram_id, game, name 
            FROM profiles 
            ORDER BY telegram_id, game
        """)
        
        names_with_spaces = [p for p in all_names if ' ' in p['name']]
        names_single = [p for p in all_names if ' ' not in p['name']]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–µ–Ω:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(all_names)}")
        print(f"   –° —Ñ–∞–º–∏–ª–∏—è–º–∏ (–ø—Ä–æ–±–µ–ª–∞–º–∏): {len(names_with_spaces)}")
        print(f"   –¢–æ–ª—å–∫–æ –∏–º–µ–Ω–∞: {len(names_single)}")
        
        if names_with_spaces:
            print(f"\nüìã –ü—Ä–æ—Ñ–∏–ª–∏ —Å —Ñ–∞–º–∏–ª–∏—è–º–∏ ({len(names_with_spaces)}):")
            for profile in names_with_spaces[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                game_name = "Dota 2" if profile['game'] == 'dota' else "CS2"
                print(f"   ID {profile['telegram_id']} ({game_name}): '{profile['name']}'")
            
            if len(names_with_spaces) > 10:
                print(f"   ... –∏ –µ—â–µ {len(names_with_spaces) - 10}")
        
        await conn.close()
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

async def main():
    print("üîß –ú–∏–≥—Ä–∞—Ü–∏—è –∏–º–µ–Ω - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–π")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–º–µ–Ω–∞")
        print("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é (—É–¥–∞–ª–∏—Ç—å —Ñ–∞–º–∏–ª–∏–∏)")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == "1":
            await show_current_names()
        elif choice == "2":
            success = await migrate_names()
            if success:
                print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
                break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)