#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL –∏ Redis
"""

import asyncio
import asyncpg
import redis.asyncio as redis
import os
import sys
from dotenv import load_dotenv

async def test_postgresql():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL...")
    try:
        connection_url = (f"postgresql://"
                         f"{os.getenv('DB_USER')}:"
                         f"{os.getenv('DB_PASSWORD')}@"
                         f"{os.getenv('DB_HOST')}:"
                         f"{os.getenv('DB_PORT')}/"
                         f"{os.getenv('DB_NAME')}")
        
        conn = await asyncpg.connect(connection_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        version = await conn.fetchval('SELECT version()')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        await conn.execute('CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY)')
        await conn.execute('DROP TABLE test_table')
        
        await conn.close()
        
        print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –í–µ—Ä—Å–∏—è: {version.split()[1]}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ .env")
        print("   - –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        return False

async def test_redis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis...")
    try:
        redis_url = f"redis://{os.getenv('REDIS_HOST')}:{os.getenv('REDIS_PORT')}/{os.getenv('REDIS_DB', 0)}"
        
        r = redis.from_url(redis_url, decode_responses=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await r.ping()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å/—á–∏—Ç–∞—Ç—å
        await r.set('test_key', 'test_value', ex=10)
        value = await r.get('test_key')
        assert value == 'test_value'
        await r.delete('test_key')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = await r.info()
        
        await r.close()
        
        print(f"‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –í–µ—Ä—Å–∏—è: {info['redis_version']}")
        print(f"   –ü–∞–º—è—Ç—å: {info['used_memory_human']}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ Redis")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ .env")
        return False

async def test_database_classes():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from database.database import Database
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        await db.init()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        test_user_id = 999999999
        test_game = "dota"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.create_user(test_user_id, "test_user", test_game)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(test_user_id)
        assert user is not None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        await db.update_user_profile(
            test_user_id, test_game, "Test User", "testuser", 
            25, "legend", "eeu", ["pos1"], "Test description"
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = await db.get_user_profile(test_user_id, test_game)
        assert profile is not None
        assert profile['name'] == "Test User"
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await db.delete_profile(test_user_id, test_game)
        
        await db.close()
        
        print("‚úÖ –ö–ª–∞—Å—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –ë–î: {e}")
        return False

def check_env_vars():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = {
        'BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'DB_HOST': '–•–æ—Å—Ç PostgreSQL',
        'DB_PORT': '–ü–æ—Ä—Ç PostgreSQL', 
        'DB_NAME': '–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        'DB_USER': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PostgreSQL',
        'DB_PASSWORD': '–ü–∞—Ä–æ–ª—å PostgreSQL',
        'REDIS_HOST': '–•–æ—Å—Ç Redis',
        'REDIS_PORT': '–ü–æ—Ä—Ç Redis'
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value or value in ['your_bot_token_here', 'password', 'your_password']:
            missing_vars.append(f"   {var} - {description}")
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(var)
        print("\n   –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª!")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

async def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π TeammateBot")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_env_vars():
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    pg_ok = await test_postgresql()
    redis_ok = await test_redis()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_classes_ok = False
    if pg_ok and redis_ok:
        db_classes_ok = await test_database_classes()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   PostgreSQL: {'‚úÖ' if pg_ok else '‚ùå'}")
    print(f"   Redis: {'‚úÖ' if redis_ok else '‚ùå'}")
    print(f"   –ö–ª–∞—Å—Å—ã –ë–î: {'‚úÖ' if db_classes_ok else '‚ùå'}")
    print("-" * 50)
    
    if pg_ok and redis_ok and db_classes_ok:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞:")
        print("   python main.py")
    else:
        print("üí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("\nüîß –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        if not pg_ok:
            print("   - docker-compose up -d (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ PostgreSQL)")
            print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DB_* –≤ .env —Ñ–∞–π–ª–µ")
        if not redis_ok:
            print("   - docker-compose up -d (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ Redis)")
            print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ REDIS_* –≤ .env —Ñ–∞–π–ª–µ")
        if not db_classes_ok:
            print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ database/*.py")
            print("   - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install asyncpg redis")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")