#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ TeammateBot
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path
from datetime import datetime, timedelta
import re

def check_logs_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ —Å –ª–æ–≥–∞–º–∏"""
    logs_dir = Path("logs")
    if not logs_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Ö–æ—Ç—è –±—ã —Ä–∞–∑: python main.py")
        return False
    return True

def show_log_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤"""
    logs_dir = Path("logs")
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í")
    print("=" * 50)
    
    log_files = {
        "bot.log": "–û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏",
        "errors.log": "–û—à–∏–±–∫–∏",
        "daily.log": "–î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏"
    }
    
    total_size = 0
    for log_file, description in log_files.items():
        log_path = logs_dir / log_file
        if log_path.exists():
            size_mb = log_path.stat().st_size / (1024 * 1024)
            total_size += size_mb
            mtime = datetime.fromtimestamp(log_path.stat().st_mtime)
            print(f"üìÑ {log_file:15} - {description}")
            print(f"   –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω: {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
            try:
                with open(log_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    if lines:
                        last_line = lines[-1].strip()
                        if len(last_line) > 80:
                            last_line = last_line[:77] + "..."
                        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_line}")
            except Exception:
                pass
            print()
        else:
            print(f"üìÑ {log_file:15} - –ù–ï –ù–ê–ô–î–ï–ù")
    
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: {total_size:.1f} MB")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    archive_files = list(logs_dir.glob("*.log.*"))
    if archive_files:
        print(f"\nüì¶ –ê—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(archive_files)}")
        archive_size = sum(f.stat().st_size for f in archive_files) / (1024 * 1024)
        print(f"üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–æ–≤: {archive_size:.1f} MB")

def tail_log(log_name="bot.log", lines=50):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
    logs_dir = Path("logs")
    log_path = logs_dir / log_name
    
    if not log_path.exists():
        print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª {log_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –∏–∑ {log_name}:")
    print("=" * 80)
    
    try:
        if sys.platform.startswith('win'):
            # Windows
            subprocess.run(['powershell', f'Get-Content "{log_path}" -Tail {lines}'])
        else:
            # Linux/Mac
            subprocess.run(['tail', f'-{lines}', str(log_path)])
    except FileNotFoundError:
        # Fallback –¥–ª—è —Å–∏—Å—Ç–µ–º –±–µ–∑ tail
        with open(log_path, 'r', encoding='utf-8') as f:
            lines_list = f.readlines()
            for line in lines_list[-lines:]:
                print(line.rstrip())

def follow_log(log_name="bot.log"):
    """–°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–∞–Ω–∞–ª–æ–≥ tail -f)"""
    logs_dir = Path("logs")
    log_path = logs_dir / log_name
    
    if not log_path.exists():
        print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª {log_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üëÅÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {log_name} –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
    print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 80)
    
    try:
        if sys.platform.startswith('win'):
            # Windows - –∏—Å–ø–æ–ª—å–∑—É–µ–º PowerShell
            subprocess.run(['powershell', f'Get-Content "{log_path}" -Wait -Tail 10'])
        else:
            # Linux/Mac - –∏—Å–ø–æ–ª—å–∑—É–µ–º tail -f
            subprocess.run(['tail', '-f', str(log_path)])
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ tail –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python logs.py --tail")

def search_logs(pattern, log_name="bot.log", context_lines=2):
    """–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º"""
    logs_dir = Path("logs")
    log_path = logs_dir / log_name
    
    if not log_path.exists():
        print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª {log_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üîç –ü–æ–∏—Å–∫ '{pattern}' –≤ {log_name}:")
    print("=" * 80)
    
    try:
        with open(log_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        matches_found = 0
        for i, line in enumerate(lines):
            if re.search(pattern, line, re.IGNORECASE):
                matches_found += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                start = max(0, i - context_lines)
                end = min(len(lines), i + context_lines + 1)
                
                print(f"\nüìç –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ {matches_found} (—Å—Ç—Ä–æ–∫–∞ {i+1}):")
                for j in range(start, end):
                    prefix = ">>> " if j == i else "    "
                    print(f"{prefix}{lines[j].rstrip()}")
        
        if matches_found == 0:
            print("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_found}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def analyze_errors():
    """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"""
    logs_dir = Path("logs")
    
    print("üîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö")
    print("=" * 50)
    
    error_files = ["errors.log", "bot.log"]
    total_errors = 0
    
    for log_name in error_files:
        log_path = logs_dir / log_name
        if not log_path.exists():
            continue
            
        print(f"\nüìÑ –ê–Ω–∞–ª–∏–∑ {log_name}:")
        
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            error_patterns = {
                "ERROR": r"ERROR",
                "CRITICAL": r"CRITICAL",
                "Exception": r"Exception",
                "Traceback": r"Traceback",
                "Database errors": r"(PostgreSQL|Redis|asyncpg).*error",
                "Telegram errors": r"(aiogram|telegram).*error"
            }
            
            file_errors = 0
            for error_type, pattern in error_patterns.items():
                matches = re.findall(pattern, content, re.IGNORECASE)
                count = len(matches)
                if count > 0:
                    file_errors += count
                    print(f"   {error_type}: {count}")
            
            total_errors += file_errors
            if file_errors == 0:
                print("   ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    print(f"\nüìä –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {total_errors}")
    
    if total_errors > 0:
        print("\nüí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python logs.py --search 'ERROR|CRITICAL'")

def clean_old_logs(days=30):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    logs_dir = Path("logs")
    
    if not logs_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    cutoff_date = datetime.now() - timedelta(days=days)
    
    # –ò—â–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (*.log.*)
    archive_files = list(logs_dir.glob("*.log.*"))
    
    deleted_count = 0
    deleted_size = 0
    
    for archive_file in archive_files:
        file_date = datetime.fromtimestamp(archive_file.stat().st_mtime)
        
        if file_date < cutoff_date:
            file_size = archive_file.stat().st_size
            try:
                archive_file.unlink()
                deleted_count += 1
                deleted_size += file_size
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {archive_file.name} ({file_size/1024/1024:.1f} MB)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {archive_file.name}: {e}")
    
    if deleted_count == 0:
        print(f"‚úÖ –°—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print(f"\nüßπ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        print(f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {deleted_size/1024/1024:.1f} MB")

def main():
    parser = argparse.ArgumentParser(description="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ TeammateBot")
    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤')
    parser.add_argument('--tail', metavar='N', type=int, default=50, help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)')
    parser.add_argument('--follow', action='store_true', help='–°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
    parser.add_argument('--search', metavar='PATTERN', help='–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º')
    parser.add_argument('--log', metavar='FILE', default='bot.log', help='–ò–º—è –ª–æ–≥ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é bot.log)')
    parser.add_argument('--errors', action='store_true', help='–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫')
    parser.add_argument('--clean', metavar='DAYS', type=int, help='–£–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤
    if not check_logs_exist():
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if args.stats:
        show_log_stats()
    elif args.follow:
        follow_log(args.log)
    elif args.search:
        search_logs(args.search, args.log)
    elif args.errors:
        analyze_errors()
    elif args.clean:
        clean_old_logs(args.clean)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        tail_log(args.log, args.tail)

if __name__ == "__main__":
    main()