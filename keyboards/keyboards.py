from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List
import config.settings as settings

def game_selection() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ Dota 2", callback_data="game_dota")],
        [InlineKeyboardButton(text="üî´ CS2", callback_data="game_cs")]
    ])

def main_menu(has_profile: bool = False, current_game: str = None) -> InlineKeyboardMarkup:
    buttons = []

    if has_profile:
        buttons.extend([
            [InlineKeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="view_profile")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")],
            [InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫–∏", callback_data="my_likes")],
            [InlineKeyboardButton(text="üíñ –ú–∞—Ç—á–∏", callback_data="my_matches")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="delete_profile")]
        ])
    else:
        buttons.append([InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="create_profile")])

    if current_game:
        other_game = "cs" if current_game == "dota" else "dota"
        other_name = settings.GAMES[other_game]
        buttons.append([InlineKeyboardButton(text=f"üîÑ {other_name}", callback_data=f"switch_{other_game}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def ratings(game: str) -> InlineKeyboardMarkup:
    buttons = []
    for key, name in settings.RATINGS[game].items():
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"rating_{key}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def positions(game: str, selected: List[str] = None) -> InlineKeyboardMarkup:
    if selected is None:
        selected = []

    buttons = []
    for key, name in settings.POSITIONS[game].items():
        if key in selected:
            text = f"‚úÖ {name}"
            callback = f"pos_remove_{key}"
        else:
            text = f"‚ùå {name}"
            callback = f"pos_add_{key}"

        buttons.append([InlineKeyboardButton(text=text, callback_data=callback)])

    # buttons.append([InlineKeyboardButton(text="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="separator")])

    if selected:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="pos_done")])
    else:
        buttons.append([InlineKeyboardButton(text="‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é", callback_data="pos_need")])

    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def search_filters() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")],
        [InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="filter_rating")],
        [InlineKeyboardButton(text="‚öîÔ∏è –ü–æ–∑–∏—Ü–∏—è", callback_data="filter_position")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def profile_actions(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{user_id}"),
            InlineKeyboardButton(text="üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{user_id}")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def like_actions(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç", callback_data=f"like_back_{user_id}"),
            InlineKeyboardButton(text="üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_like_{user_id}")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def skip_photo() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def cancel_profile_creation() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def confirm_delete() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="main_menu")
        ]
    ])

def back() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def back_to_editing() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="edit_profile")]
    ])

def back_to_search() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∏—Å–∫", callback_data="search")]
    ])

def contact(username: str = None) -> InlineKeyboardMarkup:
    buttons = []

    if username:
        buttons.append([InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{username}")])

    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def edit_profile_menu() -> InlineKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")],
        [InlineKeyboardButton(text="üéÆ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data="edit_nickname")],
        [InlineKeyboardButton(text="üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
        [InlineKeyboardButton(text="üèÜ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="edit_rating")],
        [InlineKeyboardButton(text="‚öîÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏", callback_data="edit_positions")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_info")],
        [InlineKeyboardButton(text="üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photo")],
        [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="create_profile")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def cancel_edit() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])

def edit_photo_menu() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="delete_photo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])

def position_filter_menu(game: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    buttons = []
    for key, name in settings.POSITIONS[game].items():
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"pos_filter_{key}")])

    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_filter")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def subscribe_channel_keyboard(game: str, from_switch: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã"""
    if game == "dota":
        channel = settings.DOTA_CHANNEL
        button_text = "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Dota 2 –∫–∞–Ω–∞–ª"
    elif game == "cs":
        channel = settings.CS_CHANNEL
        button_text = "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ CS2 –∫–∞–Ω–∞–ª"
    else:
        return back()
    
    # –£–±–∏—Ä–∞–µ–º @ –∏–∑ –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å, –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL
    channel_username = channel.lstrip('@')
    
    buttons = [
        [InlineKeyboardButton(text=button_text, url=f"https://t.me/{channel_username}")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"game_{game}")]
    ]
    
    # –†–∞–∑–Ω—ã–µ callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if from_switch:
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    else:
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_games")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)