from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Tuple
import config.settings as settings

# ==================== –û–°–ù–û–í–ù–´–ï –ú–ï–ù–Æ ====================

def game_selection() -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä –∏–≥—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ Dota 2", callback_data="game_dota")],
        [InlineKeyboardButton(text="üî´ CS2", callback_data="game_cs")]
    ])

def main_menu(has_profile: bool = False, current_game: str = None) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    buttons = []

    if has_profile:
        buttons.extend([
            [InlineKeyboardButton(text="–ü–æ–∏—Å–∫", callback_data="search")],
            [InlineKeyboardButton(text="–ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="view_profile")],
            [InlineKeyboardButton(text="–õ–∞–π–∫–∏", callback_data="my_likes")],
            [InlineKeyboardButton(text="–ú—ç—Ç—á–∏", callback_data="my_matches")]
        ])
    else:
        buttons.append([InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="create_profile")])

    if current_game:
        other_game = "cs" if current_game == "dota" else "dota"
        other_name = settings.GAMES[other_game]
        buttons.append([InlineKeyboardButton(text=f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ {other_name}", callback_data=f"switch_{other_game}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def view_profile_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="recreate_profile")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="delete_profile")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])


def back() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def subscribe_channel_keyboard(game: str, from_switch: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    if game == "dota":
        channel = settings.DOTA_CHANNEL
        button_text = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Dota 2 –∫–∞–Ω–∞–ª"
    elif game == "cs":
        channel = settings.CS_CHANNEL
        button_text = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ CS2 –∫–∞–Ω–∞–ª"
    else:
        return back()

    channel_username = channel.lstrip('@')

    buttons = [
        [InlineKeyboardButton(text=button_text, url=f"https://t.me/{channel_username}")],
        [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"game_{game}")]
    ]

    if from_switch:
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")])
    else:
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_games")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def notification_ok() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ OK –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="dismiss_notification")]
    ])

# ==================== –°–û–ó–î–ê–ù–ò–ï –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–ï–ô ====================

def ratings(game: str, for_profile: bool = True, with_cancel: bool = False) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    buttons = []

    for key, name in settings.RATINGS[game].items():
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"rating_{key}")])

    if for_profile:
        buttons.append([InlineKeyboardButton(text="–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="rating_any")])

    if with_cancel:
        # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º cancel_edit
        cancel_callback = "cancel_edit" if not for_profile else "cancel"
        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def regions(for_profile: bool = True, with_cancel: bool = False) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞"""
    buttons = []

    for key, name in settings.REGIONS.items():
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"region_{key}")])

    if for_profile:
        buttons.append([InlineKeyboardButton(text="–õ—é–±–æ–π —Ä–µ–≥–∏–æ–Ω", callback_data="region_any")])

    if with_cancel:
        # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º cancel_edit
        cancel_callback = "cancel_edit" if not for_profile else "cancel"
        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def positions(game: str, selected: List[str] = None, for_profile: bool = True, editing: bool = False) -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–π"""
    if selected is None:
        selected = []

    buttons = []

    for key, name in settings.POSITIONS[game].items():
        if key in selected:
            text = f"‚úÖ {name}"
            callback = f"pos_remove_{key}"
        else:
            text = f"{name}"
            callback = f"pos_add_{key}"

        buttons.append([InlineKeyboardButton(text=text, callback_data=callback)])

    if editing and "any" in selected:
        buttons.append([InlineKeyboardButton(text="‚úÖ –õ—é–±–∞—è –ø–æ–∑–∏—Ü–∏—è", callback_data="pos_remove_any")])

    # –ö–Ω–æ–ø–∫–∞ "–õ—é–±–∞—è –ø–æ–∑–∏—Ü–∏—è" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if editing and "any" not in selected:
        buttons.append([InlineKeyboardButton(text="–õ—é–±–∞—è –ø–æ–∑–∏—Ü–∏—è", callback_data="pos_add_any")])
    elif for_profile and not selected:
        buttons.append([InlineKeyboardButton(text="–õ—é–±–∞—è –ø–æ–∑–∏—Ü–∏—è", callback_data="pos_any")])

    if selected:
        buttons.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="pos_done")])
    elif for_profile:
        buttons.append([InlineKeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é", callback_data="pos_need")])
    else:
        buttons.append([InlineKeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é", callback_data="pos_need")])

    if editing:
        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")])
    else:
        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def skip_photo() -> InlineKeyboardMarkup:
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def skip_info() -> InlineKeyboardMarkup:
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_info")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def cancel_profile_creation() -> InlineKeyboardMarkup:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–ï–ô ====================

def edit_profile_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data="edit_nickname")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="edit_rating")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω", callback_data="edit_region")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏", callback_data="edit_positions")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_info")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photo")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def cancel_edit() -> InlineKeyboardMarkup:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])

def back_to_editing() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="back_to_editing")]
    ])

def edit_info_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="delete_info")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])

def edit_photo_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="delete_photo")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])

def confirm_delete() -> InlineKeyboardMarkup:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="confirm_delete"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="main_menu")
        ]
    ])

# ==================== –ü–û–ò–°–ö ====================

def search_filters() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")],
        [InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥", callback_data="filter_rating")],
        [InlineKeyboardButton(text="–ü–æ–∑–∏—Ü–∏—è", callback_data="filter_position")],
        [InlineKeyboardButton(text="–†–µ–≥–∏–æ–Ω", callback_data="filter_region")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def ratings_filter(game: str) -> InlineKeyboardMarkup:
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
    buttons = []

    for key, name in settings.RATINGS[game].items():
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"rating_{key}")])

    buttons.extend([
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="rating_reset")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_filter")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def regions_filter() -> InlineKeyboardMarkup:
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    buttons = []

    for key, name in settings.REGIONS.items():
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"region_filter_{key}")])

    buttons.extend([
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="region_reset")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_filter")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def position_filter_menu(game: str) -> InlineKeyboardMarkup:
    """–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    buttons = []

    for key, name in settings.POSITIONS[game].items():
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"pos_filter_{key}")])

    buttons.extend([
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="position_reset")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_filter")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def profile_actions(user_id: int) -> InlineKeyboardMarkup:
    """–î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –≤ –ø–æ–∏—Å–∫–µ"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–õ–∞–π–∫", callback_data=f"like_{user_id}"),
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{user_id}")
        ],
        [InlineKeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{user_id}")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

# ==================== –õ–ê–ô–ö–ò –ò –ú–ê–¢–ß–ò ====================

def like_actions(user_id: int) -> InlineKeyboardMarkup:
    """–î–µ–π—Å—Ç–≤–∏—è —Å –ª–∞–π–∫–æ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–õ–∞–π–∫ –≤ –æ—Ç–≤–µ—Ç", callback_data=f"like_back_{user_id}"),
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_like_{user_id}")
        ],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def contact(username: str = None) -> InlineKeyboardMarkup:
    """–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    buttons = []

    if username:
        buttons.append([InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{username}")])

    buttons.append([InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_navigation_keyboard(buttons: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    keyboard_buttons = [[InlineKeyboardButton(text=t, callback_data=cb)] for t, cb in buttons]
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

# ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================

def admin_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="–ñ–∞–ª–æ–±—ã", callback_data="admin_reports")],
        [InlineKeyboardButton(text="–ë–∞–Ω—ã", callback_data="admin_bans")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def admin_report_actions(reported_user_id: int, report_id: int, current_index: int = 0, total_count: int = 1) -> InlineKeyboardMarkup:
    """–î–µ–π—Å—Ç–≤–∏—è —Å –∂–∞–ª–æ–±–æ–π"""
    buttons = [
        [
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"rep:del:{report_id}:{reported_user_id}"),
            InlineKeyboardButton(text="üö´ –ë–∞–Ω 7–¥", callback_data=f"rep:ban:{report_id}:{reported_user_id}:7")
        ],
        [
            InlineKeyboardButton(text="üö´ –ë–∞–Ω 30–¥", callback_data=f"rep:ban:{report_id}:{reported_user_id}:30")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"rep:ignore:{report_id}")],
    ]
    
    if total_count > 1:
        nav_buttons = []
        if current_index > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"rep:nav:prev:{current_index}"))
        if current_index < total_count - 1:
            nav_buttons.append(InlineKeyboardButton(text= "–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"rep:nav:next:{current_index}"))
        if nav_buttons:
            buttons.append(nav_buttons)
    
    buttons.append([InlineKeyboardButton(text="üè† –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_back")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_back_menu() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_back")]
    ])

def admin_ban_actions_with_nav(user_id: int, current_index: int, total_count: int) -> InlineKeyboardMarkup:
    """–î–µ–π—Å—Ç–≤–∏—è —Å –±–∞–Ω–æ–º —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    buttons = [
        [InlineKeyboardButton(text="–°–Ω—è—Ç—å –±–∞–Ω", callback_data=f"admin_unban_{user_id}")]
    ]

    if total_count > 1:
        nav_buttons = []
        if current_index > 0:
            nav_buttons.append(InlineKeyboardButton(
                text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π", 
                callback_data=f"admin_ban_prev_{current_index}"
            ))
        if current_index < total_count - 1:
            nav_buttons.append(InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∏–π", 
                callback_data=f"admin_ban_next_{current_index}"
            ))
        if nav_buttons:
            buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton(text="–ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_stats")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)