#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö TeammateBot
"""

import asyncio
import asyncpg
import redis.asyncio as redis
import os
import sys
from dotenv import load_dotenv
from datetime import datetime, timedelta

class DatabaseCleaner:
    def __init__(self):
        self.pg_pool = None
        self.redis = None

    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        load_dotenv()
        
        # PostgreSQL
        db_host = os.getenv('DB_HOST', 'localhost')
        db_port = os.getenv('DB_PORT', '5432')
        db_name = os.getenv('DB_NAME', 'teammates')
        db_user = os.getenv('DB_USER', 'teammates_user')
        db_password = os.getenv('DB_PASSWORD', '')
        
        if not db_password:
            raise ValueError("DB_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        connection_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
        self.pg_pool = await asyncpg.create_pool(connection_url, min_size=1, max_size=5)
        
        # Redis
        redis_host = os.getenv('REDIS_HOST', 'localhost')
        redis_port = os.getenv('REDIS_PORT', '6379')
        redis_db = os.getenv('REDIS_DB', '0')
        redis_url = f"redis://{redis_host}:{redis_port}/{redis_db}"
        
        self.redis = redis.from_url(redis_url, decode_responses=True)
        await self.redis.ping()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ Redis —É—Å–ø–µ—à–Ω–æ")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        if self.pg_pool:
            await self.pg_pool.close()
        if self.redis:
            await self.redis.close()

    async def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î"""
        async with self.pg_pool.acquire() as conn:
            stats = {}
            
            tables = [
                ('users', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),
                ('profiles', '–ê–Ω–∫–µ—Ç—ã'),
                ('likes', '–õ–∞–π–∫–∏'),
                ('matches', '–ú–∞—Ç—á–∏'),
                ('reports', '–ñ–∞–ª–æ–±—ã'),
                ('bans', '–ë–∞–Ω—ã'),
                ('search_skipped', '–ü—Ä–æ–ø—É—Å–∫–∏ –≤ –ø–æ–∏—Å–∫–µ'),
                ('skipped_likes', '–ü—Ä–æ–ø—É—Å–∫–∏ –ª–∞–π–∫–æ–≤')
            ]
            
            for table, name in tables:
                try:
                    count = await conn.fetchval(f"SELECT COUNT(*) FROM {table}")
                    stats[name] = count or 0
                except Exception as e:
                    stats[name] = f"–û—à–∏–±–∫–∞: {e}"
            
            # Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            try:
                redis_keys = await self.redis.dbsize()
                stats['Redis –∫–ª—é—á–∏'] = redis_keys
            except Exception as e:
                stats['Redis –∫–ª—é—á–∏'] = f"–û—à–∏–±–∫–∞: {e}"
            
            return stats

    async def clear_redis(self):
        """–û—á–∏—Å—Ç–∫–∞ Redis"""
        try:
            await self.redis.flushdb()
            print("‚úÖ Redis –æ—á–∏—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}")
            return False

    async def clear_test_users(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å ID > 10000000)"""
        async with self.pg_pool.acquire() as conn:
            async with conn.transaction():
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    await conn.execute("DELETE FROM search_skipped WHERE user_id > 10000000 OR skipped_user_id > 10000000")
                    await conn.execute("DELETE FROM skipped_likes WHERE user_id > 10000000 OR skipped_user_id > 10000000")
                    await conn.execute("DELETE FROM reports WHERE reporter_id > 10000000 OR reported_user_id > 10000000")
                    await conn.execute("DELETE FROM bans WHERE user_id > 10000000")
                    await conn.execute("DELETE FROM matches WHERE user1 > 10000000 OR user2 > 10000000")
                    await conn.execute("DELETE FROM likes WHERE from_user > 10000000 OR to_user > 10000000")
                    await conn.execute("DELETE FROM profiles WHERE telegram_id > 10000000")
                    result = await conn.execute("DELETE FROM users WHERE telegram_id > 10000000")
                    
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {result}")
                    return True
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
                    return False

    async def clear_old_data(self, days: int = 30):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        async with self.pg_pool.acquire() as conn:
            async with conn.transaction():
                try:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∂–∞–ª–æ–±—ã
                    result1 = await conn.execute(
                        "DELETE FROM reports WHERE created_at < $1 AND status != 'pending'",
                        cutoff_date
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–∞–Ω—ã
                    result2 = await conn.execute(
                        "DELETE FROM bans WHERE expires_at < NOW()"
                    )
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –ø–æ–∏—Å–∫–µ
                    result3 = await conn.execute(
                        "DELETE FROM search_skipped WHERE last_skipped < $1",
                        cutoff_date
                    )
                    
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    print(f"   –ñ–∞–ª–æ–±—ã: {result1}")
                    print(f"   –ò—Å—Ç–µ–∫—à–∏–µ –±–∞–Ω—ã: {result2}")
                    print(f"   –°—Ç–∞—Ä—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏: {result3}")
                    return True
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                    return False

    async def clear_specific_user(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.pg_pool.acquire() as conn:
            async with conn.transaction():
                try:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await conn.execute("DELETE FROM search_skipped WHERE user_id = $1 OR skipped_user_id = $1", user_id)
                    await conn.execute("DELETE FROM skipped_likes WHERE user_id = $1 OR skipped_user_id = $1", user_id)
                    await conn.execute("DELETE FROM reports WHERE reporter_id = $1 OR reported_user_id = $1", user_id)
                    await conn.execute("DELETE FROM bans WHERE user_id = $1", user_id)
                    await conn.execute("DELETE FROM matches WHERE user1 = $1 OR user2 = $1", user_id)
                    await conn.execute("DELETE FROM likes WHERE from_user = $1 OR to_user = $1", user_id)
                    await conn.execute("DELETE FROM profiles WHERE telegram_id = $1", user_id)
                    result = await conn.execute("DELETE FROM users WHERE telegram_id = $1", user_id)
                    
                    # –û—á–∏—â–∞–µ–º Redis –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        patterns = [f"profile:{user_id}:*", f"search:{user_id}:*", f"rate_limit:{user_id}:*"]
                        for pattern in patterns:
                            keys = await self.redis.keys(pattern)
                            if keys:
                                await self.redis.delete(*keys)
                    except Exception as redis_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {redis_error}")
                    
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω: {result}")
                    return True
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    return False

    async def full_cleanup(self):
        """–ü–û–õ–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        async with self.pg_pool.acquire() as conn:
            async with conn.transaction():
                try:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                    tables = [
                        'search_skipped',
                        'skipped_likes', 
                        'reports',
                        'bans',
                        'matches',
                        'likes',
                        'profiles',
                        'users'
                    ]
                    
                    for table in tables:
                        result = await conn.execute(f"DELETE FROM {table}")
                        print(f"   {table}: {result}")
                    
                    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ PostgreSQL —É–¥–∞–ª–µ–Ω—ã")
                    
                    # –û—á–∏—â–∞–µ–º Redis
                    await self.clear_redis()
                    return True
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
                    return False

    async def show_menu(self):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        while True:
            print("\n" + "="*50)
            print("üßπ –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• TeammateBot")
            print("="*50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.get_stats()
            print("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for name, count in stats.items():
                print(f"   {name}: {count}")
            
            print("\nüîß –û–ø—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏:")
            print("1. –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Redis (–∫—ç—à)")
            print("2. –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID > 10M)")
            print("3. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (30+ –¥–Ω–µ–π)")
            print("4. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("5. –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)")
            print("6. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            print("0. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-6): ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "1":
                await self.clear_redis()
            elif choice == "2":
                if self.confirm_action("—É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                    await self.clear_test_users()
            elif choice == "3":
                days = input("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
                try:
                    days = int(days) if days else 30
                    if self.confirm_action(f"—É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π"):
                        await self.clear_old_data(days)
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
            elif choice == "4":
                user_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
                try:
                    user_id = int(user_id)
                    if self.confirm_action(f"–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"):
                        await self.clear_specific_user(user_id)
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif choice == "5":
                print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã!")
                if self.confirm_action("–ü–û–õ–ù–û–°–¢–¨–Æ –û–ß–ò–°–¢–ò–¢–¨ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", double_check=True):
                    await self.full_cleanup()
            elif choice == "6":
                continue  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è")

    def confirm_action(self, action: str, double_check: bool = False) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        print(f"\n‚ö†Ô∏è  –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å {action}")
        
        if double_check:
            first = input("–í–≤–µ–¥–∏—Ç–µ '–î–ê' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
            if first != '–î–ê':
                print("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return False
            
            second = input("–í–≤–µ–¥–∏—Ç–µ '–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ' –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
            if second != '–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ':
                print("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return False
        else:
            confirm = input("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip().lower()
            if confirm != '–¥–∞':
                print("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return False
        
        return True

async def main():
    cleaner = DatabaseCleaner()
    
    try:
        await cleaner.init()
        await cleaner.show_menu()
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await cleaner.close()

if __name__ == "__main__":
    asyncio.run(main())