import os
import json
import logging

from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv(), override=True)

logger = logging.getLogger(__name__)

def _parse_admin_ids(raw: str) -> set[int]:
    ids = set()
    for chunk in (raw or "").replace(" ", "").split(","):
        if not chunk:
            continue
        try:
            ids.add(int(chunk))
        except ValueError:
            pass
    return ids

ADMIN_IDS: set[int] = _parse_admin_ids(os.getenv("ADMIN_ID", ""))

def is_admin(user_id: int) -> bool:
    return int(user_id) in ADMIN_IDS

BOT_TOKEN = os.getenv("BOT_TOKEN", "")

admin_id_str = os.getenv("ADMIN_ID", "0")
try:
    if admin_id_str and admin_id_str.isdigit():
        ADMIN_ID = int(admin_id_str)
    else:
        ADMIN_ID = 0
except (ValueError, TypeError):
    ADMIN_ID = 0

ASSETS_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'assets')
PHOTO_CACHE_FILE = os.path.join(ASSETS_DIR, 'photo_cache.json')

MENU_PHOTOS = {
    'default': os.path.join(ASSETS_DIR, 'main_menu.png'),
    'dota': os.path.join(ASSETS_DIR, 'dota2.png'),
    'cs': os.path.join(ASSETS_DIR, 'cs2.png')
}

def load_photo_cache():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ—à file_id –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(PHOTO_CACHE_FILE):
            with open(PHOTO_CACHE_FILE, 'r') as f:
                return json.load(f)
    except Exception:
        pass
    return {}

def save_photo_cache(cache):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–µ—à file_id –≤ —Ñ–∞–π–ª"""
    try:
        os.makedirs(ASSETS_DIR, exist_ok=True)
        with open(PHOTO_CACHE_FILE, 'w') as f:
            json.dump(cache, f)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ —Ñ–æ—Ç–æ: {e}")

_photo_cache = load_photo_cache()

def get_cached_photo_id(photo_key: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id"""
    return _photo_cache.get(photo_key)

def cache_photo_id(photo_key: str, file_id: str):
    """–ö–µ—à–∏—Ä–æ–≤–∞—Ç—å file_id"""
    _photo_cache[photo_key] = file_id
    save_photo_cache(_photo_cache)

DOTA_CHANNEL = os.getenv('DOTA_CHANNEL_ID')
CS_CHANNEL = os.getenv('CS_CHANNEL_ID')
CHECK_SUBSCRIPTION = os.getenv("CHECK_SUBSCRIPTION", "true").lower() == "true"

DATABASE_PATH = os.getenv("DATABASE_PATH", "data/teammates.db")

MAX_NAME_LENGTH = 50
MAX_NICKNAME_LENGTH = 30
MAX_INFO_LENGTH = 500
MIN_AGE = 0
MAX_AGE = 100

GAMES = {
    "dota": "Dota 2",
    "cs": "CS2"
}

RATINGS = {
    "dota": {
        "herald": "Herald (0-770)",
        "guardian": "Guardian (770-1540)", 
        "crusader": "Crusader (1540-2310)",
        "archon": "Archon (2310-3080)",
        "legend": "Legend (3080-3850)",
        "ancient": "Ancient (3850-4620)",
        "divine": "Divine (4620-5620)",
        "immortal1": "Immortal (5620-7000)",
        "immortal2": "Immortal (7000-9000)",
        "immortal3": "Immortal (9000-11000)",
        "immortal4": "Immortal (11000-13000)",
        "immortal5": "Immortal (13000+)"
    },
    "cs": {
        "1": "FACEIT Level 1 (100-500)",
        "2": "FACEIT Level 2 (501-750)",
        "3": "FACEIT Level 3 (751-900)",
        "4": "FACEIT Level 4 (901-1050)",
        "5": "FACEIT Level 5 (1051-1200)",
        "6": "FACEIT Level 6 (1201-1350)",
        "7": "FACEIT Level 7 (1351-1530)",
        "8": "FACEIT Level 8 (1531-1750)",
        "9": "FACEIT Level 9 (1751-2000)",
        "10": "FACEIT Level 10 (2001-2400)",
        "10_plus": "FACEIT Level 10 (2401-2800)",
        "10_advanced": "FACEIT Level 10 (2801-3200)",
        "10_elite": "FACEIT Level 10 (3201-3500)",
        "pro": "FACEIT Level 10 (3500+)"
    }
}

POSITIONS = {
    "dota": {
        "pos1": "Carry",
        "pos2": "Midlaner", 
        "pos3": "Offlaner",
        "pos4": "Soft-Support",
        "pos5": "Hard-Support"
    },
    "cs": {
        "support": "Support",
        "sniper": "Sniper", 
        "lurker": "Lurker",
        "entry": "Entry-Fragger",
        "igl": "IGL"
    }
}

MAIN_COUNTRIES = {
    "russia": "üá∑üá∫ –†–æ—Å—Å–∏—è",
    "belarus": "üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å", 
    "ukraine": "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞",
    "kazakhstan": "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"
}

COUNTRIES_DICT = {
    # –°–ù–ì
    "russia": "üá∑üá∫ –†–æ—Å—Å–∏—è",
    "belarus": "üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å",
    "ukraine": "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", 
    "kazakhstan": "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
    "armenia": "üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è",
    "azerbaijan": "üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω",
    "georgia": "üá¨üá™ –ì—Ä—É–∑–∏—è",
    "moldova": "üá≤üá© –ú–æ–ª–¥–æ–≤–∞",
    "kyrgyzstan": "üá∞üá¨ –ö–∏—Ä–≥–∏–∑–∏—è",
    "tajikistan": "üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω",
    "turkmenistan": "üáπüá≤ –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω",
    "uzbekistan": "üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω",
    
    # –ï–≤—Ä–æ–ø–∞
    "poland": "üáµüá± –ü–æ–ª—å—à–∞",
    "germany": "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è",
    "france": "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è",
    "italy": "üáÆüáπ –ò—Ç–∞–ª–∏—è",
    "spain": "üá™üá∏ –ò—Å–ø–∞–Ω–∏—è",
    "uk": "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
    "netherlands": "üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
    "sweden": "üá∏üá™ –®–≤–µ—Ü–∏—è",
    "norway": "üá≥üá¥ –ù–æ—Ä–≤–µ–≥–∏—è",
    "finland": "üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è",
    "denmark": "üá©üá∞ –î–∞–Ω–∏—è",
    "czech": "üá®üáø –ß–µ—Ö–∏—è",
    "slovakia": "üá∏üá∞ –°–ª–æ–≤–∞–∫–∏—è",
    "hungary": "üá≠üá∫ –í–µ–Ω–≥—Ä–∏—è",
    "romania": "üá∑üá¥ –†—É–º—ã–Ω–∏—è",
    "bulgaria": "üáßüá¨ –ë–æ–ª–≥–∞—Ä–∏—è",
    "croatia": "üá≠üá∑ –•–æ—Ä–≤–∞—Ç–∏—è",
    "serbia": "üá∑üá∏ –°–µ—Ä–±–∏—è",
    "bosnia": "üáßüá¶ –ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞",
    "montenegro": "üá≤üá™ –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è",
    "albania": "üá¶üá± –ê–ª–±–∞–Ω–∏—è",
    "macedonia": "üá≤üá∞ –°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è",
    "slovenia": "üá∏üáÆ –°–ª–æ–≤–µ–Ω–∏—è",
    "lithuania": "üá±üáπ –õ–∏—Ç–≤–∞",
    "latvia": "üá±üáª –õ–∞—Ç–≤–∏—è",
    "estonia": "üá™üá™ –≠—Å—Ç–æ–Ω–∏—è",
    
    # –ê–∑–∏—è
    "china": "üá®üá≥ –ö–∏—Ç–∞–π",
    "japan": "üáØüáµ –Ø–ø–æ–Ω–∏—è",
    "south_korea": "üá∞üá∑ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è",
    "india": "üáÆüá≥ –ò–Ω–¥–∏—è",
    "thailand": "üáπüá≠ –¢–∞–∏–ª–∞–Ω–¥",
    "vietnam": "üáªüá≥ –í—å–µ—Ç–Ω–∞–º",
    "singapore": "üá∏üá¨ –°–∏–Ω–≥–∞–ø—É—Ä",
    "malaysia": "üá≤üáæ –ú–∞–ª–∞–π–∑–∏—è",
    "indonesia": "üáÆüá© –ò–Ω–¥–æ–Ω–µ–∑–∏—è",
    "philippines": "üáµüá≠ –§–∏–ª–∏–ø–ø–∏–Ω—ã",
    "turkey": "üáπüá∑ –¢—É—Ä—Ü–∏—è",
    "israel": "üáÆüá± –ò–∑—Ä–∞–∏–ª—å",
    "iran": "üáÆüá∑ –ò—Ä–∞–Ω",
    "mongolia": "üá≤üá≥ –ú–æ–Ω–≥–æ–ª–∏—è",
    
    # –ê–º–µ—Ä–∏–∫–∞
    "usa": "üá∫üá∏ –°–®–ê",
    "canada": "üá®üá¶ –ö–∞–Ω–∞–¥–∞",
    "mexico": "üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞",
    "brazil": "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è",
    "argentina": "üá¶üá∑ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞",
    "chile": "üá®üá± –ß–∏–ª–∏",
    "colombia": "üá®üá¥ –ö–æ–ª—É–º–±–∏—è",
    "peru": "üáµüá™ –ü–µ—Ä—É",
    "venezuela": "üáªüá™ –í–µ–Ω–µ—Å—É—ç–ª–∞",
    "ecuador": "üá™üá® –≠–∫–≤–∞–¥–æ—Ä",
    "uruguay": "üá∫üáæ –£—Ä—É–≥–≤–∞–π",
    
    # –ê—Ñ—Ä–∏–∫–∞ –∏ –û–∫–µ–∞–Ω–∏—è
    "australia": "üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è",
    "new_zealand": "üá≥üáø –ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è",
    "south_africa": "üáøüá¶ –Æ–ê–†",
    "egypt": "üá™üá¨ –ï–≥–∏–ø–µ—Ç"
}

def find_country_by_name(search_name: str) -> str:
    """–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)"""
    search_name = search_name.lower().strip()
    
    alternative_names = {
        '—Ä–æ—Å—Å–∏—è': 'russia',
        '–±–µ–ª–∞—Ä—É—Å—å': 'belarus',
        '–±–µ–ª–æ—Ä—É—Å—Å–∏—è': 'belarus',
        '—É–∫—Ä–∞–∏–Ω–∞': 'ukraine',
        '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω': 'kazakhstan',
        '–∞—Ä–º–µ–Ω–∏—è': 'armenia',
        '–∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω': 'azerbaijan',
        '–≥—Ä—É–∑–∏—è': 'georgia',
        '–º–æ–ª–¥–æ–≤–∞': 'moldova',
        '–º–æ–ª–¥–∞–≤–∏—è': 'moldova',
        '–∫–∏—Ä–≥–∏–∑–∏—è': 'kyrgyzstan',
        '–∫—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω': 'kyrgyzstan',
        '—Ç–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω': 'tajikistan',
        '—Ç—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω': 'turkmenistan',
        '—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω': 'uzbekistan',
        '–ø–æ–ª—å—à–∞': 'poland',
        '–≥–µ—Ä–º–∞–Ω–∏—è': 'germany',
        '—Ñ—Ä–∞–Ω—Ü–∏—è': 'france',
        '–∏—Ç–∞–ª–∏—è': 'italy',
        '–∏—Å–ø–∞–Ω–∏—è': 'spain',
        '–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è': 'uk',
        '–∞–Ω–≥–ª–∏—è': 'uk',
        '–Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—ã': 'netherlands',
        '–≥–æ–ª–ª–∞–Ω–¥–∏—è': 'netherlands',
        '—à–≤–µ—Ü–∏—è': 'sweden',
        '–Ω–æ—Ä–≤–µ–≥–∏—è': 'norway',
        '—Ñ–∏–Ω–ª—è–Ω–¥–∏—è': 'finland',
        '–¥–∞–Ω–∏—è': 'denmark',
        '—á–µ—Ö–∏—è': 'czech',
        '—Å–ª–æ–≤–∞–∫–∏—è': 'slovakia',
        '–≤–µ–Ω–≥—Ä–∏—è': 'hungary',
        '—Ä—É–º—ã–Ω–∏—è': 'romania',
        '–±–æ–ª–≥–∞—Ä–∏—è': 'bulgaria',
        '—Ö–æ—Ä–≤–∞—Ç–∏—è': 'croatia',
        '—Å–µ—Ä–±–∏—è': 'serbia',
        '–∫–∏—Ç–∞–π': 'china',
        '—è–ø–æ–Ω–∏—è': 'japan',
        '–∫–æ—Ä–µ—è': 'south_korea',
        '—é–∂–Ω–∞—è –∫–æ—Ä–µ—è': 'south_korea',
        '–∏–Ω–¥–∏—è': 'india',
        '—Ç—É—Ä—Ü–∏—è': 'turkey',
        '–∏–∑—Ä–∞–∏–ª—å': 'israel',
        '—Å—à–∞': 'usa',
        '–∞–º–µ—Ä–∏–∫–∞': 'usa',
        '–∫–∞–Ω–∞–¥–∞': 'canada',
        '–º–µ–∫—Å–∏–∫–∞': 'mexico',
        '–±—Ä–∞–∑–∏–ª–∏—è': 'brazil',
        '–∞—Ä–≥–µ–Ω—Ç–∏–Ω–∞': 'argentina',
        '–∞–≤—Å—Ç—Ä–∞–ª–∏—è': 'australia',
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        'russia': 'russia',
        'belarus': 'belarus',
        'ukraine': 'ukraine',
        'kazakhstan': 'kazakhstan',
        'armenia': 'armenia',
        'azerbaijan': 'azerbaijan',
        'georgia': 'georgia',
        'moldova': 'moldova',
        'poland': 'poland',
        'germany': 'germany',
        'france': 'france',
        'italy': 'italy',
        'spain': 'spain',
        'uk': 'uk',
        'united kingdom': 'uk',
        'england': 'uk',
        'netherlands': 'netherlands',
        'holland': 'netherlands',
        'sweden': 'sweden',
        'norway': 'norway',
        'finland': 'finland',
        'denmark': 'denmark',
        'czech': 'czech',
        'slovakia': 'slovakia',
        'hungary': 'hungary',
        'romania': 'romania',
        'bulgaria': 'bulgaria',
        'croatia': 'croatia',
        'serbia': 'serbia',
        'china': 'china',
        'japan': 'japan',
        'south korea': 'south_korea',
        'korea': 'south_korea',
        'india': 'india',
        'turkey': 'turkey',
        'israel': 'israel',
        'usa': 'usa',
        'america': 'usa',
        'united states': 'usa',
        'canada': 'canada',
        'mexico': 'mexico',
        'brazil': 'brazil',
        'argentina': 'argentina',
        'australia': 'australia'
    }
    
    if search_name in alternative_names:
        country_key = alternative_names[search_name]
        return country_key if country_key in COUNTRIES_DICT else None
    
    for key, value in COUNTRIES_DICT.items():
        country_name = value.split(' ', 1)[1].lower() if ' ' in value else value.lower()
        if search_name in country_name or country_name.startswith(search_name):
            return key
    
    return None

GOALS = {
    "publics": "–ü–∞–±–ª–∏–∫–∏",
    "tournaments": "–¢—É—Ä–Ω–∏—Ä—ã",
    "communication": "–û–±—â–µ–Ω–∏–µ",
}

MAIN_MENU_PHOTO_DOTA = ""
MAIN_MENU_PHOTO_CS = ""
MAIN_MENU_PHOTO_DEFAULT = ""

def get_main_menu_photo(game: str = None) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–≥—Ä—ã"""
    if game == "dota":
        return MAIN_MENU_PHOTO_DOTA
    elif game == "cs":
        return MAIN_MENU_PHOTO_CS
    else:
        return MAIN_MENU_PHOTO_DEFAULT

ROLES = {
    'player': '–ò–≥—Ä–æ–∫',
    'coach': '–¢—Ä–µ–Ω–µ—Ä',
    'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä'
}